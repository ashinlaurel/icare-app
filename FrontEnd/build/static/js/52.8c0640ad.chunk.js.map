{"version":3,"sources":["pages/Calls/RegisterCall.js","components/Modal/AssetFilters/CustomerSelection.js"],"names":["RegisterCall","useHistory","useState","isReviewModalOpen","setIsReviewModalOpen","isReqFieldModal","setIsReqFieldModal","isAssetModal","setIsAssetModal","IsassetexistModal","setIsassetexistModal","assetexistmessage","setAssetexistmessage","setTopHeading","useContext","TopBarContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","page","setPage","data","setData","isOpen","setIsOpen","isOpenTwo","setIsOpenTwo","isModalOpen","setIsModalOpen","refresh","setRefresh","disabler","setDisabler","Business","setBusiness","product","setProduct","_id","unitName","unit","setUnit","theunitdetails","setTheUnitDetails","customerName","customer","setCustomer","accountName","account","setAccount","selectedprod","setSelectedProd","searchtype","setSearchType","searchlabel","setSearchLabel","searchquery","setSearchQuery","date","callStatus","engineer","callAttendDate","startOfService","endOfService","note","actionTaken","callhistory","setCallHistory","totalResults","setTotalResults","successfulCallNo","setSuccessfulCallNo","onPageChange","p","useEffect","a","console","log","payload","pages","limit","filters","business","producttype","unitId","customerId","accountId","axios","url","API","Emp","getId","method","response","out","total","setValues","values","contactPerson","phone","contactNo","valobj","callNo","callType","problem","time","handleChange","name","e","thedate","target","value","callNumberSetter","getUnitDetails","id","unitdata","queryyear","moment","format","startdate","enddate","thecallcount","year","month","day","callnumber","thestring","temp","submitCall","JSON","stringify","newcall","assetId","history","regtimestamp","errid","message","className","readOnly","type","class","onChange","disabled","selected","xmlns","viewBox","d","placeholder","onClick","aria-label","aria-haspopup","onClose","onSubmit","preventDefault","map","user","i","key","serialno","contractfrom","contractto","ponumber","podate","resultsPerPage","label","CustomerSelection","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleSubmit","role","pickCustomer","Axios","post","accs","pickAccount","u","pickUnit","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/52.8c0640ad.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport moment from \"moment\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nimport {\n  Input,\n  HelperText,\n  Label,\n  Button,\n  Badge,\n  Select,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { signup, signin, authenticate } from \"../../helpers/auth\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nimport { useHistory } from \"react-router-dom\";\n\n// --------ASSET\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { Link } from \"react-router-dom\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\n/////////////----------------->>>>>> bug <<<<<------------customerList refresh-------------------------\n\nfunction RegisterCall() {\n  let history = useHistory();\n\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [isReqFieldModal, setIsReqFieldModal] = useState(false);\n  const [isAssetModal, setIsAssetModal] = useState(false);\n  const [IsassetexistModal, setIsassetexistModal] = useState(false);\n  const [assetexistmessage, setAssetexistmessage] = useState(\"\");\n  const { setTopHeading } = useContext(TopBarContext);\n\n  //---------------------------------- ASSETS VIEW STATES\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n\n  // Bottom bar stuff\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [theunitdetails, setTheUnitDetails] = useState({});\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // call history\n  const [callhistory, setCallHistory] = useState([\n    {\n      date: \"\",\n      callStatus: \"0\",\n      engineer: \"Yet To Be Assigned\",\n      callAttendDate: \"Nil\",\n      startOfService: \"Nil\",\n      endOfService: \"Nil\",\n      note: \"Call has been registered\",\n      actionTaken: \"Nil\",\n    },\n  ]);\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n  const [successfulCallNo, setSuccessfulCallNo] = useState(\"\");\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assets Management\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          business: Business,\n          producttype: product,\n          customer: customer,\n          account: account,\n          unitId: unit._id,\n          customerId: customer._id,\n          accountId: account._id,\n          searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/asset/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  // ----------------------Unit Details ------------------------------\n  useEffect(() => {\n    console.log(\"-----------------------unit details ------------------------\");\n    console.log(theunitdetails);\n    setValues({\n      ...values,\n      contactPerson: theunitdetails.contactPerson,\n      phone: theunitdetails.contactNo,\n    });\n  }, [refresh]);\n\n  const Asset = () => {\n    return (\n      <>\n        {/* ---------------------Customer Selection Modal----------------------------------------- */}\n        <CustomerSelection\n          isModalOpen={isModalOpen}\n          setIsModalOpen={setIsModalOpen}\n          setUnit={setUnit}\n          unit={unit}\n          customer={customer}\n          setCustomer={setCustomer}\n          account={account}\n          setAccount={setAccount}\n          refresh={refresh}\n          setRefresh={setRefresh}\n          theunitdetails={theunitdetails}\n          setTheUnitDetails={setTheUnitDetails}\n        />\n        {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n        {/* {floatbox ? <AssetFloat /> : null} */}\n        <div className=\"mb-64 mt-1\">\n          <div className=\"dark:text-white flex items-center font-bold my-2 text-xl\">\n            Pick Asset\n          </div>\n          {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n          <div className=\"\">\n            {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n            <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n              <div class=\"relative  \">\n                <button\n                  class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                  onClick={() => {\n                    setIsModalOpen(!isModalOpen);\n                  }}\n                  // value={sortBy}\n                  // onChange={onSortToggle}\n                >\n                  Pick Customer\n                </button>\n\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n\n              <div class=\"relative mx-5 \">\n                <select\n                  class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                  value={Business}\n                  onChange={(e) => {\n                    setBusiness(e.target.value);\n                  }}\n                >\n                  <option value=\"\" disabled selected>\n                    Business Type\n                  </option>\n                  <option value=\"\">All</option>\n                  <option value=\"AMC\">AMC</option>\n                  <option value=\"WTY\">Warranty</option>\n                  <option value=\"NOS\">NOS</option>\n                </select>\n\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n              {/* ---------------------------Product Drop Down-------------------------------------- */}\n              <div className=\"relative z-40 \">\n                <button\n                  onClick={() => {\n                    setIsOpen(!isOpen);\n                  }}\n                  className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  aria-label=\"Notifications\"\n                  aria-haspopup=\"true\"\n                >\n                  {product ? product : \"Pick Product\"}\n                </button>\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n                <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"\");\n                    }}\n                  >\n                    <span>All</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Console\");\n                    }}\n                  >\n                    <span>Console</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"DMP\");\n                    }}\n                  >\n                    <span>DMP</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Inkjet\");\n                    }}\n                  >\n                    <span>Inkjet</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"KVM\");\n                    }}\n                  >\n                    <span>KVM</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Laptop\");\n                    }}\n                  >\n                    <span>Laptop</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Laser\");\n                    }}\n                  >\n                    <span>Laser</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"LMP\");\n                    }}\n                  >\n                    <span>LMP</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Module\");\n                    }}\n                  >\n                    <span>Module</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Router\");\n                    }}\n                  >\n                    <span>Router</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Scanner\");\n                    }}\n                  >\n                    <span>Scanner</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Server\");\n                    }}\n                  >\n                    <span>Server</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Desktop\");\n                    }}\n                  >\n                    <span>Desktop</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Storage\");\n                    }}\n                  >\n                    <span>Storage</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Switch\");\n                    }}\n                  >\n                    <span>Switch</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"UPS\");\n                    }}\n                  >\n                    <span>UPS</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Others\");\n                    }}\n                  >\n                    <span>Others</span>\n                  </DropdownItem>\n                </Dropdown>\n              </div>\n\n              {/* -------------------------------Search Type--------------------------------------- */}\n              <div className=\"relative \">\n                <button\n                  onClick={() => {\n                    setIsOpenTwo(!isOpenTwo);\n                  }}\n                  className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  aria-label=\"Notifications\"\n                  aria-haspopup=\"true\"\n                >\n                  {searchtype ? searchlabel : \"Pick Search Type\"}\n                </button>\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n                <Dropdown\n                  isOpen={isOpenTwo}\n                  onClose={() => setIsOpenTwo(false)}\n                >\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"\");\n                      setSearchLabel(\"\");\n                      setDisabler(true);\n                      setSearchQuery(\"\");\n                      setRefresh(!refresh);\n                    }}\n                  >\n                    <span>All</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"prodserial\");\n                      setSearchLabel(\"Product Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Product Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"keyboardsno\");\n                      setSearchLabel(\"Keyboard Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Keyboard Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"mousesno\");\n                      setSearchLabel(\"Mouse Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Mouse Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"motherboardsno\");\n                      setSearchLabel(\"Motherboard Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Motherboard Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"monitorsno\");\n                      setSearchLabel(\"Monitor Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Monitor Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"hddsno\");\n                      setSearchLabel(\"HDD Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>HDD Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"cpusno\");\n                      setSearchLabel(\"CPU Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>CPU Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"ramsno\");\n                      setSearchLabel(\"Ram Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>RAM Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"smpssno\");\n                      setSearchLabel(\"SMPS Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>SMPS Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"fansno\");\n                      setSearchLabel(\"Fan Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Fan Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"opticaldrivesno\");\n                      setSearchLabel(\"Optical Drive Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Optical Drive Serial</span>\n                  </DropdownItem>\n                </Dropdown>\n              </div>\n              {/* -----------------Search Bar------------------------------------ */}\n              <div class=\"block relative xl:ml-64\">\n                <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                  <svg\n                    viewBox=\"0 0 24 24\"\n                    class=\"h-4 w-4 fill-current text-gray-500\"\n                  >\n                    <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                  </svg>\n                </span>\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    setRefresh(!refresh);\n                  }}\n                >\n                  <input\n                    value={searchquery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\"Search\"\n                    disabled={disabler}\n                    class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  />\n                </form>\n              </div>\n            </div>\n            {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n            {/* <div className=\"my-4 flex \">\n            <div class=\"relative \">\n              <select\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                <option value=\"TIME_ASC\">Time(Latest)</option>\n                <option value=\"TIME_DESC\">Time(Oldest)</option>\n                <option value=\"NAME_ASC\">Name(A-Z)</option>\n                <option value=\"NAME_DESC\">Name(Z-A)</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div> */}\n          </div>\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Customer</TableCell>\n                  <TableCell>Unit</TableCell>\n                  <TableCell>Business</TableCell>\n                  <TableCell>Product</TableCell>\n                  <TableCell>Product Serial</TableCell>\n                  <TableCell>Contract From</TableCell>\n                  <TableCell>Contract To</TableCell>\n                  <TableCell>Purchase Number</TableCell>\n                  <TableCell>Purchase Date</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {data.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(user._id);\n                      getUnitDetails(user.unitId);\n                      // console.log(\"hereuser\",user);\n                      // console.log(\"the id is \" + user._id);\n                      setSelectedProd(user);\n                      setAssetDetails(user);\n                      setBBarOpen(1);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                        <div>\n                          <p className=\"font-semibold\">{user.customerName}</p>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {user.accountName}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.unitName}</span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        type={user.business == \"AMC\" ? \"primary\" : \"success\"}\n                      >\n                        {user.business}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.producttype}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.product.serialno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.contractfrom).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.contractto).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.ponumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.podate).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            <TableFooter>\n              <Pagination\n                totalResults={totalResults}\n                resultsPerPage={resultsPerPage}\n                label=\"Table navigation\"\n                onChange={onPageChange}\n              />\n            </TableFooter>\n            <div className=\"flex justify-end\">\n              <Button className=\" mb-10 my-2 \" onClick={submitCall}>\n                Register Call\n              </Button>\n            </div>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </>\n    );\n  };\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  //---------------------------------- ASSETS VIEW STATES\n\n  let valobj = {\n    //both\n    callNo: \"\",\n    callType: \"\",\n    date: \"\",\n    contactPerson: \"\",\n    phone: \"\",\n    callStatus: \"Pending for allocation\",\n    problem: \"\",\n    time: \"\",\n  };\n  const [values, setValues] = useState(valobj);\n  const [err, setErr] = useState({});\n\n  // ----------------------Heading Use Effect-------------\n\n  useEffect(() => {\n    setTopHeading(\"Register Call\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  const handleChange = (name) => (e) => {\n    let thedate = e.target.value;\n    setValues({ ...values, [name]: e.target.value });\n    if (name == \"date\") {\n      callNumberSetter(thedate);\n    }\n  };\n// getting unit details to get phone ,email etc\n  const getUnitDetails = async (unitId) => {\n    \n    try {\n      let unitdata = await axios({\n        url: `${API}/unit/${Emp.getId()}/getbyid`,\n        method: \"POST\",\n        data: {id:unitId},\n      });\n      console.log(\"unitdata\",unitdata.data);\n      let out= unitdata.data;\n      setValues({ ...values,contactPerson:out.contactPerson, phone:out.contactNo});\n      \n    } catch (error) {\n      throw error;\n    }\n    \n  };\n\n  const callNumberSetter = async (date) => {\n    // console.log(moment(date).format(\"YYYY-MM-DD\"));\n    // ------------------year estimation for internal calls --------------------\n    let queryyear = moment(date).format(\"YYYY\");\n    let startdate = moment(queryyear + \"-01-01\").format(\"YYYY-MM-DD\");\n    let enddate = moment(queryyear + \"-12-31\").format(\"YYYY-MM-DD\");\n    console.log(startdate);\n    console.log(enddate);\n\n    // ----------------------------------------------------------------------------\n\n    let payload = {\n      date: date,\n      callType: values.callType,\n      startdate: startdate,\n      enddate: enddate,\n    };\n    let thecallcount = 0;\n\n    // ----getting call count ------\n    try {\n      thecallcount = await axios({\n        url: `${API}/call/${Emp.getId()}/callsbydate`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    let year = moment(date).format(\"YY\");\n    let month = moment(date).format(\"MM\");\n    let day = moment(date).format(\"DD\");\n    let callnumber = thecallcount.data + 1;\n    // setting call number based on the type\n    if (values.callType == \"external\") {\n      if (callnumber < 10) {\n        callnumber = \"0\" + callnumber;\n      }\n\n      let thestring = year + month + day + callnumber;\n      setValues({ ...values, callNo: thestring, date: date });\n    } else if (values.callType == \"internal\") {\n      if (callnumber < 10) {\n        callnumber = \"00\" + callnumber;\n      } else if (callnumber >= 10 && callnumber < 100) {\n        callnumber = \"0\" + callnumber;\n      }\n      let thestring = \"ICS\" + year + callnumber;\n      setValues({ ...values, callNo: thestring, date: date });\n    }\n\n    // ------history management --------------\n    let temp = callhistory;\n    temp[0].date = date;\n    setCallHistory(temp);\n  };\n\n  const submitCall = async () => {\n    if (\n      values.callNo === \"\" ||\n      values.callType === \"\" ||\n      // (values.contactPerson === \"\") |\n      // (values.phone === \"\") |\n      values.problem === \"\" ||\n      values.date === \"\" ||\n      values.time === \"\"\n    ) {\n      setIsReqFieldModal(true);\n      return;\n    }\n    if (JSON.stringify(selectedprod) == JSON.stringify({})) {\n      setIsAssetModal(true);\n      return;\n    }\n    // e.preventDefault();\n    setSuccessfulCallNo(values.callNo);\n    const newcall = {\n      callNo: values.callNo,\n      callType: values.callType,\n      date: values.date,\n      time: values.time,\n      contactPerson: values.contactPerson,\n      phone: values.phone,\n      problem: values.problem,\n      unitId: selectedprod.unitId,\n      unitName: selectedprod.unitName,\n      accountId: selectedprod.accountId,\n      accountName: selectedprod.accountName,\n      customerId: selectedprod.customerId,\n      customerName: selectedprod.customerName,\n      assetId: selectedprod._id,\n      callStatus: 0,\n      history: callhistory,\n      regtimestamp: moment().format(),\n      // employeeId:\"\"\n    };\n    console.log(\"CALL->\", newcall);\n    try {\n      await axios({\n        url: `${API}/call/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: newcall,\n      });\n      setIsReviewModalOpen(true);\n      setValues(valobj);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error.response.data);\n      if (error.response.data.errid == 1) {\n        setAssetexistmessage(error.response.data.message);\n        setIsassetexistModal(true);\n      }\n    }\n  };\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>\n            Created Call No. {successfulCallNo} Successfully!\n          </ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const ReqFieldErrModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReqFieldModal}\n          onClose={() => setIsReqFieldModal(false)}\n        >\n          <ModalHeader>Required fields are not filled!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReqFieldModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const AssetSelectedModal = () => {\n    return (\n      <>\n        <Modal isOpen={isAssetModal} onClose={() => setIsAssetModal(false)}>\n          <ModalHeader>Asset is not selected!</ModalHeader>\n          <ModalBody>Please select asset before registering call.</ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsAssetModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const AssetExistsModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={IsassetexistModal}\n          onClose={() => setIsassetexistModal(false)}\n        >\n          <ModalHeader>Call already raised for asset!</ModalHeader>\n          <ModalBody>\n            Call No {assetexistmessage} already raised for asset.\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsassetexistModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const addForm = () => {\n    return (\n      <div className=\"px-4 py-3 mt-4 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>Call Information</span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ----------------------Row 1 ----------------------------- */}\n        <div className=\"flex-row flex space-x-3 \">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Call Number</span>\n              <Input\n                // disabled\n                readOnly={true}\n                className=\"mt-1\"\n                type=\"text\"\n                value={values.callNo}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.callNo}</HelperText> */}\n          </div>\n        </div>\n        {/* ------------------------Row 2-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Call Type*</span>\n                <div class=\"relative mt-1 \">\n                  <select\n                    class=\"  h-full rounded border block appearance-none w-full bg-white border-gray-300 text-gray-700 py-3 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={values.callType}\n                    onChange={handleChange(\"callType\")}\n                  >\n                    <option value=\"\" disabled selected>\n                      Call Type\n                    </option>\n                    <option value=\"internal\">Internal</option>\n                    <option value=\"external\">External</option>\n                  </select>\n\n                  <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                    <svg\n                      class=\"fill-current h-4 w-4\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                    </svg>\n                  </div>\n                </div>\n              </Label>\n              {/* <HelperText valid={false}>{err.callNo}</HelperText> */}\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Date*</span>\n              <Input\n                disabled={values.callType == \"\" ? true : false}\n                className=\"mt-1\"\n                type=\"date\"\n                value={values.date}\n                onChange={handleChange(\"date\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Time*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"time\"\n                value={values.time}\n                onChange={handleChange(\"time\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Contact Person*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                placeholder=\"\"\n                value={values.contactPerson}\n                onChange={handleChange(\"contactPerson\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Phone Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values.phone}\n                onChange={handleChange(\"phone\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n        </div>\n        {/* ----------------------Row 3 ----------------------------- */}\n        <div className=\"flex-row flex space-x-3 \">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Problem Description*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values.problem}\n                onChange={handleChange(\"problem\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n        </div>\n        {/* ///////////////////////////////////////////////////////// */}\n        {/* <Label className=\"font-bold mt-2 mb-1\">\n        \n        </Label> */}\n\n        {/* ///////////////////////////////////////////////////////// */}\n\n        <>\n          {/* <Button\n              onClick={() => setIsModalOpen(true)}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              className=\"mt-4 mr-2\"\n            >\n              {customer.customerName === \"\" ? (\n                <>Select Associations</>\n              ) : (\n                <>Customer: {customer.customerName}</>\n              )}\n            </Button> */}\n        </>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {/* <PageTitle>Add Customer</PageTitle> */}\n      {addForm()}\n\n      {Asset()}\n\n      {/* {productPicker()} */}\n      {ReviewSubmit()}\n      {ReqFieldErrModal()}\n      {AssetSelectedModal()}\n      {AssetExistsModal()}\n    </>\n  );\n}\n\nexport default RegisterCall;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\"  >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}