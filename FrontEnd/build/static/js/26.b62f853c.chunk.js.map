{"version":3,"sources":["pages/DashboardCustomer.js","../node_modules/classnames/index.js","components/RoundIcon.js","components/Cards/InfoCard.js"],"names":["Dashboard","useState","useContext","TopBarContext","setTopHeading","topheading","assetcount","setAssetCount","useEffect","a","payload","CustProfile","getRole","customerId","getId","accountId","axios","url","API","method","data","response","console","log","className","title","value","icon","MoneyIcon","iconColorClass","bgColorClass","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","default","RoundIcon","Icon","cls","InfoCard","children"],"mappings":";0QAmHeA,UArGf,WAAsB,IAAD,EACKC,mBAAS,GADd,gCAEKA,mBAAS,KAFd,gCAGmBC,qBAAWC,MAA7BC,GAHD,EAGXC,WAHW,EAGCD,eAHD,EAMqBH,mBAAS,IAN9B,gCAQiBA,mBAAS,KAR1B,gCASmBA,mBAAS,KAT5B,gCAUmBA,mBAAS,KAV5B,gCAWWA,oBAAS,IAXpB,gCAYaA,oBAAS,IAZtB,gCAaeA,oBAAS,IAbxB,gCAemBA,mBAAS,IAf5B,gCAmBiBA,mBAAS,IAnB1B,mBAmBZK,EAnBY,KAmBAC,EAnBA,OAuBqBN,mBAAS,IAvB9B,mBA6EnB,OA7EmB,UAgCnBO,qBAAU,YAER,uCAAC,8BAAAC,EAAA,yDAEKC,EAAU,GACe,GAAzBC,IAAYC,UAHjB,gBAGiCF,EAAQG,WAAaF,IAAYG,QAHlE,0BAImC,GAAzBH,IAAYC,UAJtB,gBAKGF,EAAQK,UAAYJ,IAAYG,QALnC,oFASwBE,IAAM,CACzBC,IAAI,GAAD,OAAKC,MAAL,0BACHC,OAAQ,OACRC,KAAMV,IAZX,QASOW,EATP,OAcGC,QAAQC,IAAIF,EAASD,MAIrBb,EAAcc,EAASD,MAlB1B,yHAAD,yDAwBC,IAGHZ,qBAAU,WAER,OADAJ,EAAc,aACP,WACLA,EAAc,OAEf,IAYD,oCAIE,yBAAKoB,UAAU,sDACb,kBAAC,IAAD,CAAUC,MAAM,eAAeC,MAAOpB,GACpC,kBAAC,IAAD,CACEqB,KAAMC,YACNC,eAAe,qCACfC,aAAa,iCACbN,UAAU,WAIhB,wBAAIA,UAAU,Y,oBC1GpB,OAOC,WACA,aAEA,IAAIO,EAAS,GAAGC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAC1C,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CAEA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC3BL,EAAQM,KAAKF,QACP,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC5C,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAC/BK,GACHT,EAAQM,KAAKG,QAER,GAAgB,WAAZJ,EACV,IAAK,IAAIM,KAAOP,EACXP,EAAOe,KAAKR,EAAKO,IAAQP,EAAIO,IAChCX,EAAQM,KAAKK,IAMjB,OAAOX,EAAQa,KAAK,KAGgBC,EAAOC,SAC3ChB,EAAWiB,QAAUjB,EACrBe,EAAOC,QAAUhB,QAGX,kBACL,OAAOA,GADF,QAAe,OAAf,aAtCP,I,iCCPD,sCAmBekB,IAhBf,YAKI,IAJIC,EAIL,EAJDzB,KAIC,IAHDE,sBAGC,MAHgB,uCAGhB,MAFDC,oBAEC,MAFc,mCAEd,EADDN,EACC,EADDA,UAIM6B,EAAMpB,IAFM,mBAEgBJ,EAAgBC,EAAcN,GAChE,OACE,yBAAKA,UAAW6B,GACd,kBAACD,EAAD,CAAM5B,UAAU,e,iCCdtB,2BAiBe8B,IAdf,YAAqD,IAAjC7B,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAiBC,EAAQ,EAAlB4B,SAChC,OACE,kBAAC,OAAD,KACE,kBAAC,WAAD,CAAU/B,UAAU,qBACjBG,EACD,6BACE,uBAAGH,UAAU,6DAA6DC,GAC1E,uBAAGD,UAAU,0DAA0DE","file":"static/js/26.b62f853c.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\n\nimport InfoCard from \"../components/Cards/InfoCard\";\n\nimport { MoneyIcon } from \"../icons\";\nimport RoundIcon from \"../components/RoundIcon\";\n\nimport { API } from \"../backendapi\";\n\nimport { TopBarContext } from \"../context/TopBarContext\";\n\nimport CustProfile from \"../helpers/auth/CustProfile\";\n\nfunction Dashboard() {\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  // Quick Search States ------------------------\n  const [selectedprod, setSelectedProd] = useState({});\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  // Count States ---------------------------------------------\n\n  const [assetcount, setAssetCount] = useState(0);\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // -------Stats getter ---------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {};\n      if (CustProfile.getRole() == 1) payload.customerId = CustProfile.getId();\n      else if (CustProfile.getRole() == 2)\n        payload.accountId = CustProfile.getId();\n      else return;\n\n      try {\n        let response = await axios({\n          url: `${API}/asset/countbycustomer`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        // setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n        setAssetCount(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, []);\n\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Dashboard\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  const handleChange = () => {\n    console.log(\"change\");\n  };\n\n  const handleSubmit = () => {\n    console.log(\"submit\");\n  };\n\n  return (\n    <>\n      {/* <PageTitle>Dashboard</PageTitle> */}\n\n      {/* <!-- Cards --> */}\n      <div className=\"grid gap-6 mt-5 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n        <InfoCard title=\"Total Assets\" value={assetcount}>\n          <RoundIcon\n            icon={MoneyIcon}\n            iconColorClass=\"text-green-500 dark:text-green-100\"\n            bgColorClass=\"bg-green-100 dark:bg-green-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n      </div>\n      <hr className=\"mb-4\" />\n\n      {/* ------------------Search------------------------------ */}\n\n      {/* -----------------Quick Search Table ---------------  */}\n    </>\n  );\n}\n\nexport default Dashboard;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction RoundIcon({\n  icon: Icon,\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\n  className,\n}) {\n  const baseStyle = 'rounded-full p-5'\n\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\n  return (\n    <div className={cls}>\n      <Icon className=\"w-6 h-6\" />\n    </div>\n  )\n}\n\nexport default RoundIcon\n","import React from 'react'\nimport { Card, CardBody } from '@windmill/react-ui'\n\nfunction InfoCard({ title, value, children: icon }) {\n  return (\n    <Card>\n      <CardBody className=\"flex items-center\">\n        {icon}\n        <div>\n          <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{value}</p>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default InfoCard\n"],"sourceRoot":""}