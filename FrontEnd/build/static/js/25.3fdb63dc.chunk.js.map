{"version":3,"sources":["pages/Calls/AssignEng.js","components/Modal/AssetFilters/CustomerSelection.js","components/Modal/UnitListModal.js","components/Modal/EngineerListModal.js"],"names":["AssignEng","useState","addEnggModalOpen","setaddEnggModalOpen","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","refresh","setRefresh","callStatus","setCallStatus","fromDate","setFromDate","toDate","setToDate","Business","product","_id","unitName","customerName","accountName","enggName","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","isProblemDesc","setIsProblemDesc","selectedprod","setSelectedProd","searchquery","setSearchQuery","assignedDate","setAssignedDate","assignedETA","setAssignedETA","totalResults","setTotalResults","AddEnggModal","isOpen","onClose","className","callNo","type","value","moment","format","onChange","e","target","date","onClick","a","console","log","newcallhistory","callAttendDate","startOfService","endOfService","note","actionTaken","payload","id","update","employeeId","employeeName","$push","history","employeepayload","assignedCalls","priority","callId","Date","axios","url","API","Emp","getId","method","temp","filter","c","useEffect","pages","limit","filters","response","total","out","isModalOpen","setIsModalOpen","nextModal","problem","class","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","map","call","i","key","assetId","time","producttype","serialno","phone","layout","size","aria-label","aria-hidden","resultsPerPage","label","p","CustomerSelection","unit","setUnit","account","setAccount","customer","setCustomer","theunitdetails","setTheUnitDetails","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","name","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","contactPerson","contactNo","selectedIndex","onSelect","ind","UnitListModal","EngineerListModal","values","setValues","then","users","user","push","catch","err","employeeID"],"mappings":"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","file":"static/js/25.3fdb63dc.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\n\nfunction AssignEng() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [callStatus, setCallStatus] = useState(\"0\");\n  const [location, setLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n  const [fromDate, setFromDate] = useState(\"\");\n  const [toDate, setToDate] = useState(\"\");\n\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  const [isProblemDesc, setIsProblemDesc] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const AddEnggModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={addEnggModalOpen}\n          onClose={() => setaddEnggModalOpen(false)}\n        >\n          <ModalHeader>Confirm Assignment</ModalHeader>\n          <ModalBody>\n            <div className=\"font-xl text-xl\">\n              Assign {engineer.enggName} to call {selectedprod.callNo}\n            </div>\n\n            <div className=\"flex flex-col w-full mt-2\">\n              <Label className=\"w-full\">\n                <span>Assign Date</span>\n                <Input\n                  className=\"\"\n                  type=\"date\"\n                  value={moment(assignedDate).format(\"YYYY-MM-DD\")}\n                  onChange={(e) => {\n                    // setCall({ ...call, callAttendDate: e.target.value });\n                    setAssignedDate(e.target.value);\n                  }}\n                />\n              </Label>\n              {moment(selectedprod.date).format(\"YYYY-MM-DD\") >\n              moment(assignedDate).format(\"YYYY-MM-DD\") ? (\n                <span className=\"text-red-700\">\n                  Error: Selected date is before the call date!\n                </span>\n              ) : null}\n            </div>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Assign ETA</span>\n                <Input\n                  className=\"\"\n                  type=\"time\"\n                  value={assignedETA}\n                  onChange={(e) => {\n                    // setCall({ ...call, startOfService: e.target.value });\n                    setAssignedETA(e.target.value);\n                  }}\n                />\n              </Label>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(selectedprod);\n                if (assignedDate == \"\" || assignedETA == \"\") {\n                  return;\n                }\n                if (\n                  moment(selectedprod.date).format(\"YYYY-MM-DD\") >\n                  moment(assignedDate).format(\"YYYY-MM-DD\")\n                ) {\n                  return;\n                }\n\n                // ----- history ---\n                let newcallhistory = {\n                  date: moment().format(),\n                  callStatus: \"2\",\n                  engineer: engineer.enggName,\n                  callAttendDate: \"Nil\",\n                  startOfService: \"Nil\",\n                  endOfService: \"Nil\",\n                  note: `${engineer.enggName} has been assigned to the call. Assigned Date: ${assignedDate} Assigned ETA: ${assignedETA}`,\n                  actionTaken: \"Nil\",\n                };\n\n                let payload = {\n                  id: selectedprod._id,\n                  update: {\n                    employeeId: engineer._id,\n                    employeeName: engineer.enggName,\n                    callStatus: 2,\n                    assignedDate: assignedDate,\n                    assignedETA: assignedETA,\n                    $push: { history: newcallhistory },\n                  },\n                };\n                let employeepayload = {\n                  id: engineer._id,\n                  update: {\n                    $push: {\n                      assignedCalls: {\n                        priority: 99,\n                        callId: selectedprod._id,\n                        date: new Date(),\n                      },\n                    },\n                  },\n                };\n                try {\n                  let response = await axios({\n                    url: `${API}/call/${Emp.getId()}/assignEngg`,\n                    method: \"POST\",\n                    data: payload,\n                  });\n                  let temp = data;\n                  console.log(temp);\n                  temp = temp.filter((c) => {\n                    if (c._id === selectedprod._id) {\n                      c.callStatus = 2;\n                      c.employeeName = engineer.enggName;\n                      c.employeeId = engineer._id;\n                      return c;\n                    }\n                    setData(temp);\n                  });\n                  // updating employee modal\n\n                  await axios({\n                    url: `${API}/admin/${Emp.getId()}/update`,\n                    method: \"POST\",\n                    data: employeepayload,\n                  });\n                  // console.log(response.data);\n                  setaddEnggModalOpen(false);\n                  setAssignedDate(\"\");\n                  setAssignedETA(\"\");\n                  setRefresh(!refresh);\n                } catch (error) {\n                  throw error;\n                }\n              }}\n            >\n              Confirm Assignment\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const ProblemModal = () => {\n    return (\n      <>\n        <Modal isOpen={isProblemDesc} onClose={() => setIsProblemDesc(false)}>\n          <ModalHeader>Problem Description</ModalHeader>\n          <ModalBody>\n            <div className=\"font-xl text-xl overflow-scroll\">\n              {selectedprod.problem}\n            </div>\n          </ModalBody>\n        </Modal>\n      </>\n    );\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assign Engineer\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          callStatus: callStatus,\n          searchquery: searchquery,\n          fromDate: fromDate,\n          toDate: toDate,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        // console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [\n    page,\n    Business,\n    product,\n    refresh,\n    callStatus,\n    searchquery,\n    fromDate,\n    toDate,\n  ]);\n\n  // console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <EngineerListModal\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEngineer={setEngineer}\n        nextModal={setaddEnggModalOpen}\n      />\n      <AddEnggModal />\n      {ProblemModal()}\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* <div className=\"flex items-center\">\n          <PageTitle>Assets Management</PageTitle>\n          <div>\n            <Button\n              className=\"mx-3\"\n              onClick={() => {\n                setFloatBox(!floatbox);\n              }}\n              icon={HeartIcon}\n              layout=\"link\"\n              aria-label=\"Like\"\n            />\n          </div>\n        </div> */}\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={callStatus}\n                onChange={(e) => {\n                  setCallStatus(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Call Status\n                </option>\n                <option value=\"all\">All But Closed</option>\n                <option selected value=\"0\">\n                  Pending For Allocation\n                </option>\n                <option value=\"priority\">Priority</option>\n                {/* <option value=\"-1\">Allocated</option> */}\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            <Label className=\"\">\n              <span>From Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1\"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n              />\n            </Label>\n            <Label className=\"\">\n              <span>To Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1 mr-5\"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n              />\n            </Label>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search by Call No.\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                {callStatus == \"priority\" ? (\n                  <>\n                    <TableCell>Assigned Date</TableCell>\n                    <TableCell>Assigned ETA</TableCell>\n                  </>\n                ) : null}\n\n                <TableCell>Type</TableCell>\n                <TableCell>Product SNO.</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Problem Description</TableCell>\n                <TableCell>Assigned Employee</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((call, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == call._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(call._id);\n                    setBBarOpen(1);\n                    // console.log(\"the id is \" + call._id);\n                    setSelectedProd(call);\n                    if (call.assetId) setAssetDetails(call.assetId);\n                    else setAssetDetails({});\n                    console.log(\"CALL ASSET\", call.assetId);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{call.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm\">\n                        {moment(call.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                      {call.time ? (\n                        <span className=\"text-xs\">\n                          {moment(`${\"2018-04-02\"}T${call.time}`).format(\n                            \"h:mm a\"\n                          )}\n                        </span>\n                      ) : null}\n                    </div>\n                  </TableCell>\n                  {callStatus == \"priority\" ? (\n                    <>\n                      <TableCell>\n                        <span className=\"text-sm\">\n                          {moment(call.assignedDate).format(\"DD/MM/YYYY\")}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm\">{call.assignedETA}</span>\n                      </TableCell>\n                    </>\n                  ) : null}\n                  <TableCell>\n                    <span className=\"text-sm\">{call.assetId.producttype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {call.assetId.product.serialno}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    {call.callStatus == 0 ? (\n                      <span className=\"text-sm\">Pending For Allocation</span>\n                    ) : null}\n                    {call.callStatus == 1 ? (\n                      <span className=\"text-sm\">\n                        Pending for Percall Approval\n                      </span>\n                    ) : null}\n                    {call.callStatus == 2 ? (\n                      <span className=\"text-sm\">Pending for Response</span>\n                    ) : null}\n                    {call.callStatus == 3 ? (\n                      <span className=\"text-sm\">Pending for OEM Response</span>\n                    ) : null}\n                    {call.callStatus == 4 ? (\n                      <span className=\"text-sm\">Pending for 2nd Response</span>\n                    ) : null}\n                    {call.callStatus == 5 ? (\n                      <span className=\"text-sm\">Pending for Customer</span>\n                    ) : null}\n                    {call.callStatus == 6 ? (\n                      <span className=\"text-sm\">Under Observation</span>\n                    ) : null}\n                    {call.callStatus == 7 ? (\n                      <span className=\"text-sm\">Pending for Others</span>\n                    ) : null}\n                    {call.callStatus == 8 ? (\n                      <span className=\"text-sm\">Pending for Spare</span>\n                    ) : null}\n                    {call.callStatus == 9 ? (\n                      <span className=\"text-sm\">Spare in Transit</span>\n                    ) : null}\n                    {call.callStatus == 10 ? (\n                      <span className=\"text-sm\">Cancelled Calls</span>\n                    ) : null}\n                    {call.callStatus == 11 ? (\n                      <span className=\"text-sm\">Closed Calls</span>\n                    ) : null}\n                    {call.callStatus == 12 ? (\n                      <span className=\"text-sm\">Spare Taken CMRR</span>\n                    ) : null}\n                    {call.callStatus == 13 ? (\n                      <span className=\"text-sm\">\n                        Pending For Spare Collection\n                      </span>\n                    ) : null}\n                    {call.callStatus == 14 ? (\n                      <span className=\"text-sm\">Standby Given</span>\n                    ) : null}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center justify-center\">\n                      <Button\n                        layout=\"outline\"\n                        onClick={() => setIsProblemDesc(true)}\n                      >\n                        View\n                      </Button>{\" \"}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        <div className=\"px-4 py-2 dark:border-purple-400 border-purple-600 dark:bg-gray-700 bg-purple-100 inline-block rounded-lg dark:text-purple-400 text-purple-700\">\n                          {call.employeeName}\n                          <Button\n                            layout=\"link\"\n                            size=\"icon\"\n                            aria-label=\"Edit\"\n                            onClick={() => {\n                              setIsEnggModalOpen(true);\n                              setAssignedETA(call.assignedETA);\n                              setAssignedDate(call.assignedDate);\n                            }}\n                            className=\"rounded-full mx-2 \"\n                          >\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                          </Button>\n                        </div>\n                      </>\n                    ) : (\n                      <Button\n                        layout=\"outline\"\n                        onClick={() => setIsEnggModalOpen(true)}\n                      >\n                        Assign Now\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default AssignEng;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\"  >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function EngineerListModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEngineer,\n  nextModal,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAll`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              {/* <TableCell>Email</TableCell> */}\n              <TableCell>Employee ID</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  setEngineer({\n                    _id: user._id,\n                    enggName: user.employeeName,\n                  });\n                  setIsModalOpen(false);\n                  nextModal(true);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeID}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Assign Engineer</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}