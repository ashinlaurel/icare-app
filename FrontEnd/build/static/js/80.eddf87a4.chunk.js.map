{"version":3,"sources":["pages/Settings/SettingsPage.js"],"names":["Axios","require","default","API","validator","SettingsPage","useState","emails","setEmails","isReviewModalOpen","setIsReviewModalOpen","useEffect","a","url","Emp","getId","result","tempEmails","data","console","log","isOpen","onClose","className","onClick","getRole","onSubmit","e","preventDefault","email","isEmail","empId","method","error","newEmails","icon","Add","layout","aria-label","length","pop","Remove","map","item","i","key","placeholder","name","value","onChange","newlist","target","type"],"mappings":"2SAciBA,EAAUC,EAAQ,GAA3BC,QACAC,EAAQF,EAAQ,IAAhBE,IACFC,EAAYH,EAAQ,MAEX,SAASI,IAAgB,IAAD,EACTC,mBAAS,CAAC,KADD,mBAC9BC,EAD8B,KACtBC,EADsB,OAGaF,mBAAS,GAHtB,mBAG9BG,EAH8B,KAGXC,EAHW,KAKrCC,qBAAU,YACR,uCAAC,8BAAAC,EAAA,+EAEwBZ,EAAM,CACzBa,IAAI,GAAD,OAAKV,EAAL,qBAAqBW,IAAIC,QAAzB,uBAHR,OAESC,EAFT,QAKSC,EAAaD,EAAOE,KAAKX,SAE7BC,EAAUS,GAPf,gDAUGE,QAAQC,IACN,gEADF,MAVH,yDAAD,yDAgBC,IAwIH,OACE,oCArIE,oCACE,kBAAC,QAAD,CACEC,OAA8B,IAAtBZ,EACRa,QAAS,kBAAMZ,EAAqB,KAEpC,kBAAC,cAAD,KACyB,IAAtBD,EACG,8BACA,kDAEN,kBAAC,YAAD,MACA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEc,UAAU,mBACVC,QAAS,kBAAMd,EAAqB,KAFtC,YA2HN,yBAAKa,UAAU,IACb,kBAAC,IAAD,iBACmB,IAAlBT,IAAIW,WA/GP,oCACE,kBAAC,IAAD,uBACA,oCACE,0BACEC,SAAQ,uCAAE,WAAOC,GAAP,uBAAAf,EAAA,sDACRe,EAAEC,iBADM,cAIYrB,GAJZ,4DAIGsB,EAJH,QAKDzB,EAAU0B,QAAQD,GALjB,uBAMJnB,EAAqB,GANjB,wKAWFqB,EAAQjB,IAAIC,QAXV,oBAcaf,EAAM,CACvBa,IAAI,GAAD,OAAKV,EAAL,qBAAqBW,IAAIC,QAAzB,qBACHiB,OAAQ,OACRd,KAAM,CAAEX,SAAQwB,WAjBZ,aAcFf,EAdE,QAmBKiB,MAnBL,uBAoBEjB,EAAOiB,MApBT,QAsBNvB,EAAqB,GACrBS,QAAQC,IAAI,wBAvBN,mDAyBNV,EAAqB,GACrBS,QAAQC,IACN,gEADF,MA1BM,wEAAF,uDAiCR,yBAAKG,UAAU,8BACb,kBAAC,QAAD,CAAOA,UAAU,aACf,yCAEF,yBAAKA,UAAU,QACb,kBAAC,SAAD,CACEC,QAAS,WACP,IAAIU,EAAS,sBAAO3B,GAAP,CAAe,KAC5BC,EAAU0B,IAEZC,KAAMC,MACNC,OAAO,OACPC,aAAW,UAGf,yBAAKf,UAAU,QACb,kBAAC,SAAD,CACEC,QAAS,WACP,IAAIU,EAAS,YAAO3B,GAChB2B,EAAUK,OAAS,IACrBL,EAAUM,MACVhC,EAAU0B,KAGdC,KAAMM,SACNJ,OAAO,OACPC,aAAW,WAIjB,wBAAIf,UAAU,cAEd,yBAAKA,UAAU,mBACZhB,EAAOmC,KAAI,SAACC,EAAMC,GACjB,OACE,yBAAKC,IAAKD,EAAGrB,UAAU,oBACrB,yBAAKA,UAAU,qEACb,kBAAC,QAAD,CAAOA,UAAU,eACf,uCAAaqB,EAAI,GACjB,kBAAC,QAAD,CACErB,UAAS,sBACNnB,EAAU0B,QAAQa,GAEf,GADA,sCAGNG,YAAW,gBAAWF,EAAI,GAC1BG,KAAK,QACLC,MAAOL,EACPM,SAAU,SAACtB,GACT,IAAIuB,EAAO,YAAO3C,GAClB2C,EAAQN,GAAKjB,EAAEwB,OAAOH,MACtBxC,EAAU0C,aAS1B,yBAAK3B,UAAU,0CACb,kBAAC,SAAD,CAAQ6B,KAAK,UAAb,cAcN,yBAAK7B,UAAU","file":"static/js/80.eddf87a4.chunk.js","sourcesContent":["import {\n  Button,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from \"@windmill/react-ui\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport { Add, Remove } from \"../../icons\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\nconst { default: Axios } = require(\"axios\");\nconst { API } = require(\"../../backendapi\");\nconst validator = require(\"validator\");\n\nexport default function SettingsPage() {\n  const [emails, setEmails] = useState([\"\"]);\n  //0 refers to model closed, 1 refers to model open with sucess, 2 refers to model open with unnsuccessful\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(0);\n  //Populate emails initially by using the data in mongoDb\n  useEffect(() => {\n    (async function thegetter() {\n      try {\n        const result = await Axios({\n          url: `${API}/settings/${Emp.getId()}/getReportsEmails`,\n        });\n        const tempEmails = result.data.emails;\n        if (tempEmails) {\n          setEmails(tempEmails);\n        }\n      } catch (e) {\n        console.log(\n          \"Error occured in useEffect while trying to getReportsEmails: \",\n          e\n        );\n      }\n    })();\n  }, []);\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen !== 0}\n          onClose={() => setIsReviewModalOpen(0)}\n        >\n          <ModalHeader>\n            {isReviewModalOpen === 1\n              ? \"Successfully Updated Emails\"\n              : \"Error occured while updating emails. Try Again\"}\n          </ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(0)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const reportsEmailSetting = () => {\n    return (\n      <>\n        <SectionTitle>Reports Emails</SectionTitle>\n        <>\n          <form\n            onSubmit={async (e) => {\n              e.preventDefault();\n\n              //Check if all emails are valid before sending a request\n              for (const email of emails) {\n                if (!validator.isEmail(email)) {\n                  setIsReviewModalOpen(2);\n                  return;\n                }\n              }\n\n              const empId = Emp.getId();\n              //Call the backend route to set emails in database\n              try {\n                let result = await Axios({\n                  url: `${API}/settings/${Emp.getId()}/setReportsEmails`,\n                  method: \"POST\",\n                  data: { emails, empId },\n                });\n                if (result.error) {\n                  throw result.error;\n                }\n                setIsReviewModalOpen(1);\n                console.log(\"Updated Emails in DB\");\n              } catch (error) {\n                setIsReviewModalOpen(2);\n                console.log(\n                  \"Error occured while setting emails from settings to mongoDb: \",\n                  error\n                );\n              }\n            }}\n          >\n            <div className=\"flex flex-row items-center\">\n              <Label className=\"font-bold\">\n                <span>Emails</span>\n              </Label>\n              <div className=\"ml-3\">\n                <Button\n                  onClick={() => {\n                    let newEmails = [...emails, \"\"];\n                    setEmails(newEmails);\n                  }}\n                  icon={Add}\n                  layout=\"link\"\n                  aria-label=\"Like\"\n                />\n              </div>\n              <div className=\"ml-3\">\n                <Button\n                  onClick={() => {\n                    let newEmails = [...emails];\n                    if (newEmails.length > 1) {\n                      newEmails.pop();\n                      setEmails(newEmails);\n                    }\n                  }}\n                  icon={Remove}\n                  layout=\"link\"\n                  aria-label=\"Like\"\n                />\n              </div>\n            </div>\n            <hr className=\"mb-2 mt-4\" />\n            {/* <div className=\"grid gap-2 grid-cols-3\"> */}\n            <div className=\"flex flex-wrap \">\n              {emails.map((item, i) => {\n                return (\n                  <div key={i} className=\"w-1/3 px-4 py-2 \">\n                    <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-8\">\n                      <Label className=\"w-full my-1\">\n                        <span>Email {i + 1}</span>\n                        <Input\n                          className={`mt-1 border ${\n                            !validator.isEmail(item)\n                              ? \"border-red-700 dark:border-red-400\"\n                              : \"\"\n                          }`}\n                          placeholder={`Email ${i + 1}`}\n                          name=\"email\"\n                          value={item}\n                          onChange={(e) => {\n                            let newlist = [...emails];\n                            newlist[i] = e.target.value;\n                            setEmails(newlist);\n                          }}\n                        />\n                      </Label>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n            <div className=\"flex items-center justify-center my-10\">\n              <Button type=\"submit\">Submit</Button>\n            </div>\n          </form>\n        </>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {ReviewSubmit()}\n      <div className=\"\">\n        <PageTitle>Settings</PageTitle>\n        {Emp.getRole() === 0 && reportsEmailSetting()}\n        <div className=\"grid gap-8 my-8 md:grid-cols-2 xl:grid-cols-4\"></div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}