{"version":3,"sources":["pages/CustomerPages/MyAssets.js"],"names":["MyAssets","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","useState","activerowid","setActiveRowId","page","setPage","data","setData","isOpen","setIsOpen","isOpenTwo","setIsOpenTwo","refresh","setRefresh","setDisabler","Business","product","setProduct","_id","unitName","customerName","accountName","selectedprod","setSelectedProd","searchtype","setSearchType","searchlabel","setSearchLabel","searchquery","setSearchQuery","totalResults","setTotalResults","useEffect","console","log","Cust","getId","getRole","a","payload","pages","limit","filters","business","producttype","customerId","accountId","axios","url","API","method","response","out","total","className","class","onClick","aria-label","aria-haspopup","xmlns","viewBox","d","onClose","onSubmit","e","preventDefault","value","onChange","target","placeholder","map","user","i","key","type","serialno","moment","contractfrom","format","contractto","ponumber","podate","resultsPerPage","label","p"],"mappings":"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","file":"static/js/68.c3967e55.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\n// import Emp from \"../../helpers/auth/EmpProfile\";\nimport Cust from \"../../helpers/auth/CustProfile\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\n\nfunction MyAssets() {\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n  // Url params------------\n  // let { id, accountid, unitid } = useParams();\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(0);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  useEffect(() => {\n    console.log(Cust.getId(), Cust.getRole());\n    // Using an IIFE\n    (async function thegetter() {\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          business: Business,\n          producttype: product,\n          //   customer: customer,\n          //   account: account,\n          // unitId: unitid,\n          //   customerId: customer._id,\n          //   accountId: account._id,\n          searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      if (Cust.getRole() == 1) {\n        payload.filters.customerId = Cust.getId();\n      } else if (Cust.getRole() == 2) {\n        payload.filters.accountId = Cust.getId();\n      } else return;\n      try {\n        let response = await axios({\n          url: `${API}/asset/getallbycust`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n        setData(response.data.out);\n        setTotalResults(response.data.total);\n      } catch (error) {\n        throw error;\n      }\n    })();\n\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      <div className=\"mb-64\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            {/* <div class=\"relative  \">\n              <button\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                onClick={() => {\n                  setIsModalOpen(!isModalOpen);\n                }}\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                Pick Customer\n              </button>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div> */}\n\n            {/* <div class=\"relative mx-5 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={Business}\n                onChange={(e) => {\n                  setBusiness(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Business Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"AMC\">AMC</option>\n                <option value=\"Warranty\">Warranty</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div> */}\n            {/* ---------------------------Product Drop Down-------------------------------------- */}\n            <div className=\"relative \">\n              <button\n                onClick={() => {\n                  setIsOpen(!isOpen);\n                }}\n                className=\"shadow-md z-50 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {product ? product : \"Pick Product\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"\");\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Console\");\n                  }}\n                >\n                  <span>Console</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"DMP\");\n                  }}\n                >\n                  <span>DMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Inkjet\");\n                  }}\n                >\n                  <span>Inkjet</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"KVM\");\n                  }}\n                >\n                  <span>KVM</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laptop\");\n                  }}\n                >\n                  <span>Laptop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laser\");\n                  }}\n                >\n                  <span>Laser</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"LMP\");\n                  }}\n                >\n                  <span>LMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Module\");\n                  }}\n                >\n                  <span>Module</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Router\");\n                  }}\n                >\n                  <span>Router</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Scanner\");\n                  }}\n                >\n                  <span>Scanner</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Server\");\n                  }}\n                >\n                  <span>Server</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Desktop\");\n                  }}\n                >\n                  <span>Desktop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Storage\");\n                  }}\n                >\n                  <span>Storage</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Switch\");\n                  }}\n                >\n                  <span>Switch</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"UPS\");\n                  }}\n                >\n                  <span>UPS</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Others\");\n                  }}\n                >\n                  <span>Others</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n\n            {/* -------------------------------Search Type--------------------------------------- */}\n            <div className=\"relative \">\n              <button\n                onClick={() => {\n                  setIsOpenTwo(!isOpenTwo);\n                }}\n                className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {searchtype ? searchlabel : \"Pick Search Type\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpenTwo} onClose={() => setIsOpenTwo(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"\");\n                    setSearchLabel(\"\");\n                    setDisabler(true);\n                    setSearchQuery(\"\");\n                    setRefresh(!refresh);\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"keyboardsno\");\n                    setSearchLabel(\"Keyboard Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Keyboard Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"mousesno\");\n                    setSearchLabel(\"Mouse Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Mouse Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"motherboardsno\");\n                    setSearchLabel(\"Motherboard Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Motherboard Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"monitorsno\");\n                    setSearchLabel(\"Monitor Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Monitor Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"hddsno\");\n                    setSearchLabel(\"HDD Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>HDD Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"cpusno\");\n                    setSearchLabel(\"CPU Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>CPU Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"ramsno\");\n                    setSearchLabel(\"Ram Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>RAM Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"smpssno\");\n                    setSearchLabel(\"SMPS Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>SMPS Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"fansno\");\n                    setSearchLabel(\"Fan Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Fan Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"opticaldrivesno\");\n                    setSearchLabel(\"Optical Drive Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Optical Drive Serial</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n          {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n          {/* <div className=\"my-4 flex \">\n            <div class=\"relative \">\n              <select\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                <option value=\"TIME_ASC\">Time(Latest)</option>\n                <option value=\"TIME_DESC\">Time(Oldest)</option>\n                <option value=\"NAME_ASC\">Name(A-Z)</option>\n                <option value=\"NAME_DESC\">Name(Z-A)</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div> */}\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Customer</TableCell>\n                <TableCell>Unit</TableCell>\n                <TableCell>Business</TableCell>\n                <TableCell>Product</TableCell>\n                <TableCell>Product Serial</TableCell>\n                <TableCell>Contract From</TableCell>\n                <TableCell>Contract To</TableCell>\n                <TableCell>Purchase Number</TableCell>\n                <TableCell>Purchase Date</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(user._id);\n                    // console.log(\"the id is \" + user._id);\n                    setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.customerName}</p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.business == \"AMC\" ? \"primary\" : \"success\"}\n                    >\n                      {user.business}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.producttype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.product.serialno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.contractfrom).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.contractto).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.ponumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.podate).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default MyAssets;\n"],"sourceRoot":""}