{"version":3,"sources":["pages/Calls/AssignCallPriority.js","components/Modal/UnitListModal.js","components/Modal/EngineerListModal.js","components/Modal/SelectEmployeeModal.js","components/Modal/SelectEmployeeModalForCalls.js"],"names":["AssignCallPriority","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","TopBarContext","setTopHeading","topheading","setPage","data","setData","_id","enggName","assignedCalls","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","totalResults","useEffect","submitCustomer","a","console","log","newuser","payload","id","update","axios","url","API","Emp","getId","method","isModalOpen","setIsModalOpen","setEmployee","className","layout","onClick","map","i","callId","priority","key","callNo","moment","date","format","unitName","phone","callStatus","value","onChange","e","temp","filter","x","target","t","resultsPerPage","label","p","UnitListModal","unit","setUnit","account","setAccount","customer","setCustomer","setRefresh","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","preventDefault","role","response","pickCustomer","customerName","name","accountName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","placeholder","type","EngineerListModal","nextModal","values","setValues","then","users","user","push","catch","err","employeeName","employeeID","SelectEmployeeModal","email","SelectEmployeeModalForCalls","limit","getter"],"mappings":"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","file":"static/js/16.afe27226.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport SelectEmployeeModal from \"../../components/Modal/SelectEmployeeModal\";\nimport SelectEmployeeModalForCalls from \"../../components/Modal/SelectEmployeeModalForCalls\";\n\nfunction AssignCallPriority() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({\n    _id: \"\",\n    enggName: \"\",\n    assignedCalls: [],\n  });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  useEffect(() => {\n    setData(engineer.assignedCalls);\n  }, [engineer]);\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assign Call Priority\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  const submitCustomer = async () => {\n    console.log(\"DATA\", data);\n    // e.preventDefault();\n    const newuser = {\n      assignedCalls: [...data],\n    };\n    console.log(newuser);\n\n    const payload = {\n      id: engineer._id,\n      update: newuser,\n    };\n    try {\n      await axios({\n        url: `${API}/admin/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: payload,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SelectEmployeeModalForCalls\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEmployee={setEngineer}\n      />\n      <SelectEmployeeModalForCalls />\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"flex flex-row items-center justify-start space-x-2\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <Button layout=\"outline\" onClick={() => setIsEnggModalOpen(true)}>\n            Select Engineer\n          </Button>\n          <Button onClick={() => submitCustomer(true)}>Submit</Button>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Priority</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map(({ _id, callId, priority }, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == callId._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    // setActiveRowId(callId._id);\n                    // setBBarOpen(1);\n                    // // console.log(\"the id is \" + call._id);\n                    // setSelectedProd(callId);\n                    // if (callId.assetId) setAssetDetails(callId.assetId);\n                    // else setAssetDetails({});\n                    // console.log(callId.assetId);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{callId.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(callId.date).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    {callId.callStatus == 0 ? (\n                      <span className=\"text-sm\">Pending For Allocation</span>\n                    ) : null}\n                    {callId.callStatus == 1 ? (\n                      <span className=\"text-sm\">\n                        Pending for Percall Approval\n                      </span>\n                    ) : null}\n                    {callId.callStatus == 2 ? (\n                      <span className=\"text-sm\">Pending for Response</span>\n                    ) : null}\n                    {callId.callStatus == 3 ? (\n                      <span className=\"text-sm\">Pending for OEM Response</span>\n                    ) : null}\n                    {callId.callStatus == 4 ? (\n                      <span className=\"text-sm\">Pending for 2nd Response</span>\n                    ) : null}\n                    {callId.callStatus == 5 ? (\n                      <span className=\"text-sm\">Pending for Customer</span>\n                    ) : null}\n                    {callId.callStatus == 6 ? (\n                      <span className=\"text-sm\">Under Observation</span>\n                    ) : null}\n                    {callId.callStatus == 7 ? (\n                      <span className=\"text-sm\">Pending for Others</span>\n                    ) : null}\n                    {callId.callStatus == 8 ? (\n                      <span className=\"text-sm\">Pending for Spare</span>\n                    ) : null}\n                    {callId.callStatus == 9 ? (\n                      <span className=\"text-sm\">Spare in Transit</span>\n                    ) : null}\n                    {callId.callStatus == 10 ? (\n                      <span className=\"text-sm\">Cancelled Calls</span>\n                    ) : null}\n                    {callId.callStatus == 11 ? (\n                      <span className=\"text-sm\">Closed Calls</span>\n                    ) : null}\n                    {callId.callStatus == 12 ? (\n                      <span className=\"text-sm\">Spare Taken CMRR</span>\n                    ) : null}\n                    {callId.callStatus == 13 ? (\n                      <span className=\"text-sm\">\n                        Pending For Spare Collection\n                      </span>\n                    ) : null}\n                    {callId.callStatus == 14 ? (\n                      <span className=\"text-sm\">Standby Given</span>\n                    ) : null}\n                  </TableCell>\n                  <TableCell>\n                    <input\n                      value={priority}\n                      onChange={(e) => {\n                        let temp = data;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != _id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.priority = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setData(temp);\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default AssignCallPriority;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(true);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function EngineerListModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEngineer,\n  nextModal,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAll`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              {/* <TableCell>Email</TableCell> */}\n              <TableCell>Employee ID</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  setEngineer({\n                    _id: user._id,\n                    enggName: user.employeeName,\n                  });\n                  setIsModalOpen(false);\n                  nextModal(true);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeID}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Assign Engineer</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function SelectEmployeeModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEmployee,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAllEmpData`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              <TableCell>Email</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  console.log(user);\n                  setEmployee(user);\n\n                  setIsModalOpen(false);\n                  //   nextModal(true)\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.email}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Select Employee</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function SelectEmployeeModalForCalls({\n  isModalOpen,\n  setIsModalOpen,\n  setEmployee,\n}) {\n  const [values, setValues] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    // console.log(\"HERERRE\");\n    async function getter() {\n      let payload = {\n        search: search,\n        limit: 5,\n      };\n      // console.log(\"payload\", payload);\n\n      // here we are just getting all the employees not their calls\n      try {\n        let users = await Axios({\n          url: `${API}/admin/${Emp.getId()}/getAllEmpCalls`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        // console.log(temp);\n        setValues(temp);\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    getter();\n  }, [search]);\n\n  const userTable = () => {\n    return (\n      <div>\n        <form\n          className=\"mb-2\"\n          onSubmit={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <input\n            className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n            placeholder=\"Search Customers\"\n            onChange={(e) => {\n              setSearch(e.target.value);\n            }}\n          />\n        </form>\n        <TableContainer className=\" max-h-64 overflow-scroll\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Name</TableCell>\n                <TableCell>Email</TableCell>\n                {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {values.map((user, i) => (\n                <TableRow\n                  key={i}\n                  className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                  onClick={() => {\n                    console.log(user);\n                    setEmployee(user);\n\n                    setIsModalOpen(false);\n                    //   nextModal(true)\n                  }}\n                >\n                  <TableCell>\n                    <div>\n                      <div>\n                        <p className=\"font-semibold\">{user.employeeName}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <div>\n                        <p className=\"font-semibold\">{user.email}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n          </TableFooter>\n        </TableContainer>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen}>\n        <ModalHeader>Select Employee</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}