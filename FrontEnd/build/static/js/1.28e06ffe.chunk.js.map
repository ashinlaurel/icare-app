{"version":3,"sources":["components/Modal/UnitListModal.js","migration/migration.js"],"names":["UnitListModal","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","isOpen","onClose","className","selectedIndex","onSelect","ind","onSubmit","placeholder","onChange","map","i","key","onClick","type","handleMigration","NewAssetData","doc","asset","business","ponumber","podate","contractfrom","Date","contractto","billingfrom","billingto","amcrate","parseInt","gstperc","gstamount","netamount","producttype","servicelocation","product","brand","model","serialno","os","cpu","ram","hdd","smps","fan","motherboard","motherboardname","motherboard1","motherboardsno","motherboard1sno","opticaldrive","opticaldrivename","opticaldrive1","opticaldrivesno","opticaldrive1sno","keyboard","keyboardname","kbd1","keyboardsno","kbd1sno","mouse","mousename","mouse1","mousesno","mouse1sno","monitor","monitorname","monitor1","monitorsno","monitor1sno","gcard","gcardname","gcard1","gcardsno","gcard1sno","enetcard","enetcardname","enetcard1","enetcardsno","enetcard1sno","serialcard","serialcardname","serialcard1","serialcardsno","serialcard1sno","parallelcard","parallelcardname","parallelcard1","parallelcardsno","parallelcard1sno","hbacard","hbacardname","hbacard1","hbacardsno","hbacard1sno","raidcontroller","raidcontrollername","raidcontroller1","raidcontrollersno","raidcontroller1sno","tapecontroller","tapecontrollername","tapecontroller1","tapecontrollersno","tapecontroller1sno","others","othersname","others1","otherssno","others1sno","cpu1sno","temp","cpuname","cpu1","cpusno","push","cpu2sno","cpu2","cpu3sno","cpu3","cpu4sno","cpu4","ram1sno","ramname","ram1","ramsno","ram2sno","ram2","ram3sno","ram3","ram4sno","ram4","hdd1sno","hddname","hdd1","hddsno","hdd2sno","hdd2","hdd3sno","hdd3","hdd4sno","hdd4","smps1sno","smpsname","smps1","smpssno","smps2sno","smps2","smps3sno","smps3","smps4sno","smps4","fan1sno","fanname","fan1","fansno","fan2sno","fan2","fan3sno","fan3","fan4sno","fan4","customerid","accountid","unitid","unitId"],"mappings":"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","file":"static/js/1.28e06ffe.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import AssetData from \"./assetdata.json\";\nimport NewAssetData from \"./newassetdata.json\";\n\nimport axios from \"axios\";\nimport { API } from \"../backendapi\";\n\nexport const handleMigration = async () => {\n  console.log(\"migrating!!!!!!!!!!\");\n  // AssetData.Asset.map(async (doc) => {\n  NewAssetData.map(\n    async (doc, i) => {\n      // console.log(doc);\n\n      let payload = {\n        asset: {\n          business: doc.business,\n          ponumber: doc.ponumber,\n          podate: doc.podate,\n          contractfrom: new Date(doc.contractfrom),\n          contractto: new Date(doc.contractto),\n          billingfrom: new Date(doc.billingfrom),\n          billingto: new Date(doc.billingto),\n          amcrate: parseInt(doc.amcrate),\n          gstperc: parseInt(doc.gstperc),\n          gstamount: parseInt(doc.gstamount),\n          netamount: parseInt(doc.netamount),\n          customerName: doc.customerName,\n          accountName: doc.accountName,\n          unitName: doc.unitName,\n          producttype: doc.producttype,\n          servicelocation: doc.servicelocation,\n        },\n        product: {\n          brand: doc.brand,\n          model: doc.model,\n          serialno: doc.serialno,\n          os: doc.os,\n          cpu: [\n            // { cpuname: doc.cpu1, cpusno: doc.cpu1sno },\n            // { cpuname: doc.cpu2, cpusno: doc.cpu2sno },\n            // { cpuname: doc.cpu3, cpusno: doc.cpu3sno },\n            // { cpuname: doc.cpu4, cpusno: doc.cpu4sno },\n          ],\n          // ram: ram,\n          ram: [\n            // { ramname: doc.ram1, ramsno: doc.ram1sno },\n            // { ramname: doc.ram2, ramsno: doc.ram2sno },\n            // { ramname: doc.ram3, ramsno: doc.ram3sno },\n            // { ramname: doc.ram4, ramsno: doc.ram4sno },\n          ],\n          // hdd: hdd,\n          hdd: [\n            // { hddname: doc.hdd1, hddsno: doc.hdd1sno },\n            // { hddname: doc.hdd2, hddsno: doc.hdd2sno },\n            // { hddname: doc.hdd3, hddsno: doc.hdd3sno },\n            // { hddname: doc.hdd4, hddsno: doc.hdd4sno },\n          ],\n          // smps: smps,\n          smps: [\n            // { smpsname: doc.smps1, smpssno: doc.smps1sno },\n            // { smpsname: doc.smps2, smpssno: doc.smps2sno },\n            // { smpsname: doc.smps3, smpssno: doc.smps3sno },\n            // { smpsname: doc.smps4, smpssno: doc.smps4sno },\n          ],\n          // fan: fan,\n          fan: [\n            // { fanname: doc.fan1, fansno: doc.fan1sno },\n            // { fanname: doc.fan2, fansno: doc.fan2sno },\n            // { fanname: doc.fan3, fansno: doc.fan3sno },\n            // { fanname: doc.fan4, fansno: doc.fan4sno },\n          ],\n          // motherboard: motherboard,\n          motherboard: [\n            {\n              motherboardname: doc.motherboard1,\n              motherboardsno: doc.motherboard1sno,\n            },\n          ],\n          // opticaldrive: opticaldrive,\n          opticaldrive: [\n            {\n              opticaldrivename: doc.opticaldrive1,\n              opticaldrivesno: doc.opticaldrive1sno,\n            },\n          ],\n          // keyboard: kbd,\n          keyboard: [{ keyboardname: doc.kbd1, keyboardsno: doc.kbd1sno }],\n          // mouse: mouse,\n          mouse: [{ mousename: doc.mouse1, mousesno: doc.mouse1sno }],\n          // monitor: monitor,\n          monitor: [{ monitorname: doc.monitor1, monitorsno: doc.monitor1sno }],\n          // gcard: gcard,\n          gcard: [{ gcardname: doc.gcard1, gcardsno: doc.gcard1sno }],\n          // enetcard: enetcard,\n          enetcard: [\n            { enetcardname: doc.enetcard1, enetcardsno: doc.enetcard1sno },\n          ],\n          // serialcard: serialcard,\n          serialcard: [\n            {\n              serialcardname: doc.serialcard1,\n              serialcardsno: doc.serialcard1sno,\n            },\n          ],\n          // parallelcard: parallelcard,\n          parallelcard: [\n            {\n              parallelcardname: doc.parallelcard1,\n              parallelcardsno: doc.parallelcard1sno,\n            },\n          ],\n          // hbacard: hbacard,\n          hbacard: [{ hbacardname: doc.hbacard1, hbacardsno: doc.hbacard1sno }],\n          // raidcontroller: raidcontroller,\n          raidcontroller: [\n            {\n              raidcontrollername: doc.raidcontroller1,\n              raidcontrollersno: doc.raidcontroller1sno,\n            },\n          ],\n          // tapecontroller: tapecontroller,\n          tapecontroller: [\n            {\n              tapecontrollername: doc.tapecontroller1,\n              tapecontrollersno: doc.tapecontroller1sno,\n            },\n          ],\n          // others: others,\n          others: [\n            {\n              othersname: doc.others1,\n              otherssno: doc.others1sno,\n            },\n          ],\n        },\n      };\n      // ----  multiitem addition into respective arrays\n      // ---cpu insertions------\n      if (doc.cpu1sno != \"\") {\n        let temp = { cpuname: doc.cpu1, cpusno: doc.cpu1sno };\n        payload.product.cpu.push(temp);\n      }\n      if (doc.cpu2sno != \"\") {\n        let temp = { cpuname: doc.cpu2, cpusno: doc.cpu2sno };\n        payload.product.cpu.push(temp);\n      }\n      if (doc.cpu3sno != \"\") {\n        let temp = { cpuname: doc.cpu3, cpusno: doc.cpu3sno };\n        payload.product.cpu.push(temp);\n      }\n      if (doc.cpu4sno != \"\") {\n        let temp = { cpuname: doc.cpu4, cpusno: doc.cpu4sno };\n        payload.product.cpu.push(temp);\n      }\n\n      // ---ram insertions------\n\n      if (doc.ram1sno != \"\") {\n        let temp = { ramname: doc.ram1, ramsno: doc.ram1sno };\n        payload.product.ram.push(temp);\n      }\n      if (doc.ram2sno != \"\") {\n        let temp = { ramname: doc.ram2, ramsno: doc.ram2sno };\n        payload.product.ram.push(temp);\n      }\n      if (doc.ram3sno != \"\") {\n        let temp = { ramname: doc.ram3, ramsno: doc.ram3sno };\n        payload.product.ram.push(temp);\n      }\n      if (doc.ram4sno != \"\") {\n        let temp = { ramname: doc.ram4, ramsno: doc.ram4sno };\n        payload.product.ram.push(temp);\n      }\n\n      //  HDD INSERTIONS\n      if (doc.hdd1sno != \"\") {\n        let temp = { hddname: doc.hdd1, hddsno: doc.hdd1sno };\n        payload.product.hdd.push(temp);\n      }\n      if (doc.hdd2sno != \"\") {\n        let temp = { hddname: doc.hdd2, hddsno: doc.hdd2sno };\n        payload.product.hdd.push(temp);\n      }\n      if (doc.hdd3sno != \"\") {\n        let temp = { hddname: doc.hdd3, hddsno: doc.hdd3sno };\n        payload.product.hdd.push(temp);\n      }\n      if (doc.hdd4sno != \"\") {\n        let temp = { hddname: doc.hdd4, hddsno: doc.hdd4sno };\n        payload.product.hdd.push(temp);\n      }\n      // SMPS INSERTIONS\n\n      if (doc.smps1sno != \"\") {\n        let temp = { smpsname: doc.smps1, smpssno: doc.smps1sno };\n        payload.product.smps.push(temp);\n      }\n      if (doc.smps2sno != \"\") {\n        let temp = { smpsname: doc.smps2, smpssno: doc.smps2sno };\n        payload.product.smps.push(temp);\n      }\n      if (doc.smps3sno != \"\") {\n        let temp = { smpsname: doc.smps3, smpssno: doc.smps3sno };\n        payload.product.smps.push(temp);\n      }\n      if (doc.smps4sno != \"\") {\n        let temp = { smpsname: doc.smps4, smpssno: doc.smps4sno };\n        payload.product.smps.push(temp);\n      }\n\n      // FANNAME\n\n      if (doc.fan1sno != \"\") {\n        let temp = { fanname: doc.fan1, fansno: doc.fan1sno };\n        payload.product.fan.push(temp);\n      }\n      if (doc.fan2sno != \"\") {\n        let temp = { fanname: doc.fan2, fansno: doc.fan2sno };\n        payload.product.fan.push(temp);\n      }\n      if (doc.fan3sno != \"\") {\n        let temp = { fanname: doc.fan3, fansno: doc.fan3sno };\n        payload.product.fan.push(temp);\n      }\n      if (doc.fan4sno != \"\") {\n        let temp = { fanname: doc.fan4, fansno: doc.fan4sno };\n        payload.product.fan.push(temp);\n      }\n\n      // -----------------------\n\n      try {\n        let customerid = await axios({\n          url: `${API}/customer/getCustomerByName`,\n          method: \"POST\",\n          data: { name: doc.customerName },\n        });\n        // console.log(customerid.data);\n        payload.asset.customerId = customerid.data;\n        // AccountId Get\n        let accountid = await axios({\n          url: `${API}/customer/getCustomerByName`,\n          method: \"POST\",\n          data: { name: doc.accountName },\n        });\n        // console.log(customerid.data);\n        payload.asset.accountId = accountid.data;\n        // Units Get\n        let unitid = await axios({\n          url: `${API}/unit/getUnitByName`,\n          method: \"POST\",\n          data: { name: doc.unitName },\n        });\n        // console.log(customerid.data);\n        payload.asset.unitId = unitid.data;\n\n        let finish = await axios({\n          url: `${API}/asset/create`,\n          method: \"POST\",\n          data: payload,\n        });\n\n        console.log(payload);\n      } catch (error) {\n        console.log(\n          \"Error -> \",\n          error,\n          \"At->\",\n          payload.asset.brand,\n          payload.asset.model,\n          payload.asset.serialno,\n          \"At index=\",\n          i\n        );\n        // throw error;\n        // process.exit(1)\n      }\n    }\n    // throw error;\n  );\n  //   console.log(\"Hello\");\n  //   console.log();\n\n  //   };\n  // console.log(\"Hello\");\n};\n"],"sourceRoot":""}