{"version":3,"sources":["pages/Assets/MultiAssetUpdate.js","components/Modal/UnitListModal.js"],"names":["MultiAssetUpdate","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","isOpen","setIsOpen","isOpenTwo","setIsOpenTwo","isModalOpen","setIsModalOpen","successModal","setSuccessModal","refresh","setRefresh","disabler","setDisabler","Business","setBusiness","product","setProduct","_id","unitName","unit","setUnit","customerName","customer","setCustomer","accountName","account","setAccount","setSelectedProd","searchtype","setSearchType","searchlabel","setSearchLabel","searchquery","setSearchQuery","totalResults","setTotalResults","isDwnldModalOpen","setIsDwnldModalOpen","selectedassets","setSelectedAssets","selectedids","setSelectedIds","contractenable","setContractEnable","billingenable","setBillingEnable","ContractFrom","setContractFrom","ContractTo","setContractTo","BillingFrom","setBillingFrom","BillingTo","setBillingTo","onPageChange","p","useEffect","useMemo","a","console","log","payload","pages","limit","filters","business","producttype","unitId","customerId","accountId","axios","url","API","Emp","getId","method","response","out","total","handleUpdate","length","alert","onClose","className","layout","onClick","type","checked","onChange","disabled","value","e","target","name","map","user","i","key","serialno","moment","contractfrom","format","contractto","ponumber","podate","tempassets","tempids","splice","size","aria-label","aria-hidden","resultsPerPage","label","class","xmlns","viewBox","d","selected","aria-haspopup","onSubmit","preventDefault","placeholder","filter","unshift","UnitListModal","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","Axios","post","accs","pickAccount","u","pickUnit","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/51.ea842eee.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n\nimport {\n  MenuIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n  CloseIcon,\n} from \"../../icons\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Label,\n  Input,\n} from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  Button,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nfunction MultiAssetUpdate() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [successModal, setSuccessModal] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // asset history\n  const [assethistory, setAssetHistory] = useState([]);\n  const [assethistoryModalOpen, setAssetHistoryModalOpen] = useState(false);\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  //download\n  const [isDwnldModalOpen, setIsDwnldModalOpen] = useState(false);\n\n  //selected array\n  const [selectedassets, setSelectedAssets] = useState([]);\n  const [selectedids, setSelectedIds] = useState([]);\n\n  // edit type enable\n  const [contractenable, setContractEnable] = useState(false);\n  const [billingenable, setBillingEnable] = useState(false);\n\n  // final dates\n  const [ContractFrom, setContractFrom] = useState(\"\");\n  const [ContractTo, setContractTo] = useState(\"\");\n  const [BillingFrom, setBillingFrom] = useState(\"\");\n  const [BillingTo, setBillingTo] = useState(\"\");\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Multi Asset Update\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useMemo(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          business: Business,\n          producttype: product,\n          customer: customer,\n          account: account,\n          unitId: unit._id,\n          customerId: customer._id,\n          accountId: account._id,\n          searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/asset/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        await setTotalResults(response.data.total);\n\n        console.log(\"response total\", response.data.total);\n\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n        // if (searchquery != \"\") {\n        //   setPage(1);\n        // }\n      } catch (error) {\n        throw error;\n      }\n\n      console.log(\"totalResults\", totalResults);\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  const handleUpdate = async () => {\n    console.log(selectedids);\n    if (selectedids.length == 0) {\n      alert(\"No inventory selected\");\n      return;\n    } else if (!billingenable && !contractenable) {\n      await setIsDwnldModalOpen(false);\n      alert(\"No Update Type Enabled\");\n      return;\n    }\n\n    let payload = {\n      selectedids: selectedids,\n      billingenable: billingenable,\n      contractenable: contractenable,\n      ContractFrom: ContractFrom,\n      ContractTo: ContractTo,\n      BillingFrom: BillingFrom,\n      BillingTo: BillingTo,\n    };\n    // console.log(\"payload\", payload);\n\n    try {\n      let response = await axios({\n        url: `${API}/asset/${Emp.getId()}/multiAssetUpdate`,\n        method: \"POST\",\n        data: payload,\n      });\n\n      setSelectedAssets([]);\n      setSelectedIds([]);\n      setSuccessModal(true);\n      setContractEnable(false);\n      setBillingEnable(false);\n      setContractFrom(\"\");\n      setContractTo(\"\");\n      setBillingFrom(\"\");\n      setBillingTo(\"\");\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const UpdateModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isDwnldModalOpen}\n          onClose={() => setIsDwnldModalOpen(false)}\n          className=\" dark:bg-gray-800 p-5  mx-10  bg-gray-50 text-gray-900 dark:text-white text-center  rounded-lg \"\n        >\n          <ModalHeader className=\" w-87\">\n            <div className=\"text-lg\">\n              Are you sure you want to update all the selected inventory ?\n            </div>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\" space-x-1\">\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  setIsDwnldModalOpen(false);\n                  handleUpdate();\n                }}\n              >\n                Yes\n              </Button>\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  setIsDwnldModalOpen(false);\n                  //   handleUpdate();\n                }}\n              >\n                No\n              </Button>\n            </div>\n          </ModalBody>\n          {/* <ModalFooter></ModalFooter> */}\n        </Modal>\n      </>\n    );\n  };\n\n  const SucessModal = () => {\n    return (\n      <>\n        <Modal isOpen={successModal} onClose={() => setSuccessModal(true)}>\n          <ModalHeader>\"Inventory Updated Successfully\"</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setSuccessModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n  return (\n    <>\n      {/* ---------------------Modals----------------------------------------- */}\n      <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      />\n      {UpdateModal()}\n      {SucessModal()}\n\n      <div className=\"mb-64 mt-4\">\n        <div className=\"flex flex-row mb-2\">\n          <div className=\"w-3/4 text-lg font-semibold dark:text-white\">\n            Type Of Update\n          </div>\n          <div className=\"w-1/4 flex justify-end \">\n            <Button\n              onClick={() => {\n                // handleUpdate();\n                setIsDwnldModalOpen(true);\n              }}\n            >\n              Update All\n            </Button>\n          </div>\n        </div>\n\n        <hr className=\"my-2\"></hr>\n\n        <div className=\"flex flex-row\">\n          <div className=\"w-full my-3 \">\n            <span className=\" text-sm font-semibold dark:text-white\">\n              Enable Contract:{\" \"}\n            </span>\n            <Input\n              className=\"mx-2 w-5 h-5\"\n              type=\"checkbox\"\n              checked={contractenable}\n              onChange={() => {\n                setContractEnable(!contractenable);\n              }}\n            />\n            <hr className=\"mt-2\"></hr>\n          </div>\n          <div className=\"w-full my-3 ml-8\">\n            <span className=\" text-sm font-semibold dark:text-white\">\n              Enable Billing:{\" \"}\n            </span>\n            <Input\n              className=\"mx-2 w-5 h-5\"\n              type=\"checkbox\"\n              checked={billingenable}\n              onChange={() => {\n                setBillingEnable(!billingenable);\n              }}\n            />\n            <hr className=\"mt-2\"></hr>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row  items-center justify-start lg:space-x-8\">\n          <Label className=\"w-full \">\n            <span>Contract From</span>\n            <Input\n              className=\"mt-1\"\n              type=\"date\"\n              disabled={!contractenable}\n              value={ContractFrom}\n              onChange={(e) => {\n                setContractFrom(e.target.value);\n              }}\n            />\n          </Label>\n\n          <Label className=\"w-full\">\n            <span>Contract To</span>\n            <Input\n              disabled={!contractenable}\n              className=\"mt-1\"\n              type=\"date\"\n              value={ContractTo}\n              onChange={(e) => {\n                setContractTo(e.target.value);\n              }}\n            />\n          </Label>\n          <Label className=\"w-full my-3\">\n            <span>Billing From</span>\n            <Input\n              className=\"mt-1\"\n              type=\"date\"\n              disabled={!billingenable}\n              value={BillingFrom}\n              onChange={(e) => {\n                setBillingFrom(e.target.value);\n              }}\n            />\n          </Label>\n          <Label className=\"w-full my-3\">\n            <span>Billing To</span>\n            <Input\n              type=\"date\"\n              className=\"mt-1\"\n              name=\"brand\"\n              disabled={!billingenable}\n              value={BillingTo}\n              onChange={(e) => {\n                setBillingTo(e.target.value);\n              }}\n            />\n          </Label>\n        </div>\n        {/* -------selected assets table----------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Customer</TableCell>\n                <TableCell>Unit</TableCell>\n                <TableCell>Business</TableCell>\n                <TableCell>Product</TableCell>\n                <TableCell>Product Serial</TableCell>\n                <TableCell>Contract From</TableCell>\n                <TableCell>Contract To</TableCell>\n                <TableCell>Purchase Number</TableCell>\n                <TableCell>Purchase Date</TableCell>\n                <TableCell>Remove</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {selectedassets.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    // setBBarOpen(1);\n                    setActiveRowId(user._id);\n                    // console.log(\"the id is \" + user._id);\n                    setSelectedProd(user);\n                    setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.customerName}</p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.business == \"AMC\" ? \"primary\" : \"success\"}\n                    >\n                      {user.business}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.producttype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.product.serialno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.contractfrom).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.contractto).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.ponumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.podate).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-4\">\n                      <Button\n                        onClick={async () => {\n                          let tempassets = [...selectedassets];\n                          let tempids = [...selectedids];\n                          await tempassets.splice(i, 1);\n                          await tempids.splice(i, 1);\n                          await setSelectedAssets(tempassets);\n                          await setSelectedIds(tempids);\n                        }}\n                        layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"Edit\"\n                      >\n                        <CloseIcon className=\"w-6 h-6\" aria-hidden=\"true\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={selectedassets.length}\n              resultsPerPage={10}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        <div className=\" text-lg font-semibold mt-4 \">Asset Picker</div>\n        <hr className=\"my-2\"></hr>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            <div class=\"relative  \">\n              <button\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                onClick={() => {\n                  setIsModalOpen(!isModalOpen);\n                }}\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                Pick Customer\n              </button>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            <div class=\"relative mx-5 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={Business}\n                onChange={(e) => {\n                  setBusiness(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Business Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"AMC\">AMC</option>\n                <option value=\"WTY\">Warranty</option>\n                <option value=\"NOS\">NOS</option>\n                <option value=\"DEAD\">DEAD</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n            {/* ---------------------------Product Drop Down-------------------------------------- */}\n            <div className=\"relative z-40 \">\n              <button\n                onClick={() => {\n                  setIsOpen(!isOpen);\n                }}\n                className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {product ? product : \"Pick Product\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"\");\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Console\");\n                  }}\n                >\n                  <span>Console</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"DMP\");\n                  }}\n                >\n                  <span>DMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Inkjet\");\n                  }}\n                >\n                  <span>Inkjet</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"KVM\");\n                  }}\n                >\n                  <span>KVM</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laptop\");\n                  }}\n                >\n                  <span>Laptop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laser\");\n                  }}\n                >\n                  <span>Laser</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"LMP\");\n                  }}\n                >\n                  <span>LMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Module\");\n                  }}\n                >\n                  <span>Module</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Router\");\n                  }}\n                >\n                  <span>Router</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Scanner\");\n                  }}\n                >\n                  <span>Scanner</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Server\");\n                  }}\n                >\n                  <span>Server</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Desktop\");\n                  }}\n                >\n                  <span>Desktop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Storage\");\n                  }}\n                >\n                  <span>Storage</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Switch\");\n                  }}\n                >\n                  <span>Switch</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"UPS\");\n                  }}\n                >\n                  <span>UPS</span>\n                </DropdownItem>\n\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Ncompute\");\n                  }}\n                >\n                  <span>Ncompute</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Others\");\n                  }}\n                >\n                  <span>Others</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n\n            {/* -------------------------------Search Type--------------------------------------- */}\n            <div className=\"relative \">\n              <button\n                onClick={() => {\n                  setIsOpenTwo(!isOpenTwo);\n                }}\n                className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {searchtype ? searchlabel : \"Pick Search Type\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpenTwo} onClose={() => setIsOpenTwo(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"\");\n                    setSearchLabel(\"\");\n                    setDisabler(true);\n                    setSearchQuery(\"\");\n                    setRefresh(!refresh);\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"prodserial\");\n                    setSearchLabel(\"Product Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Product Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"keyboardsno\");\n                    setSearchLabel(\"Keyboard Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Keyboard Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"mousesno\");\n                    setSearchLabel(\"Mouse Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Mouse Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"motherboardsno\");\n                    setSearchLabel(\"Motherboard Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Motherboard Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"monitorsno\");\n                    setSearchLabel(\"Monitor Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Monitor Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"hddsno\");\n                    setSearchLabel(\"HDD Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>HDD Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"cpusno\");\n                    setSearchLabel(\"CPU Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>CPU Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"ramsno\");\n                    setSearchLabel(\"Ram Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>RAM Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"smpssno\");\n                    setSearchLabel(\"SMPS Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>SMPS Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"fansno\");\n                    setSearchLabel(\"Fan Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Fan Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"opticaldrivesno\");\n                    setSearchLabel(\"Optical Drive Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Optical Drive Serial</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  // setPage(1);\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  disabled={disabler}\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Customer</TableCell>\n                <TableCell>Unit</TableCell>\n                <TableCell>Business</TableCell>\n                <TableCell>Product</TableCell>\n                <TableCell>Product Serial</TableCell>\n                <TableCell>Contract From</TableCell>\n                <TableCell>Contract To</TableCell>\n                <TableCell>Purchase Number</TableCell>\n                <TableCell>Purchase Date</TableCell>\n                <TableCell>Add</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data\n                .filter((user) => {\n                  for (let i = 0; i < selectedids.length; i++) {\n                    if (user._id == selectedids[i]) return 0;\n                  }\n                  return 1;\n                })\n                .map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      //   setBBarOpen(1);\n                      setActiveRowId(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      setSelectedProd(user);\n                      setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                        <div>\n                          <p className=\"font-semibold\">{user.customerName}</p>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {user.accountName}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.unitName}</span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        type={user.business == \"AMC\" ? \"primary\" : \"success\"}\n                      >\n                        {user.business}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.producttype}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.product.serialno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.contractfrom).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.contractto).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.ponumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.podate).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-4\">\n                        <Button\n                          onClick={async () => {\n                            let tempassets = [...selectedassets];\n                            let tempids = [...selectedids];\n                            await tempassets.unshift(user);\n                            await tempids.unshift(user._id);\n                            await setSelectedAssets(tempassets);\n                            await setSelectedIds(tempids);\n                          }}\n                          layout=\"link\"\n                          size=\"icon\"\n                          aria-label=\"Edit\"\n                        >\n                          <TickIcon className=\"w-6 h-6\" aria-hidden=\"true\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default MultiAssetUpdate;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}