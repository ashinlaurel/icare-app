{"version":3,"sources":["pages/Calls/UpdatCall.js","helpers/toolfuctions/toolfunctions.js"],"names":["UpdateCall","movehistory","useHistory","params","useParams","useContext","TopBarContext","setTopHeading","topheading","id","assetid","callid","useState","submitModal","setSubmitModal","sparemodal","setSpareModal","historyModalOpen","setHistoryModalOpen","assethistoryModalOpen","setAssetHistoryModalOpen","notswapModalOpen","setNotSwapModalOpen","spareStatus","setSpareStatus","ccfrStatus","setCcfrStatus","_id","unitName","unit","setUnit","customerName","customer","setCustomer","accountName","account","setAccount","productID","setProductID","brand","setBrand","model","setModel","serialno","setSerialNo","os","setOs","cpuname","cpusno","cpu","setCpu","ramname","ramsno","ram","setram","hddname","hddsno","hdd","sethdd","smpsname","smpssno","smps","setsmps","fanname","fansno","fan","setfan","motherboardname","motherboardsno","motherboard","setmotherboard","opticaldrivename","opticaldrivesno","opticaldrive","setopticaldrive","keyboardname","keyboardsno","kbd","setkbd","mousename","mousesno","mouse","setmouse","monitorname","monitorsno","monitor","setmonitor","gcardname","gcardsno","gcard","setgcard","enetcardname","enetcardsno","enetcard","setenetcard","serialcardname","serialcardsno","serialcard","setserialcard","parallelcardname","parallelcardsno","parallelcard","setparallelcard","hbacardname","hbacardsno","sethbacard","raidcontrollername","raidcontrollersno","setraidcontroller","tapecontrollername","tapecontrollersno","settapecontroller","othersname","otherssno","others","setothers","Business","setBusiness","servicelocation","setServiceLocation","POnumber","setPOnumber","setPOdate","setContractFrom","setContractTo","setBillingFrom","setBillingTo","setAMCRate","setGSTAMOUNT","setNetAmount","assethistory","setAssetHistory","product","setProduct","activeRowID","setActiveRowID","secondactiveRowID","setSecondactiveRowID","itemtype","setItemtype","selectedItem","setSelectedItem","data","setData","inventdata","setInventData","name","sno","existswap","setExistswap","inventswap","setInventswap","isImgUploadModal","setIsImgUploadModal","imageUploadMessage","setImageUploadMessage","isImgUploadMenuModal","setIsImgUploadMenuModal","imgUrl","setImgUrl","imgFile","setImgFile","imageUploadMenuMessage","setImageUploadMenuMessage","goodSpareImgUrl","setGoodSpareImgUrl","defectiveImgUrl","setDefectiveImgUrl","ccfrImgUrl","setCcfrImgUrl","isHistoryImgViewModal","setIsHistoryImgViewModal","goodSpareHistoryImg","setGoodSpareHistoryImg","defectiveHistoryImg","setDefectiveHistoryImg","ccfrHistoryImg","setCcfrHistoryImg","photoUpload","photo","cb","console","log","FormData","append","axios","post","API","headers","accept","_boundary","then","response","status","error","code","fileName","location","catch","useEffect","Date","page","searchtype","searchquery","callAttendDate","setCallAttendDate","startOfService","setStartOfService","endOfService","setEndOfService","actionTaken","setActionTaken","a","payload","pages","limit","filters","type","toLowerCase","condition","url","Emp","getId","method","out","temp","thetype","theitemandsystem","map","item","i","systype","thegetter","getAsset","res","asset","history","producttype","customerId","accountId","business","ponumber","amcrate","moment","podate","format","contractfrom","contractto","billingfrom","billingto","gstamount","netamount","length","keyboard","netcardname","hbacard","raidcontroller","tapecontroller","call","setCall","getCall","handleUpdate","alert","tempcallstatus","callStatus","newcallhistory","date","engineer","employeeName","note","existserial","newserial","update","$push","assetpayload","push","handleSwap","newswap","assetserial","existUrl","newUrl","payloadtwo","isOpen","setIsOpen","InvTable","items","className","user","key","onClick","layout","onClose","callNo","entry","capitalize","HistoryModal","AssetHistoryModal","src","width","height","onChange","e","callback","target","files","photoUploadHandler","message","contactPerson","state","pincode","locationType","district","problem","value","disabled","assignedDate","assignedETA","class","selected","xmlns","viewBox","d","aria-label","aria-haspopup","size","aria-hidden","exports","s","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/52.cd0ffa96.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { API } from \"../../backendapi\";\nimport AsyncSelect from \"react-select/async\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Select,\n  Textarea,\n  Button,\n  Dropdown,\n  DropdownItem,\n  Badge,\n} from \"@windmill/react-ui\";\n\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport { DropdownIcon } from \"../../icons\";\nimport { useMemo } from \"react\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n\nfunction UpdateCall() {\n  // floatbox\n  let movehistory = useHistory();\n  const params = useParams();\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const id = params.assetid;\n  const callid = params.callid;\n  // console.log(id);\n  //modal\n  const [submitModal, setSubmitModal] = useState(false);\n  const [sparemodal, setSpareModal] = useState(false);\n  const [historyModalOpen, setHistoryModalOpen] = useState(false);\n  const [assethistoryModalOpen, setAssetHistoryModalOpen] = useState(false);\n  const [notswapModalOpen, setNotSwapModalOpen] = useState(false);\n  const [spareStatus, setSpareStatus] = useState(\"\");\n  const [ccfrStatus, setCcfrStatus] = useState(\"\");\n\n  //customer\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  //prodcut\n  const [productID, setProductID] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [serialno, setSerialNo] = useState(\"\");\n  const [os, setOs] = useState(\"\");\n  const [cpu, setCpu] = useState([{ cpuname: \"\", cpusno: \"\" }]);\n  const [ram, setram] = useState([{ ramname: \"\", ramsno: \"\" }]);\n  const [hdd, sethdd] = useState([{ hddname: \"\", hddsno: \"\" }]);\n  const [smps, setsmps] = useState([{ smpsname: \"\", smpssno: \"\" }]);\n  const [fan, setfan] = useState([{ fanname: \"\", fansno: \"\" }]);\n  const [motherboard, setmotherboard] = useState([\n    { motherboardname: \"\", motherboardsno: \"\" },\n  ]);\n  const [opticaldrive, setopticaldrive] = useState([\n    { opticaldrivename: \"\", opticaldrivesno: \"\" },\n  ]);\n  const [kbd, setkbd] = useState([{ keyboardname: \"\", keyboardsno: \"\" }]);\n  const [mouse, setmouse] = useState([{ mousename: \"\", mousesno: \"\" }]);\n  const [monitor, setmonitor] = useState([{ monitorname: \"\", monitorsno: \"\" }]);\n  const [gcard, setgcard] = useState([{ gcardname: \"\", gcardsno: \"\" }]);\n  const [enetcard, setenetcard] = useState([\n    { enetcardname: \"\", enetcardsno: \"\" },\n  ]);\n  const [serialcard, setserialcard] = useState([\n    { serialcardname: \"\", serialcardsno: \"\" },\n  ]);\n  const [parallelcard, setparallelcard] = useState([\n    { parallelcardname: \"\", parallelcardsno: \"\" },\n  ]);\n  const [hbacard, sethbacard] = useState([{ hbacardname: \"\", hbacardsno: \"\" }]);\n  const [raidcontroller, setraidcontroller] = useState([\n    { raidcontrollername: \"\", raidcontrollersno: \"\" },\n  ]);\n  const [tapecontroller, settapecontroller] = useState([\n    { tapecontrollername: \"\", tapecontrollersno: \"\" },\n  ]);\n  const [others, setothers] = useState([{ othersname: \"\", otherssno: \"\" }]);\n  //asset\n\n  const [Business, setBusiness] = useState(\"\");\n  const [servicelocation, setServiceLocation] = useState(\"\");\n  const [POnumber, setPOnumber] = useState(\"\");\n  const [POdate, setPOdate] = useState(\"\");\n  const [ContractFrom, setContractFrom] = useState(\"\");\n  const [ContractTo, setContractTo] = useState(\"\");\n  const [BillingFrom, setBillingFrom] = useState(\"\");\n  const [BillingTo, setBillingTo] = useState(\"\");\n  const [AMCRate, setAMCRate] = useState(\"\");\n  const [GST, setGST] = useState(\"\");\n  const [GSTAMOUNT, setGSTAMOUNT] = useState(\"\");\n  const [NetAmount, setNetAmount] = useState(\"\");\n  const [assethistory, setAssetHistory] = useState([]);\n\n  //////////////-------------------------------------------->Product name not in asset\n  const [product, setProduct] = useState(\"Server\");\n\n  ////////////---------------- INVENTORY state\n  const [inventory, setInventory] = useState([]);\n\n  //MODAL\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // table variable styles\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n  const [secondactiveRowID, setSecondactiveRowID] = useState(-1);\n\n  // ---------------New States------------\n  const [itemtype, setItemtype] = useState(\"\"); //Full system vs item\n  const [selectedItem, setSelectedItem] = useState(\"\"); //the selected item category\n  const [data, setData] = useState([]); //for first table expansion\n  const [inventdata, setInventData] = useState([]); //for second table expansion\n  const [existswap, setExistswap] = useState([\n    {\n      name: \"Not Selected\",\n      sno: \"Not Selected\",\n    },\n  ]);\n  const [inventswap, setInventswap] = useState([\n    {\n      name: \"Not Selected\",\n      sno: \"Not Selected\",\n    },\n  ]);\n\n  // Image states -----------------------------------------------------------------\n  const [isImgUploadModal, setIsImgUploadModal] = useState(false);\n  const [imageUploadMessage, setImageUploadMessage] = useState(\"\");\n  const [isImgUploadMenuModal, setIsImgUploadMenuModal] = useState(false);\n  const [imgUrl, setImgUrl] = useState(\"\");\n  const [imgFile, setImgFile] = useState(null);\n  const [imageUploadMenuMessage, setImageUploadMenuMessage] = useState(\"\");\n\n  const [goodSpareImgUrl, setGoodSpareImgUrl] = useState(\"\");\n  const [defectiveImgUrl, setDefectiveImgUrl] = useState(\"\");\n  const [ccfrImgUrl, setCcfrImgUrl] = useState(\"\");\n\n  const [isHistoryImgViewModal, setIsHistoryImgViewModal] = useState(false);\n  const [goodSpareHistoryImg, setGoodSpareHistoryImg] = useState(\"\");\n  const [defectiveHistoryImg, setDefectiveHistoryImg] = useState(\"\");\n  const [ccfrHistoryImg, setCcfrHistoryImg] = useState(\"\");\n\n  const photoUploadHandler = (e, callback) => {\n    callback(e.target.files[0]);\n  };\n\n  const photoUpload = (photo, cb) => {\n    console.log(photo);\n    if (photo == null) {\n      setImageUploadMessage(\"Image not selected\");\n      setIsImgUploadModal(true);\n      return;\n    }\n    setImageUploadMessage(\"Loading...\");\n    setIsImgUploadModal(true);\n\n    const data = new FormData(); // If file selected\n    data.append(\"imageUpload\", photo, photo.name);\n    // console.log(data);\n\n    axios\n      .post(`${API}/upload/img-upload`, data, {\n        headers: {\n          accept: \"application/json\",\n          \"Accept-Language\": \"en-US,en;q=0.8\",\n          \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        },\n      })\n      .then((response) => {\n        if (200 === response.status) {\n          // If file size is larger than expected.\n          if (response.data.error) {\n            if (\"LIMIT_FILE_SIZE\" === response.data.error.code) {\n              console.log(\"Max size: 2MB\", \"red\");\n              setImageUploadMessage(\"Maximum size is 2MB\");\n              setIsImgUploadModal(true);\n            } else {\n              console.log(response.data); // If not the given file type\n              // console.log( response.data.error, 'red' );\n              setImageUploadMessage(\"Given format not supported\");\n            }\n          } else {\n            // Success\n            let fileName = response.data;\n            console.log(\"fileName\", fileName.location);\n            console.log(\"File Uploaded\");\n            setImageUploadMessage(\"Image Uploaded\");\n            setIsImgUploadModal(true);\n            cb(response.data.location);\n          }\n        }\n      })\n      .catch((error) => {\n        // If another error\n        setImageUploadMessage(\"Error Occured\");\n        setIsImgUploadModal(true);\n        console.log(error);\n      });\n    // } else {\n    //  // if file not selected throw error\n    //  this.ocShowAlert( 'Please upload file', 'red' );\n    // }\n  };\n\n  const ImgUploadModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isImgUploadModal}\n          onClose={() => setIsImgUploadModal(false)}\n        >\n          <ModalHeader>{imageUploadMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsImgUploadModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const handleImgUpload = (message) => {\n    if (message == \"defective\") {\n      photoUpload(imgFile, (url) => {\n        console.log(\"PHOTO URL\", url);\n        setImgUrl(url);\n        setDefectiveImgUrl(url);\n      });\n    } else if (message == \"good\") {\n      photoUpload(imgFile, (url) => {\n        console.log(\"PHOTO URL\", url);\n        setImgUrl(url);\n        setGoodSpareImgUrl(url);\n      });\n    } else if (message == \"ccfr\") {\n      photoUpload(imgFile, (url) => {\n        console.log(\"PHOTO URL\", url);\n        setImgUrl(url);\n        setCcfrImgUrl(url);\n      });\n    }\n  };\n  const ImgUploadMenuModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isImgUploadMenuModal}\n          onClose={() => {\n            setImgUrl(\"\");\n            setImgFile(null);\n            setIsImgUploadMenuModal(false);\n          }}\n        >\n          <ModalHeader>{imageUploadMenuMessage}</ModalHeader>\n          <ModalBody>\n            <>\n              <img src={imgUrl} className=\"my-2\" width=\"100\" height=\"100\" />\n              <div className=\"flex-row flex  space-x-3 mt-3 \">\n                <div className=\"flex flex-col \">\n                  <Label className=\"\">\n                    <span>Image upload</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"file\"\n                      // value={photo}\n                      onChange={(e) => photoUploadHandler(e, setImgFile)}\n                    />\n                  </Label>\n\n                  {/* <HelperText valid={false}>{err.employeeName}</HelperText> */}\n                </div>\n                <Button\n                  onClick={() => {\n                    handleImgUpload(imageUploadMenuMessage);\n                  }}\n                  layout=\"outline\"\n                  className=\"my-6    \"\n                >\n                  Upload Image\n                </Button>\n              </div>\n            </>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setImgUrl(\"\");\n                setImgFile(null);\n                setIsImgUploadMenuModal(false);\n              }}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryImgViewModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isHistoryImgViewModal}\n          onClose={() => {\n            setDefectiveHistoryImg(\"\");\n            setGoodSpareHistoryImg(\"\");\n            setCcfrHistoryImg(\"\");\n            setIsHistoryImgViewModal(false);\n          }}\n          className=\"w-8/12 dark:bg-gray-800 p-10 my-12 h-screen  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll\"\n          // className=\"w-6/12 h-8/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll text-cente items-center justify-center\"\n        >\n          <ModalHeader>Images</ModalHeader>\n          <ModalBody>\n            <div className=\"flex flex-col justify-center \">\n              {defectiveHistoryImg != \"\" ? (\n                <>\n                  <div className=\"text-lg font-semibold my-2 w-full\">\n                    {\" \"}\n                    Replaced Item\n                  </div>\n                  <img\n                    src={defectiveHistoryImg}\n                    className=\"my-2\"\n                    width=\"500\"\n                    height=\"500\"\n                  />\n                </>\n              ) : null}\n              {goodSpareHistoryImg != \"\" ? (\n                <>\n                  <div className=\"text-lg font-semibold my-2 w-full\">\n                    {\" \"}\n                    Replaced by\n                  </div>\n                  <img\n                    src={goodSpareHistoryImg}\n                    className=\"my-2\"\n                    width=\"500\"\n                    height=\"500\"\n                  />\n                </>\n              ) : null}\n              {ccfrHistoryImg != \"\" ? (\n                <>\n                  <div className=\"text-lg font-semibold my-2 w-full\"> CCFR</div>\n                  <img\n                    src={ccfrHistoryImg}\n                    className=\"my-2\"\n                    width=\"500\"\n                    height=\"500\"\n                  />\n                </>\n              ) : null}\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setDefectiveHistoryImg(\"\");\n                setGoodSpareHistoryImg(\"\");\n                setCcfrHistoryImg(\"\");\n                setIsHistoryImgViewModal(false);\n              }}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  //-----------------------------------------------------------------\n\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Update Call\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [condition, setCondition] = useState(\"\");\n  const [page, setPage] = useState(1);\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // imp states\n  const [callAttendDate, setCallAttendDate] = useState(\"\");\n  const [startOfService, setStartOfService] = useState(\"\");\n  const [endOfService, setEndOfService] = useState(\"\");\n  const [actionTaken, setActionTaken] = useState(\"\");\n\n  // use effect to add fields to the item coming from asset\n  useEffect(() => {\n    let temp = data;\n    let thetype = selectedItem.toLowerCase();\n    let theitemandsystem = itemtype.toLowerCase();\n\n    temp.map((item, i) => {\n      item.name = item[`${thetype}name`];\n      item.sno = item[`${thetype}sno`];\n      item.type = thetype;\n      item.condition = \"Bad\";\n      item.systype = theitemandsystem;\n    });\n\n    console.log(temp);\n    setData(temp);\n    return () => {\n      \"Data Updation Done\";\n    };\n  }, [data]);\n\n  // -----use effect to pull new inventory list according to filters\n  useEffect(() => {\n    thegetter();\n  }, [selectedItem]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    console.log(selectedItem);\n    let payload = {\n      pages: {\n        page: page,\n        limit: 1000000,\n      },\n      filters: {\n        type: selectedItem.toLowerCase(),\n        location: location,\n        condition: \"Good\",\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      // setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setInventData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  // History Modal\n  const HistoryModal = () => {\n    if (call.history) {\n      let data = call.history;\n      // console.log(data);\n\n      return (\n        <>\n          <Modal\n            isOpen={historyModalOpen}\n            onClose={() => setHistoryModalOpen(false)}\n            className=\"w-9/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll\"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              {/* <div>{item.name}</div> */}\n              <div>\n                Call No: <Badge>{call.callNo}</Badge>{\" \"}\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"font-semibold text-xl my-2\">Call History</div>\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody>\n                    {data.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 \n                       `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" );\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {call.callStatus == 0 ? (\n                              <Badge>Not Allocated</Badge>\n                            ) : null}\n                            {call.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {call.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {call.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {call.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {call.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {call.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {call.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {call.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {call.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {call.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {call.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"flex flex-row max-w-sm\">\n                          <span className=\"w-full overflow-auto\">\n                            {entry.note}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  // Asset History Modal\n  const AssetHistoryModal = () => {\n    if (assethistory[0]) {\n      // let data = call.history;\n      // console.log(data);\n\n      return (\n        <>\n          <Modal\n            isOpen={assethistoryModalOpen}\n            onClose={() => setAssetHistoryModalOpen(false)}\n            className=\"w-9/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll\"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              {/* <div>{item.name}</div> */}\n              <div>\n                Asset Serial: <Badge>{call.callNo}</Badge>{\" \"}\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"font-semibold text-xl my-2\">Asset History</div>\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody>\n                    {assethistory.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 \n                       `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {call.callStatus == 0 ? (\n                              <Badge>Not Allocated</Badge>\n                            ) : null}\n                            {call.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {call.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {call.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {call.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {call.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {call.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {call.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {call.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {call.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {call.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {call.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm  w-1/2\">{entry.note}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  // -----getting inventory items\n\n  const getAsset = async () => {\n    try {\n      let res = await axios.post(`${API}/asset/${Emp.getId()}/getbyid`, {\n        id: id,\n      });\n      console.log(\"asset\", res.data);\n      let asset = res.data;\n      setProductID(asset.product._id);\n      setAssetHistory(asset.product.history);\n\n      setServiceLocation(asset.servicelocation);\n      setProduct(asset.producttype);\n      setUnit({ _id: id, unitName: asset.unitName });\n      setCustomer({ _id: asset.customerId, customerName: asset.customerName });\n      setAccount({ _id: asset.accountId, accountName: asset.accountName });\n\n      ////------------------------>>>>>>>>\n      // setProduct(\"Server\");\n      ////////---------ASSET INFO\n      setBusiness(asset.business);\n      setPOnumber(asset.ponumber);\n      setAMCRate(asset.amcrate);\n      // Dates --------------------------\n      setPOdate(moment(asset.podate).format(\"YYYY-MM-DD\"));\n      setContractFrom(moment(asset.contractfrom).format(\"YYYY-MM-DD\"));\n      setContractTo(moment(asset.contractto).format(\"YYYY-MM-DD\"));\n      setBillingFrom(moment(asset.billingfrom).format(\"YYYY-MM-DD\"));\n      setBillingTo(moment(asset.billingto).format(\"YYYY-MM-DD\"));\n      ////////////------------>>>>>>>> misiing field GST(asset.gs)\n      setGSTAMOUNT(asset.gstamount);\n      setNetAmount(asset.netamount);\n      // setProduct(asset);\n      //////////////////////////////\n\n      setBrand(asset.product.brand);\n      setModel(asset.product.model);\n      setSerialNo(asset.product.serialno);\n      setOs(asset.product.os);\n      setCpu(asset.product.cpu);\n      setram(asset.product.ram);\n      if (asset.product.hdd.length == 0) sethdd([{ hddname: \"\", hddsno: \"\" }]);\n      else sethdd(asset.product.hdd);\n      if (asset.product.smps.length == 0)\n        setsmps([{ smpsname: \"\", smpssno: \"\" }]);\n      else setsmps(asset.product.smps);\n      if (asset.product.fan.length == 0) setfan([{ fanname: \"\", fansno: \"\" }]);\n      else setfan(asset.product.fan);\n      if (asset.product.motherboard.length == 0)\n        setmotherboard([{ motherboardname: \"\", motherboardsno: \"\" }]);\n      else setmotherboard(asset.product.motherboard);\n      if (asset.product.opticaldrive.length == 0)\n        setopticaldrive([{ opticaldrivename: \"\", opticaldrivesno: \"\" }]);\n      else setopticaldrive(asset.product.opticaldrive);\n      if (asset.product.keyboard.length == 0)\n        setkbd([{ keyboardname: \"\", keyboardsno: \"\" }]);\n      else setkbd(asset.product.keyboard);\n      if (asset.product.mouse.length == 0)\n        setmouse([{ mousename: \"\", mousesno: \"\" }]);\n      else setmouse(asset.product.mouse);\n      if (asset.product.monitor.length == 0)\n        setmonitor([{ monitorname: \"\", monitorsno: \"\" }]);\n      else setmonitor(asset.product.monitor);\n      if (asset.product.gcard.length == 0)\n        setgcard([{ gcardname: \"\", gcardsno: \"\" }]);\n      else setgcard(asset.product.gcard);\n      if (asset.product.enetcard.length == 0)\n        setenetcard([{ netcardname: \"\", enetcardsno: \"\" }]);\n      else setenetcard(asset.product.enetcard);\n      if (asset.product.serialcard.length == 0)\n        setserialcard([{ serialcardname: \"\", serialcardsno: \"\" }]);\n      else setserialcard(asset.product.serialcard);\n\n      if (asset.product.parallelcard.length == 0)\n        setparallelcard([{ parallelcardname: \"\", parallelcardsno: \"\" }]);\n      else setparallelcard(asset.product.parallelcard);\n\n      if (asset.product.hbacard.length == 0)\n        sethbacard([{ hbacardname: \"\", hbacardsno: \"\" }]);\n      else sethbacard(asset.product.hbacard);\n\n      if (asset.product.raidcontroller.length == 0)\n        setraidcontroller([{ raidcontrollername: \"\", raidcontrollersno: \"\" }]);\n      else setraidcontroller(asset.product.raidcontroller);\n\n      if (asset.product.tapecontroller.length == 0)\n        settapecontroller([{ tapecontrollername: \"\", tapecontrollersno: \"\" }]);\n      else settapecontroller(asset.product.tapecontroller);\n\n      if (asset.product.others.length == 0)\n        setothers([{ othersname: \"\", otherssno: \"\" }]);\n      else setothers(asset.product.others);\n    } catch (err) {\n      console.log(\"assetFind Error\", err);\n    }\n  };\n\n  ////// CALL\n\n  const [call, setCall] = useState({});\n\n  const getCall = async () => {\n    try {\n      let res = await axios.post(`${API}/call/${Emp.getId()}/getbyid`, {\n        id: callid,\n      });\n      console.log(\"call\", res.data);\n      setCall(res.data);\n    } catch (err) {\n      console.log(\"call Find Error\", err);\n    }\n  };\n\n  useEffect(() => {\n    getAsset();\n    getCall();\n  }, []);\n\n  // ------Modals------\n\n  const UpdatedModal = () => {\n    return (\n      <>\n        <Modal isOpen={submitModal} onClose={() => setSubmitModal(false)}>\n          <ModalHeader>Swap Successfull</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            {/* <Link to={`/app/viewcalls`}> */}\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setSubmitModal(false)}\n            >\n              Okay!\n            </Button>\n            {/* </Link> */}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const NotSwapModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={notswapModalOpen}\n          onClose={() => setNotSwapModalOpen(false)}\n        >\n          <ModalHeader>Inventory Process Pending</ModalHeader>\n          <ModalBody>\n            Please finish add/remove/swap of items before updating call.\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setNotSwapModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const SpareRequiredModal = () => {\n    return (\n      <>\n        <Modal isOpen={sparemodal}>\n          <ModalHeader>Spare Usage</ModalHeader>\n          <ModalBody> Was any spare used in this call ?</ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                // setCall({ ...call, spareUsed: \"Yes\" });\n                setSpareStatus(\"Yes\");\n                setSpareModal(false);\n              }}\n            >\n              Yes\n            </Button>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                // setCall({ ...call, spareUsed: \"No\" });\n                setSpareStatus(\"No\");\n                setSpareModal(false);\n              }}\n            >\n              No\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // --------------------  Functions ---------------------------\n\n  const handleUpdate = async () => {\n    if (spareStatus == \"Yes\") {\n      setNotSwapModalOpen(true);\n      return;\n    }\n    if (callAttendDate == \"\" || startOfService == \"\" || actionTaken == \"\") {\n      // setNotSwapModalOpen(true);\n      alert(\"Please enter the compulsory fields\");\n      return;\n    }\n\n    let tempcallstatus = \"\";\n\n    if (call.callStatus == 0) {\n      tempcallstatus = \"Not Allocated\";\n    }\n    if (call.callStatus == 1) {\n      tempcallstatus = \"Pending for Percall Approval\";\n    }\n    if (call.callStatus == 2) {\n      tempcallstatus = \"Pending for Response\";\n    }\n    if (call.callStatus == 3) {\n      tempcallstatus = \"Pending for OEM Response\";\n    }\n    if (call.callStatus == 4) {\n      tempcallstatus = \"Pending for 2nd Response\";\n    }\n    if (call.callStatus == 5) {\n      tempcallstatus = \"Pending for Customer\";\n    }\n    if (call.callStatus == 5) {\n      tempcallstatus = \"Under Observation\";\n    }\n    if (call.callStatus == 6) {\n      tempcallstatus = \"Pending for Others\";\n    }\n    if (call.callStatus == 7) {\n      tempcallstatus = \"Pending for Spare\";\n    }\n    if (call.callStatus == 8) {\n      tempcallstatus = \"Pending for Spare\";\n    }\n    if (call.callStatus == 9) {\n      tempcallstatus = \"Spare in Transit\";\n    }\n    if (call.callStatus == 10) {\n      tempcallstatus = \"Cancelled Calls\";\n    }\n    if (call.callStatus == 11) {\n      tempcallstatus = \"Closed Calls\";\n    }\n\n    // ----- history --------\n\n    let newcallhistory = {\n      date: moment().format(),\n      callStatus: call.callStatus,\n      engineer: call.employeeName,\n      callAttendDate: callAttendDate,\n      startOfService: startOfService,\n      endOfService: endOfService,\n      note: `Call Status Updated to ${tempcallstatus}`,\n      actionTaken: actionTaken,\n      ccfrImgUrl: ccfrImgUrl,\n      existserial: existswap[0].sno,\n      newserial: inventswap[0].sno,\n    };\n    let payload = {\n      id: call._id,\n      update: {\n        callStatus: call.callStatus,\n        // callAttendDate: call.callAttendDate,\n        // startOfService: call.startOfService,\n        // endOfService: call.endOfService,\n        // spareUsed: call.spareUsed,\n        $push: { history: newcallhistory },\n      },\n    };\n    console.log(payload);\n\n    try {\n      let response = await axios({\n        url: `${API}/call/${Emp.getId()}/assignEngg`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(\"updated\");\n      // setIsReviewModalOpen(true);\n    } catch (error) {\n      throw error;\n    }\n\n    let assetpayload = {\n      id: productID,\n      update: {\n        $push: { history: newcallhistory },\n      },\n    };\n\n    try {\n      let response = await axios({\n        url: `${API}/asset/${Emp.getId()}/updateProductWithID`,\n        method: \"POST\",\n        data: assetpayload,\n      });\n      console.log(\"updated\");\n      console.log(\"Done\");\n      setInventswap([\n        {\n          name: \"Not Selected\",\n          sno: \"Not Selected\",\n        },\n      ]);\n      setExistswap([\n        {\n          name: \"Not Selected\",\n          sno: \"Not Selected\",\n        },\n      ]);\n      await getAsset();\n      setSubmitModal(true);\n      // setIsReviewModalOpen(true);\n    } catch (error) {\n      throw error;\n    }\n    movehistory.push(\"/app/viewcalls\");\n  };\n\n  // -------handle swap --------\n\n  const handleSwap = async () => {\n    if (existswap[0]._id && !(defectiveImgUrl == \"\")) {\n      alert(\"Upload Image!!\");\n      return;\n    }\n    if (existswap[0]._id && !(defectiveImgUrl == \"\")) {\n      alert(\"Upload Image!!\");\n      return;\n    }\n\n    let payload = {\n      existswap: existswap[0],\n      newswap: inventswap[0],\n      call: call,\n      type: selectedItem.toLowerCase(),\n      servicelocation: servicelocation,\n      assetserial: POnumber,\n    };\n\n    try {\n      let update = await axios({\n        url: `${API}/call/${Emp.getId()}/swapitems`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    // ----- call history update --------\n    // ----- call history ---\n    let newcallhistory = {\n      date: moment().format(),\n      callStatus: call.callStatus,\n      engineer: call.employeeName,\n      callAttendDate: callAttendDate,\n      startOfService: startOfService,\n      endOfService: endOfService,\n      note: `Items Swapped/Added/Removed`,\n      actionTaken: actionTaken,\n      existUrl: defectiveImgUrl,\n      newUrl: goodSpareImgUrl,\n      existserial: existswap[0].sno,\n      newserial: inventswap[0].sno,\n    };\n    let payloadtwo = {\n      id: call._id,\n      update: {\n        callStatus: call.callStatus,\n        $push: { history: newcallhistory },\n      },\n    };\n\n    console.log(payloadtwo);\n    try {\n      let response = await axios({\n        url: `${API}/call/${Emp.getId()}/assignEngg`,\n        method: \"POST\",\n        data: payloadtwo,\n      });\n\n      // setIsReviewModalOpen(true);\n    } catch (error) {\n      throw error;\n    }\n\n    let assetpayload = {\n      id: productID,\n      update: {\n        $push: { history: newcallhistory },\n      },\n    };\n\n    try {\n      let response = await axios({\n        url: `${API}/asset/${Emp.getId()}/updateProductWithID`,\n        method: \"POST\",\n        data: assetpayload,\n      });\n      console.log(\"updated\");\n      console.log(\"Done\");\n      setInventswap([\n        {\n          name: \"Not Selected\",\n          sno: \"Not Selected\",\n        },\n      ]);\n      setExistswap([\n        {\n          name: \"Not Selected\",\n          sno: \"Not Selected\",\n        },\n      ]);\n      await getAsset();\n      setSubmitModal(true);\n      // setIsReviewModalOpen(true);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //DROPDOWN------------------------------------------------------------------------------------\n\n  const [isOpen, setIsOpen] = useState(false);\n  function toggleDropdown() {\n    setIsOpen(!isOpen);\n  }\n\n  const AssetBar = () => {\n    return (\n      <div className=\"dark:text-white my-4 \">\n        {/* Row 1  */}\n        {/* <div className=\"text-xl font-semibold\">Asset Information</div> */}\n        {/* Row 1*/}\n        <div className=\"flex space-x-1\">\n          <div className=\"dark:text-gray-200 text-black text-sm flex space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n            <div className=\" \">\n              <span>Call Number: {call.callNo}</span>\n            </div>\n            <div className=\" \">\n              <span>Contact Person: {call.contactPerson}</span>\n            </div>\n            <div className=\" \">\n              <span>Date: {moment(call.date).format(\"DD-MM-YYYY\")}</span>\n            </div>\n          </div>\n\n          <div className=\"dark:text-gray-200 text-black text-sm space-x-1  flex flex-row items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start   w-1/4 my-2 \">\n            <div className=\" font-semibold \">\n              <span>Call Status: </span>\n            </div>\n            <span>\n              {call.callStatus == 0 ? <Badge>Not Allocated</Badge> : null}\n              {call.callStatus == 1 ? (\n                <Badge>Pending for Percall Approval</Badge>\n              ) : null}\n              {call.callStatus == 2 ? (\n                <Badge>Pending for Response</Badge>\n              ) : null}\n              {call.callStatus == 3 ? (\n                <Badge>Pending for OEM Response</Badge>\n              ) : null}\n              {call.callStatus == 4 ? (\n                <Badge>Pending for 2nd Response</Badge>\n              ) : null}\n              {call.callStatus == 5 ? (\n                <Badge>Pending for Customer</Badge>\n              ) : null}\n              {call.callStatus == 6 ? <Badge>Under Observation</Badge> : null}\n              {call.callStatus == 7 ? <Badge>Pending for Others</Badge> : null}\n              {call.callStatus == 8 ? <Badge>Pending for Spare</Badge> : null}\n              {call.callStatus == 9 ? <Badge>Spare in Transit</Badge> : null}\n              {call.callStatus == 10 ? <Badge>Cancelled Calls</Badge> : null}\n              {call.callStatus == 11 ? <Badge>Closed Calls</Badge> : null}\n            </span>\n          </div>\n        </div>\n\n        {/*  Row 2*/}\n\n        <div className=\"flex space-x-1\">\n          <div className=\"dark:text-gray-200 text-black text-sm space-x-2  flex items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start w-full my-2\">\n            <div className=\" \">\n              <span>Brand :{brand}</span>\n            </div>\n            <div className=\" \">\n              <span>Model:{model}</span>\n            </div>\n            <div className=\" \">\n              <span>Serial Number: {serialno}</span>\n            </div>\n\n            {product == \"Laptop\" ||\n            product == \"Server\" ||\n            product == \"Desktop\" ? (\n              <>\n                <div className=\"\">\n                  <span>Operating System :{os}</span>\n                </div>\n              </>\n            ) : null}\n          </div>\n\n          <div className=\"dark:text-gray-200 text-black text-sm  bg-gray-100 dark:bg-gray-800 p-2 rounded-md  my-2 w-1/2 flex items-center justify-end space-x-1\">\n            {/* /////////////////////////////// . History  ///////////////////////////////////////////// */}\n            <Button\n              onClick={() => {\n                setAssetHistoryModalOpen(true);\n              }}\n              layout=\"outline\"\n            >\n              View Asset History\n            </Button>\n\n            <Button\n              onClick={() => {\n                setHistoryModalOpen(true);\n              }}\n              layout=\"outline\"\n            >\n              View Call History\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"dark:text-gray-200 text-black flex flex-row  items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start lg:space-x-8  w-full \">\n          {/* Row - 1 */}\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            <div>\n              <span className=\"font-semibold w-1/5\">Product Type :</span>{\" \"}\n              {product}\n            </div>\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">State : </span>{\" \"}\n                {unit.customerId.state}\n              </div>\n            ) : null}\n            <div>\n              <span className=\"font-semibold w-1/5\">Account :</span>{\" \"}\n              {account.accountName}\n            </div>\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n\n            {mouse[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Mouse Model :</span>{\" \"}\n                {mouse[0] ? mouse[0].mousename : \"\"}\n              </div>\n            ) : null}\n            {mouse[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Mouse Serial : </span>{\" \"}\n                {mouse[0] ? mouse[0].mousesno : \"\"}\n              </div>\n            ) : null}\n          </div>\n\n          {/*  Row 2 */}\n\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            <div>\n              <span className=\"font-semibold w-1/5\">Customer : </span>{\" \"}\n              {customer.customerName}\n            </div>\n            <div>\n              <span className=\"font-semibold w-1/5\">Unit : </span>{\" \"}\n              {unit.unitName}\n            </div>\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">PIN Code : </span>{\" \"}\n                {unit.customerId.pincode}\n              </div>\n            ) : null}\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n            {kbd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">KBD Model :</span>{\" \"}\n                {kbd[0].keyboardname}\n              </div>\n            ) : null}\n\n            {kbd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">KBD Serial: </span>{\" \"}\n                {kbd[0] ? kbd[0].keyboardsno : \"\"}\n              </div>\n            ) : null}\n          </div>\n          {/*  Row 3 */}\n\n          <div className=\" flex flex-col  text-sm my-1 w-full\">\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">\n                  Location type :{\" \"}\n                </span>{\" \"}\n                {unit.customerId.locationType}\n              </div>\n            ) : null}\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n            {monitor[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">Monitor : </span>{\" \"}\n                {monitor[0] ? monitor[0].monitorname : \"\"}\n              </div>\n            ) : null}\n            {monitor[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">\n                  Monitor Serial :\n                </span>{\" \"}\n                {monitor[0] ? monitor[0].monitorsno : \"\"}\n              </div>\n            ) : null}\n\n            {smps[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">SMPS1 Model :</span>{\" \"}\n                {smps[0] ? smps[0].smpsname : \"\"}\n              </div>\n            ) : null}\n            {smps[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">\n                  SMPS1 Serial :{\" \"}\n                </span>{\" \"}\n                {smps[0] ? smps[0].smpssno : \"\"}\n              </div>\n            ) : null}\n          </div>\n          {/* Row 4 */}\n\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n            {hdd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD1 Model:</span>{\" \"}\n                {hdd[0] ? hdd[0].hddname : \"\"}\n              </div>\n            ) : null}\n            {hdd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD1 Serial :</span>{\" \"}\n                {hdd[0] ? hdd[0].hddsno : \"\"}\n              </div>\n            ) : null}\n\n            {hdd[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD2 Model : </span>{\" \"}\n                {hdd[1] ? hdd[1].hddname : \"\"}\n              </div>\n            ) : null}\n\n            {hdd[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD2 Serial: </span>{\" \"}\n                {hdd[1] ? hdd[1].hddsno : \"\"}\n              </div>\n            ) : null}\n            {motherboard[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">Motherboard: </span>{\" \"}\n                {motherboard[0] ? motherboard[0].motherboardname : \"\"}\n              </div>\n            ) : null}\n\n            {motherboard[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">MBD Serial : </span>\n                {motherboard[0] ? motherboard[0].motherboardsno : \"\"}\n              </div>\n            ) : null}\n          </div>\n          {/* -----------Row 5---------- */}\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            <div>\n              <span className=\"font-semibold w-1/5\">Business : </span>{\" \"}\n              {Business}\n            </div>\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">District : </span>{\" \"}\n                {unit.customerId.district}\n              </div>\n            ) : null}\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n\n            {ram[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM1 Modell:</span>{\" \"}\n                {ram[0] ? ram[0].ramname : \"\"}\n              </div>\n            ) : null}\n            {ram[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM1 Serial:</span>{\" \"}\n                {ram[0] ? ram[0].ramsno : \"\"}\n              </div>\n            ) : null}\n\n            {ram[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM2 Model:</span>{\" \"}\n                {ram[1] ? ram[1].ramname : \"\"}\n              </div>\n            ) : null}\n\n            {ram[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM2 Serial : </span>{\" \"}\n                {ram[1] ? ram[1].ramsno : \"\"}\n              </div>\n            ) : null}\n            {/* {opticaldrive[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Optical Model: </span>{\" \"}\n                {opticaldrive[0] ? opticaldrive[0].opticaldrivename : \"\"}\n              </div>\n            ) : null}\n\n            {opticaldrive[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Optical Serial : </span>{\" \"}\n                {opticaldrive[0] ? opticaldrive[0].opticaldrivesno : \"\"}\n              </div>\n            ) : null} */}\n          </div>\n        </div>\n\n        {/* <hr className=\"my-4\" /> */}\n\n        <div className=\"flex space-x-1\">\n          <div className=\"dark:text-gray-200 text-black text-sm flex  flex-wrap items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n            {/* /////////////////////////////// . Engineer INFO  ///////////////////////////////////////////// */}\n            <div className=\" font-semibold\">\n              <span>\n                Engineer:{\" \"}\n                <span className=\"font-normal\">{call.employeeName}</span>\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dark:text-gray-200 text-black text-sm flex flex-col flex-wrap items-start bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full  \">\n          {/* /////////////////////////////// . Problem Description  ///////////////////////////////////////////// */}\n          <div className=\" font-semibold\">\n            <span>\n              Problem Description:{\" \"}\n              <span className=\"font-normal\"> {call.problem}</span>\n            </span>\n          </div>\n        </div>\n        <div className=\"dark:text-gray-200 text-black text-sm flex  space-x-2 items-start bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n          {/* /////////////////////////////// . Update  ///////////////////////////////////////////// */}\n          <div className=\"flex flex-col w-3/4\">\n            <Label className=\"w-full\">\n              <span>Status Update</span>\n              <Select\n                className=\"inline\"\n                onChange={(e) => {\n                  setCall({ ...call, callStatus: e.target.value });\n                  console.log(call);\n                  if (e.target.value == \"11\") {\n                    setSpareModal(true);\n                  }\n                }}\n                value={call.callStatus}\n              >\n                <option value=\"0\">Not Allocated</option>\n                <option value=\"1\">Pending for Percall Approval</option>\n                <option value=\"2\"> Pending for Response</option>\n                <option value=\"3\"> Pending for OEM Response</option>\n                <option value=\"4\"> Pending for 2nd Response</option>\n                <option value=\"5\"> Pending for Customer</option>\n                <option value=\"6\"> Under Observation</option>\n                <option value=\"7\"> Pending for Others</option>\n                <option value=\"8\"> Pending for Spare</option>\n                <option value=\"9\"> Spare in Transit</option>\n                <option value=\"10\"> Cancelled Calls</option>\n                <option value=\"11\"> Closed Calls</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-1/4\">\n            <Label className=\"w-full\">\n              <span>Spare Update</span>\n              <Select\n                className=\"inline w-1/2\"\n                onChange={(e) => {\n                  // setCall({ ...call, spareUsed: e.target.value });\n                  setSpareStatus(e.target.value);\n                  console.log(call);\n                }}\n                value={spareStatus}\n              >\n                <option value=\"\" disabled>\n                  Select Spare Status\n                </option>\n                <option value=\"Yes\">Yes</option>\n                <option value=\"No\">No</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* //////////////////////////////////////////////////////////////////////////// */}\n      </div>\n    );\n  };\n\n  const InvTable = (items, activeRowID, setActiveRowID, setExistswap) => {\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3\">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Select</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {items.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activeRowID == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowID(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                          className=\"hidden ml-2 mr-3 md:block\"\n                          src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                          alt=\"User image\"\n                        /> */}\n                        <div>\n                          <p className=\"font-semibold\">{user.type}</p>\n                          {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {user.accountName}\n                          </p> */}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">{user.sno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        layout=\"outline\"\n                        className=\"dark:border-green-700 border-green-400\"\n                        onClick={() => {\n                          setExistswap([user]);\n                          setActiveRowID(-1);\n                        }}\n                      >\n                        Select\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const AssetItemPick = () => {\n    return (\n      <div className=\"my-2\">\n        {/* <div className=\"text-xl dark:text-white\">Swap Items</div> */}\n\n        {/* -----Type Selection---- */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            <div class=\"relative  \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={itemtype}\n                onChange={(e) => {\n                  setItemtype(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Select Inventory Category\n                </option>\n\n                <option value=\"Full System\" disabled>\n                  Full System\n                </option>\n                <option value=\"Item\">Item</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n            {/* ---------------------------Product Drop Down-------------------------------------- */}\n            <div className=\"relative z-40 \">\n              <button\n                onClick={() => {\n                  if (itemtype != \"\") {\n                    setIsOpen(!isOpen);\n                  }\n                }}\n                className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {selectedItem ? selectedItem : \"Pick Item\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                {itemtype == \"Full\" ? (\n                  <>\n                    {\" \"}\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Console\");\n                      }}\n                    >\n                      <span>Console</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"DMP\");\n                      }}\n                    >\n                      <span>DMP</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Inkjet\");\n                      }}\n                    >\n                      <span>Inkjet</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"KVM\");\n                      }}\n                    >\n                      <span>KVM</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Laptop\");\n                      }}\n                    >\n                      <span>Laptop</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Laser\");\n                      }}\n                    >\n                      <span>Laser</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"LMP\");\n                      }}\n                    >\n                      <span>LMP</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Module\");\n                      }}\n                    >\n                      <span>Module</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Router\");\n                      }}\n                    >\n                      <span>Router</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Scanner\");\n                      }}\n                    >\n                      <span>Scanner</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Server\");\n                      }}\n                    >\n                      <span>Server</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Desktop\");\n                      }}\n                    >\n                      <span>Desktop</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Storage\");\n                      }}\n                    >\n                      <span>Storage</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Switch\");\n                      }}\n                    >\n                      <span>Switch</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"UPS\");\n                      }}\n                    >\n                      <span>UPS</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setSelectedItem(\"Others\");\n                      }}\n                    >\n                      <span>Others</span>\n                    </DropdownItem>\n                  </>\n                ) : (\n                  <>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Mouse\");\n                        // thegetter();\n                        setData(mouse);\n                      }}\n                    >\n                      <span>Mouse</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Keyboard\");\n                        setData(kbd);\n                      }}\n                    >\n                      <span>Keyboard</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Monitor\");\n                        setData(monitor);\n                      }}\n                    >\n                      <span>Monitor</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Cpu\");\n                        setData(cpu);\n                      }}\n                    >\n                      <span>Cpu</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Ram\");\n                        setData(ram);\n                      }}\n                    >\n                      <span>Ram</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Fan\");\n                        setData(fan);\n                      }}\n                    >\n                      <span>Fan</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Motherboard\");\n                        setData(motherboard);\n                      }}\n                    >\n                      <span>Motherboard</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"SMPS\");\n                        setData(smps);\n                      }}\n                    >\n                      <span>SMPS</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"HDD\");\n                        setData(hdd);\n                      }}\n                    >\n                      <span>HDD</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Gcard\");\n                        setData(gcard);\n                      }}\n                    >\n                      <span>Gcard</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"EnetCard\");\n                        setData(enetcard);\n                      }}\n                    >\n                      <span>Enet Card</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"SerialCard\");\n                        setData(serialcard);\n                      }}\n                    >\n                      <span>Serial Card</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"ParalellCard\");\n                        setData(parallelcard);\n                      }}\n                    >\n                      <span>Paralell Card</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"OpticalDrive\");\n                        setData(opticaldrive);\n                      }}\n                    >\n                      <span>Optical Drive</span>\n                    </DropdownItem>\n                    <DropdownItem\n                      onClick={() => {\n                        setIsOpen(false);\n                        setActiveRowID(-1);\n                        setSelectedItem(\"Others\");\n                        setData(others);\n                      }}\n                    >\n                      <span>Others</span>\n                    </DropdownItem>\n                  </>\n                )}\n              </Dropdown>\n            </div>\n            <Button\n              layout=\"outline\"\n              className=\"dark:border-green-700 border-green-400\"\n              onClick={() => {\n                console.log(\"Swap\");\n                handleSwap();\n              }}\n            >\n              Swap\n            </Button>\n            {existswap[0]._id ? (\n              <Button\n                layout=\"outline\"\n                className=\"dark:border-green-700 border-green-400\"\n                onClick={() => {\n                  setImageUploadMenuMessage(\"defective\");\n                  setIsImgUploadMenuModal(true);\n                }}\n              >\n                Upload Defective Spare\n              </Button>\n            ) : null}\n            {inventswap[0]._id ? (\n              <Button\n                layout=\"outline\"\n                className=\"dark:border-green-700 border-green-400\"\n                onClick={() => {\n                  setImageUploadMenuMessage(\"good\");\n                  setIsImgUploadMenuModal(true);\n                }}\n              >\n                Upload Good Spare\n              </Button>\n            ) : null}\n          </div>\n        </div>\n\n        {/* Selection Modules */}\n        <div className=\"flex flex-row items-start space-x-2\">\n          {/* -------Existing Item Table ----------*/}\n\n          <TableContainer className=\"mt-4\">\n            <div className=\"dark:text-gray-200 text-black text-sm flex space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 font-bold\">\n              Items In Asset\n            </div>\n            <Table>\n              <TableHeader>\n                <tr className=\"flex flex-row justify-between\">\n                  <TableCell>Type</TableCell>\n                  <TableCell>Model</TableCell>\n                  <TableCell>Serial Number</TableCell>\n\n                  <TableCell>\n                    <span\n                      className=\"cursor-pointer\"\n                      // onClick={() => setActiveRowID(-1)}\n                    >\n                      Items\n                    </span>\n                  </TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {existswap.map((user, i) => (\n                  <div className=\"flex flex-col justify-around\">\n                    <TableRow\n                      className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                        activeRowID == user._id\n                          ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                          : \"white\"\n                      } `}\n                      key={i}\n                      onClick={() => {\n                        // setActiveRowID(i);\n                      }}\n                    >\n                      <TableCell className=\"w-8\">\n                        <div className=\"flex items-center text-sm \">\n                          <div>\n                            <p className=\"font-semibold\">{selectedItem}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm\">{user.name}</span>\n                      </TableCell>\n\n                      <TableCell>\n                        <span className=\"text-sm\">{user.sno}</span>\n                      </TableCell>\n\n                      <TableCell className=\"text-center \">\n                        <Button\n                          // layout=\"link\"\n                          size=\"icon\"\n                          aria-label=\"DropDown\"\n                          onClick={() => {\n                            console.log(activeRowID);\n                            if (activeRowID != -1) {\n                              setActiveRowID(-1);\n                            } else {\n                              setActiveRowID(i);\n                            }\n                            // setActiveRowID(-1);\n                          }}\n                          className=\"rounded-lg m-1\"\n                        >\n                          <DropdownIcon\n                            className=\"w-5 h-5\"\n                            aria-hidden=\"true\"\n                          />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n\n                    {activeRowID == i\n                      ? InvTable(\n                          data,\n                          activeRowID,\n                          setActiveRowID,\n                          setExistswap\n                        )\n                      : null}\n                  </div>\n                ))}\n              </TableBody>\n            </Table>\n            {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n          </TableContainer>\n\n          {/*----------- Inventory Selection Table ----------- */}\n\n          <TableContainer className=\"mt-4\">\n            <div className=\"dark:text-gray-200 text-black text-sm flex space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 font-bold\">\n              Items In Inventory\n            </div>\n            <Table>\n              <TableHeader>\n                <tr className=\"flex flex-row justify-between\">\n                  <TableCell>Type</TableCell>\n                  <TableCell>Model</TableCell>\n                  <TableCell>Serial Number</TableCell>\n\n                  <TableCell>\n                    <span\n                      className=\"cursor-pointer\"\n                      // onClick={() => setActiveRowID(-1)}\n                    >\n                      Items\n                    </span>\n                  </TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {inventswap.map((user, i) => (\n                  <div className=\"flex flex-col justify-around\">\n                    <TableRow\n                      className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                        secondactiveRowID == user._id\n                          ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                          : \"white\"\n                      } `}\n                      key={i}\n                      onClick={() => {\n                        // setActiveRowID(i);\n                      }}\n                    >\n                      <TableCell className=\"w-8\">\n                        <div className=\"flex items-center text-sm \">\n                          <div>\n                            <p className=\"font-semibold\">{selectedItem}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm\">{user.name}</span>\n                      </TableCell>\n\n                      <TableCell>\n                        <span className=\"text-sm\">{user.sno}</span>\n                      </TableCell>\n\n                      <TableCell className=\"text-center \">\n                        <Button\n                          // layout=\"link\"\n                          size=\"icon\"\n                          aria-label=\"DropDown\"\n                          onClick={() => {\n                            if (secondactiveRowID != -1) {\n                              setSecondactiveRowID(-1);\n                            } else {\n                              setSecondactiveRowID(i);\n                            }\n                            // setActiveRowID(-1);\n                          }}\n                          className=\"rounded-lg m-1\"\n                        >\n                          <DropdownIcon\n                            className=\"w-5 h-5\"\n                            aria-hidden=\"true\"\n                          />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n\n                    {secondactiveRowID == i\n                      ? InvTable(\n                          inventdata,\n                          secondactiveRowID,\n                          setSecondactiveRowID,\n                          setInventswap\n                        )\n                      : null}\n                  </div>\n                ))}\n              </TableBody>\n            </Table>\n            {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n          </TableContainer>\n        </div>\n      </div>\n    );\n  };\n\n  const CallUpdater = () => {\n    return (\n      <div className=\"border-b pb-3\">\n        <div className=\"flex-row flex  space-x-3 mb-2\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Assigned Date</span>\n              <Input\n                className=\"\"\n                type=\"date\"\n                value={call.assignedDate}\n                onChange={(e) => {\n                  setCall({ ...call, callAttendDate: e.target.value });\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Call Attended ETA</span>\n              <Input\n                className=\"\"\n                type=\"time\"\n                value={call.assignedETA}\n                onChange={(e) => {\n                  setCall({ ...call, callAttendDate: e.target.value });\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Call Attended Date*</span>\n              <Input\n                className=\"\"\n                type=\"date\"\n                value={callAttendDate}\n                onChange={(e) => {\n                  setCallAttendDate(e.target.value);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Start Of Service*</span>\n              <Input\n                className=\"\"\n                type=\"time\"\n                value={startOfService}\n                onChange={(e) => {\n                  setStartOfService(e.target.value);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>End Of Service*</span>\n              <Input\n                className=\"\"\n                type=\"time\"\n                value={endOfService}\n                onChange={(e) => {\n                  setEndOfService(e.target.value);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col w-full\">\n          <Label className=\"w-full\">\n            <span>Action Taken*</span>\n            <Input\n              className=\"\"\n              type=\"text\"\n              value={actionTaken}\n              onChange={(e) => {\n                setActionTaken(e.target.value);\n              }}\n            />\n          </Label>\n        </div>\n      </div>\n    );\n  };\n\n  const CallEnder = () => {\n    return (\n      <div className=\"dark:text-gray-200 text-black text-sm flex   space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n        {/* /////////////////////////////// . Update  ///////////////////////////////////////////// */}\n\n        <div className=\"flex flex-col w-1/4\">\n          <Label className=\"w-full\">\n            <span>CCFR Signed</span>\n            <Select\n              className=\"inline w-1/2\"\n              onChange={(e) => {\n                // setCall({ ...call, spareUsed: e.target.value });\n                setCcfrStatus(e.target.value);\n                // console.log(call);\n              }}\n              value={ccfrStatus}\n            >\n              <option value=\"\" disabled>\n                Select CCFR Status\n              </option>\n              <option value=\"Yes\">Yes</option>\n              <option value=\"No\">No</option>\n            </Select>\n          </Label>\n        </div>\n\n        <div className=\"flex flex-col w-1/4 mt-5\">\n          {ccfrStatus == \"Yes\" ? (\n            <Button\n              layout=\"outline\"\n              className=\"\"\n              onClick={() => {\n                setImageUploadMenuMessage(\"ccfr\");\n                setIsImgUploadMenuModal(true);\n              }}\n            >\n              Upload CCFR\n            </Button>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {HistoryModal()}\n      {AssetHistoryModal()}\n      {ImgUploadModal()}\n      {ImgUploadMenuModal()}\n      {HistoryImgViewModal()}\n      {AssetBar()}\n      {CallUpdater()}\n      {spareStatus == \"Yes\" ? AssetItemPick() : null}\n      {UpdatedModal()}\n      {NotSwapModal()}\n      {SpareRequiredModal()}\n      {CallEnder()}\n      <div>\n        <div className=\"flex flex-col items-center w-full mt-5\">\n          {/* <Link to={`/app/viewcalls`}> */}\n          <Button\n            onClick={() => {\n              handleUpdate();\n            }}\n            layout=\"outline\"\n          >\n            Update Call\n          </Button>\n          {/* </Link> */}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default UpdateCall;\n","exports.capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n"],"sourceRoot":""}