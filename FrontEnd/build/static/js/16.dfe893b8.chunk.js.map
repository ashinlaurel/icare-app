{"version":3,"sources":["pages/Calls/EnggPriorityList.js","components/Modal/UnitListModal.js","components/Modal/EngineerListModal.js","components/Modal/SelectEmployeeModal.js","components/Modal/SelectEmployeeModalForCalls.js"],"names":["EnggPriorityList","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","TopBarContext","setTopHeading","topheading","isDwnldModalOpen","setIsDwnldModalOpen","setPage","data","setData","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","totalResults","setTotalResults","useEffect","a","payload","pages","page","limit","filters","callStatus","searchquery","fromDate","toDate","employeeId","_id","console","log","axios","url","API","Emp","getId","method","response","out","total","downloadAssets","csv","map","call","i","callNo","moment","date","format","time","unitName","phone","assetId","producttype","product","serialno","problem","getCallStatusAsString","employeeName","assignedDate","assignedETA","csvData","Blob","type","saveAs","downloadAllCalls","temp","search","users","user","push","finaldata","length","payloadtwo","j","capitalize","isModalOpen","setIsModalOpen","setEmployee","isOpen","onClose","className","layout","onClick","item","key","resultsPerPage","label","onChange","p","UnitListModal","unit","setUnit","account","setAccount","customer","setCustomer","setRefresh","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","setSearch","handleChange","e","target","value","handleSubmit","preventDefault","role","pickCustomer","customerName","name","accountName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind","onSubmit","placeholder","EngineerListModal","nextModal","values","setValues","then","catch","err","enggName","employeeID","SelectEmployeeModal","email","SelectEmployeeModalForCalls","getter"],"mappings":"yVAsiBeA,UAjff,WAA4B,MAIsBC,oBAAS,GAJ/B,gCAOxBC,qBAAWC,MADKC,GANQ,EAMlBC,SANkB,EAMRD,aAAaE,EANL,EAMKA,gBANL,KAMsBC,aAGVN,mBAAS,IATrB,mBASnBO,EATmB,aAWYN,qBAAWO,MAA7BC,GAXM,EAWlBC,WAXkB,EAWND,eAXM,EAasBT,oBAAS,GAb/B,mBAanBW,EAbmB,KAaDC,EAbC,OAeMZ,oBAAS,GAff,gCAgBFA,mBAAS,IAhBP,mBAgBba,GAhBa,aAiBFb,mBAAS,IAjBP,mBAiBnBc,EAjBmB,KAiBbC,EAjBa,OAmBEf,oBAAS,GAnBX,gCAoBQA,oBAAS,IApBjB,gCAqBYA,oBAAS,IArBrB,gCAsBIA,oBAAS,IAtBb,gCAuBMA,oBAAS,IAvBf,gCA0BMA,mBAAS,OA1Bf,mBA0BnBgB,EA1BmB,KA0BTC,EA1BS,OA2BoBjB,oBAAS,GA3B7B,mBA2BnBkB,GA3BmB,KA2BFC,GA3BE,QA6BcnB,mBAAS,IA7BvB,qCAgCUA,mBAAS,KAhCnB,qCAiCYA,mBAAS,KAjCrB,qCAkCYA,mBAAS,KAlCrB,qCAqCcA,mBAAS,KArCvB,qCAsCYA,mBAAS,KAtCrB,qCAyCcA,mBAAS,KAzCvB,qBAyCnBoB,GAzCmB,MAyCLC,GAzCK,MAgD1BC,qBAAU,WACR,sBAAC,8BAAAC,EAAA,0DACKP,EADL,wBAEOQ,EAAU,CACZC,MAAO,CACLC,KAAM,EACNC,MAAO,KAETC,QAAS,CACPC,WAAY,GACZC,YAAa,GACbC,SAAU,GACVC,OAAQ,GACRC,WAAYjB,EAASkB,MAIzBC,QAAQC,IAAI,OAAQZ,GAhBvB,kBAkB0Ba,IAAM,CACzBC,IAAI,GAAD,OAAKC,MAAL,iBAAiBC,IAAIC,QAArB,WACHC,OAAQ,OACR5B,KAAMU,IArBb,OAkBSmB,EAlBT,OAuBKR,QAAQC,IAAIO,EAAS7B,KAAK8B,KAC1BvB,GAAgBsB,EAAS7B,KAAK+B,OAC9B9B,EAAQ4B,EAAS7B,KAAK8B,KAItB7B,EAAQ4B,EAAS7B,KAAK8B,KA7B3B,sHAAD,KAoCC,CAAC5B,IAEJ,IA2BM8B,GAAc,uCAAG,8BAAAvB,EAAA,sDACjBwB,EADiB,6GAGrBjC,EAAKkC,KAAI,SAACC,EAAMC,GACdH,GACK,WACCE,EAAKE,OADN,cACkBC,IAAOH,EAAKI,MAAMC,OAAO,cAD3C,cAC8DF,IAC5D,aADkE,WAClDH,EAAKM,OACxBD,OAAO,UAHN,cAGqBL,EAAKO,SAH1B,cAGwCP,EAAKQ,MAH7C,cAIDR,EAAKS,QAAQC,YAJZ,cAKGV,EAAKS,QAAQE,QAAQC,SALxB,cAMDZ,EAAKa,QANJ,cAOGC,gCAAsBd,EAAKpB,YAP9B,cAQDoB,EAAKe,aAAef,EAAKe,aAAe,eARvC,cASGZ,IAAOH,EAAKgB,cAAcX,OAAO,cATpC,cAUDL,EAAKiB,YAVJ,cAWGhB,EAAI,EAXP,WAcDiB,EAAU,IAAIC,KAAK,CAACrB,GAAM,CAAEsB,KAAM,4BACxCC,iBAAOH,EAAS,mBApBK,2CAAH,qDAwBdI,GAAgB,uCAAG,8CAAAhD,EAAA,6DACnBiD,EAAO,GAEPhD,EAAU,CACZiD,OAAQ,GACR9C,MAAO,KALc,kBASHU,IAAM,CACtBC,IAAI,GAAD,OAAKC,MAAL,kBAAkBC,IAAIC,QAAtB,mBACHC,OAAQ,OACR5B,KAAMU,IAZa,OASjBkD,EATiB,OAcrBvC,QAAQC,IAAIsC,EAAM5D,MAElB4D,EAAM5D,KAAKkC,KAAI,SAAC2B,GACdH,EAAKI,KAAKD,MAjBS,qEA4BnBE,EAAY,GACP3B,EAAI,EA7BU,aA6BPA,EAAIsB,EAAKM,QA7BF,wBA8BjBC,EAAa,CACftD,MAAO,CACLC,KAAM,EACNC,MAAO,KAETC,QAAS,CACPC,WAAY,GACZC,YAAa,GACbC,SAAU,GACVC,OAAQ,GACRC,WAAYuC,EAAKtB,GAAGhB,MAxCH,oBA6CEG,IAAM,CACzBC,IAAI,GAAD,OAAKC,MAAL,iBAAiBC,IAAIC,QAArB,WACHC,OAAQ,OACR5B,KAAMiE,IAhDW,QA6CfpC,EA7Ce,OAkDnBR,QAAQC,IAAIO,EAAS7B,KAAK8B,KAC1BiC,EAAUD,KAAKjC,EAAS7B,KAAK8B,KAnDV,sEA6BUM,IA7BV,wBA4DvB,IAFIH,EA1DmB,8GA4DdiC,EAAI,EAAGA,EAAIH,EAAUC,OAAQE,IAChCH,EAAUG,GAAG,KACfjC,GAAS,UAAMkC,qBAAWJ,EAAUG,GAAG,GAAGhB,cAAjC,QAGXa,EAAUG,GAAGhC,KAAI,SAACC,EAAMC,GACtBH,GACK,WACCE,EAAKE,OADN,cACkBC,IAAOH,EAAKI,MAAMC,OACrC,cAFC,cAGIF,IAAU,aAAJ,WAAoBH,EAAKM,OAAQD,OAAO,UAHlD,cAIDL,EAAKO,SAJJ,cAKGP,EAAKQ,MALR,cAKmBR,EAAKS,QAAQC,YALhC,cAMDV,EAAKS,QAAQE,QAAQC,SANpB,cAOGZ,EAAKa,QAPR,cAOqBC,gCAAsBd,EAAKpB,YAPhD,cAQDoB,EAAKe,aAAef,EAAKe,aAAe,eARvC,cASGZ,IAAOH,EAAKgB,cAAcX,OAAO,cATpC,cAUDL,EAAKiB,YAVJ,cAWGhB,EAAI,EAXP,WAeHiB,EAAU,IAAIC,KAAK,CAACrB,GAAM,CAAEsB,KAAM,4BACxCC,iBAAOH,EAAS,mBAnFO,kEAAH,qDAuGtB,OAhBA7C,qBAAU,WAER,OAAO,WACLnB,EAAY,GACZE,EAAgB,OAEjB,IAGHiB,qBAAU,WAER,OADAb,EAAc,0BACP,WACLA,EAAc,OAEf,IAGD,oCAcE,kBAAC,IAAD,CACEyE,YAAahE,GACbiE,eAAgBhE,GAChBiE,YAAanE,IA1Kf,oCACE,kBAAC,QAAD,CACEoE,OAAQ1E,EACR2E,QAAS,kBAAM1E,GAAoB,IACnC2E,UAAU,6GAEV,kBAAC,cAAD,CAAaA,UAAU,qDACrB,yBAAKA,UAAU,WAAf,wBAEF,kBAAC,YAAD,KACE,kBAAC,SAAD,CACEC,OAAO,UACPC,QAAS,WACP3C,OAHJ,gCAmKN,kBAAC,IAAD,MAIA,yBAAKyC,UAAU,cAEb,yBAAKA,UAAU,sDAEb,kBAAC,SAAD,CAAQC,OAAO,UAAUC,QAAS,kBAAMtE,IAAmB,KAA3D,mBAGA,yBAAKoE,UAAU,QACb,kBAAC,SAAD,CACEA,UAAU,aACVC,OAAO,UACPC,QAAS,WACP7E,GAAoB,KAJxB,WAUF,yBAAK2E,UAAU,QACb,kBAAC,SAAD,CACEA,UAAU,aACVC,OAAO,UACPC,QAAS,WAEPlB,OALJ,gBAcJ,kBAAC,iBAAD,CAAgBgB,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,kBAAC,YAAD,gBACA,kBAAC,YAAD,aAEA,kBAAC,YAAD,kBACA,kBAAC,YAAD,gBACA,kBAAC,YAAD,gBAEA,kBAAC,YAAD,oBACA,kBAAC,YAAD,CAAWA,UAAU,WAArB,eAEA,kBAAC,YAAD,kBAGF,kBAAC,YAAD,KACGvE,GACCF,EAAKkC,KAAI,SAAC0C,EAAMxC,GAAP,OACP,kBAAC,WAAD,CACEqC,UAAS,iDACPhF,GAAemF,EAAKxD,IAChB,yCACA,QAHG,KAKTyD,IAAKzC,EACLuC,QAAS,cAWT,kBAAC,YAAD,CAAWF,UAAU,OACnB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBAAiBG,EAAKvC,WAIzC,kBAAC,YAAD,KACE,yBAAKoC,UAAU,iBACb,0BAAMA,UAAU,WACbnC,IAAOsC,EAAKrC,MAAMC,OAAO,eAE5B,0BAAMiC,UAAU,WACbnC,IAAU,aAAJ,WAAoBsC,EAAKnC,OAAQD,OACtC,aAMR,kBAAC,YAAD,KACE,yBAAKiC,UAAU,iBACb,0BAAMA,UAAU,WAAWG,EAAKlC,UAChC,0BAAM+B,UAAU,WAAhB,OAA+BG,EAAKjC,SAIxC,kBAAC,YAAD,KACE,yBAAK8B,UAAU,iBACb,0BAAMA,UAAU,WACbG,EAAKhC,QAAQC,aAEhB,0BAAM4B,UAAU,YAAhB,MACMG,EAAKhC,QAAQE,QAAQC,YAK/B,kBAAC,YAAD,CAAW0B,UAAU,kBACnB,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,yDACb,0BAAMA,UAAU,KAAKG,EAAK5B,SACzB4B,EAAKzD,WACJ,2CAAiByD,EAAK1B,cAEtB,0DAOR,kBAAC,YAAD,CAAWuB,UAAU,aACnB,yBAAKA,UAAU,wBACO,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,KAAhB,0BACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,gCACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,wBACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,4BACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,4BACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,wBACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,qBACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,sBACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,qBACE,KACgB,GAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,oBACE,KACgB,IAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,mBACE,KACgB,IAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,gBACE,KACgB,IAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,oBACE,KACgB,IAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,KAAhB,gCAGE,KACgB,IAAnBG,EAAK7D,WACJ,0BAAM0D,UAAU,IAAhB,iBACE,KACgB,IAAnBG,EAAK7D,WACJ,kBAAC,QAAD,iCACE,OAGR,kBAAC,YAAD,KACE,yBAAK0D,UAAU,iBACb,0BAAMA,UAAU,WACbnC,IAAOsC,EAAKzB,cAAcX,OAAO,eAEpC,0BAAMiC,UAAU,WACb,IADH,SAESG,EAAKxB,eAIlB,kBAAC,YAAD,KAAYhB,EAAI,SA0B1B,kBAAC,cAAD,KACE,kBAAC,aAAD,CACE9B,aAAcA,GACdwE,eA1bW,IA2bXC,MAAM,mBACNC,SAxbZ,SAAsBC,GACpBlF,EAAQkF,Y,uKCzEG,SAASC,EAAT,GAUX,IATFd,EASC,EATDA,YACAC,EAQC,EARDA,eACAc,EAOC,EAPDA,KACAC,EAMC,EANDA,QACAC,EAKC,EALDA,QACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,SACAC,EAEC,EAFDA,YACAC,EACC,EADDA,WACC,EACiCvG,mBAAS,IAD1C,mBACMwG,EADN,KACiBC,EADjB,OAE+BzG,mBAAS,IAFxC,mBAEM0G,EAFN,KAEgBC,EAFhB,OAGyB3G,mBAAS,IAHlC,mBAGM4G,EAHN,KAGaC,EAHb,OAI+B7G,mBAAS,GAJxC,mBAIM8G,EAJN,KAIgBC,EAJhB,OAK2B/G,mBAAS,IALpC,mBAKMyE,EALN,KAKcuC,EALd,KAQKC,EAAe,SAACC,GACpBF,EAAUE,EAAEC,OAAOC,QAKfC,EAAY,uCAAG,WAAOH,GAAP,iBAAA3F,EAAA,6DACnB2F,EAAEI,iBACE9F,EAAU,CACZiD,OAAQA,EACR8C,KAAM,GAJW,kBAOIlF,IAAM,CACzBC,IAAI,GAAD,OAAKC,MAAL,uBACHG,OAAQ,OACR5B,KAAMU,IAVS,OAObmB,EAPa,OAYjBR,QAAQC,IAAIO,EAAS7B,MACrB2F,EAAa9D,EAAS7B,MAbL,uHAAH,sDAqBlBQ,qBAAU,YACR,uCAAC,8BAAAC,EAAA,6DACKC,EAAU,CACZiD,OAAQA,EACR8C,KAAM,GAHT,kBAMwBlF,IAAM,CACzBC,IAAI,GAAD,OAAKC,MAAL,uBACHG,OAAQ,OACR5B,KAAMU,IATX,OAMOmB,EANP,OAWGR,QAAQC,IAAIO,EAAS7B,MACrB2F,EAAa9D,EAAS7B,MAZzB,oHAAD,yDAiBC,IAEH,IAAM0G,EAAY,uCAAG,WAAOnB,GAAP,eAAA9E,EAAA,6DAEnB+E,EAAY,CACVpE,IAAKmE,EAASnE,IACduF,aAAcpB,EAASqB,OAEzBtB,EAAW,CACTlE,IAAK,GACLyF,YAAa,KAEfzB,EAAQ,CACNhE,IAAK,GACLsB,SAAU,KAZO,kBAeEoE,IAAMC,KAAN,UAActF,MAAd,sBAAuC,CACxDuF,WAAYzB,EAASnE,MAhBN,OAeX6F,EAfW,OAkBjB5F,QAAQC,IAAI2F,EAAKjH,MAKjB6F,EAAYoB,EAAKjH,MACjBiG,EAAY,GAxBK,kDA0BjB5E,QAAQC,IAAI,WAAZ,MA1BiB,0DAAH,sDA8BZ4F,EAAW,uCAAG,WAAO7B,GAAP,eAAA5E,EAAA,6DAClBY,QAAQC,IAAI+D,GACZC,EAAW,CACTlE,IAAKiE,EAAQjE,IACbyF,YAAaxB,EAAQuB,OAEvBxB,EAAQ,CACNhE,IAAK,GACLsB,SAAU,KARM,kBAWAoE,IAAMC,KAAN,UAActF,MAAd,mBAAoC,CAClD0F,UAAW9B,EAAQjE,MAZL,OAWVgG,EAXU,OAchB/F,QAAQC,IAAI8F,EAAEpH,MAKd+F,EAASqB,EAAEpH,MACXiG,EAAY,GApBI,kDAsBhB5E,QAAQC,IAAI,WAAZ,MAtBgB,0DAAH,sDA0BX+F,EAAQ,uCAAG,WAAOlC,GAAP,SAAA1E,EAAA,sDACfY,QAAQC,IAAI6D,GACZC,EAAQ,CACNhE,IAAK+D,EAAK/D,IACVsB,SAAUyC,EAAKzC,WAJF,2CAAH,sDA4Hd,OACE,oCAIE,kBAAC,QAAD,CAAO6B,OAAQH,EAAaI,QAAS,kBAAMH,GAAe,KACxD,kBAAC,cAAD,cACS,IACM,GAAZ2B,EACC,gDACc,GAAZA,EACF,+CAEA,6CAGJ,kBAAC,YAAD,CAAWvB,UAAU,0BACnB,kBAAC,IAAD,CAAM6C,cAAetB,EAAUuB,SAAU,SAACC,GAAD,OAASvB,EAAYuB,KAC5D,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,gBACA,kBAAC,IAAD,cAEF,kBAAC,IAAD,KAzIN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,kBAKF,4BACE,kBAAC,YAAD,KACE,0BAAMC,SAAUlB,GACd,2BACE9B,UAAU,kNACViD,YAAY,mBACZ1C,SAAUmB,QAMpB,kBAAC,YAAD,KACGT,EAAUxD,KAAI,SAACqD,EAAUnD,GAAX,OACb,kBAAC,WAAD,CACEyC,IAAKzC,EACLqC,UAAU,qCACVE,QAAS,kBAAM+B,EAAanB,KAE5B,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGd,UAAU,iBAAiBc,EAASqB,eAQrD,kBAAC,cAAD,QAmGI,kBAAC,IAAD,KA5FN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,kBAMJ,kBAAC,YAAD,KACGhB,EAAS1D,KAAI,SAACmD,EAASjD,GAAV,OACZ,kBAAC,WAAD,CACEyC,IAAKzC,EACLqC,UAAU,qCACVE,QAAS,kBAAMuC,EAAY7B,KAE3B,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGZ,UAAU,iBAAiBY,EAAQuB,eAQpD,kBAAC,cAAD,QAiEI,kBAAC,IAAD,KA1DN,kBAAC,iBAAD,KACE,kBAAC,QAAD,CAAOnC,UAAU,6BACf,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,eAMJ,kBAAC,YAAD,KACGqB,EAAM5D,KAAI,SAACiD,EAAM/C,GAAP,OACT,kBAAC,WAAD,CACEyC,IAAKzC,EACLqC,UAAU,qCACVE,QAAS,kBAAM0C,EAASlC,KAExB,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGV,UAAU,iBAAiBU,EAAKzC,mBAQjD,kBAAC,cAAD,UAiCA,kBAAC,cAAD,KACE,kBAAC,QAAD,CAAO+B,UAAU,eAAelB,KAAK,WAArC,aACagC,EAASoB,cAEtB,kBAAC,QAAD,CAAOlC,UAAU,eAAelB,KAAK,WAArC,aACa8B,EAAQwB,aAErB,kBAAC,QAAD,CAAOpC,UAAU,eAAelB,KAAK,WAArC,SACS4B,EAAKzC,UAEd,kBAAC,SAAD,CACE+B,UAAU,mBAEVE,QAAS,WACPN,GAAe,GACfoB,GAAW,KALf,e,qIC9RK,SAASkC,EAAT,GAKX,IAJFvD,EAIC,EAJDA,YACAC,EAGC,EAHDA,eACAlE,EAEC,EAFDA,YACAyH,EACC,EADDA,UACC,EAC2B1I,mBAAS,IADpC,mBACM2I,EADN,KACcC,EADd,KAEDtH,qBAAU,WACRa,QAAQC,IAAI,WACZwF,IAAMC,KAAN,UAActF,MAAd,kBAA2BC,IAAIC,QAA/B,YACGoG,MAAK,SAACnE,GACLvC,QAAQC,IAAIsC,EAAM5D,MAClB,IAAI0D,EAAO,GACXE,EAAM5D,KAAKkC,KAAI,SAAC2B,GACdH,EAAKI,KAAKD,MAEZiE,EAAUpE,MAEXsE,OAAM,SAACC,GACN5G,QAAQC,IAAI,WAAY2G,QAE3B,IA2DH,OACE,oCAIE,kBAAC,QAAD,CAAO1D,OAAQH,EAAaI,QAAS,kBAAMH,GAAe,KACxD,kBAAC,cAAD,wBACA,kBAAC,YAAD,KA9DF,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aAEA,kBAAC,YAAD,sBAKJ,kBAAC,YAAD,KACGwD,EAAO3F,KAAI,SAAC2B,EAAMzB,GAAP,OACV,kBAAC,WAAD,CACEyC,IAAKzC,EACLqC,UAAU,0DACVE,QAAS,WACPxE,EAAY,CACViB,IAAKyC,EAAKzC,IACV8G,SAAUrE,EAAKX,eAEjBmB,GAAe,GACfuD,GAAU,KAGZ,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGnD,UAAU,iBAAiBZ,EAAKX,iBAIzC,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGuB,UAAU,iBAAiBZ,EAAKsE,qBAQjD,kBAAC,cAAD,QAoBA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACE1D,UAAU,mBACVC,OAAO,UACPC,QAAS,kBAAMN,GAAe,KAHhC,UAOA,kBAAC,SAAD,CAAQI,UAAU,oBAAlB,e,qIChGK,SAAS2D,EAAT,GAIX,IAHFhE,EAGC,EAHDA,YACAC,EAEC,EAFDA,eACAC,EACC,EADDA,YACC,EAC2BpF,mBAAS,IADpC,mBACM2I,EADN,KACcC,EADd,KAEDtH,qBAAU,WACRa,QAAQC,IAAI,WACZwF,IAAMC,KAAN,UAActF,MAAd,kBAA2BC,IAAIC,QAA/B,mBACGoG,MAAK,SAACnE,GACLvC,QAAQC,IAAIsC,EAAM5D,MAClB,IAAI0D,EAAO,GACXE,EAAM5D,KAAKkC,KAAI,SAAC2B,GACdH,EAAKI,KAAKD,MAEZiE,EAAUpE,MAEXsE,OAAM,SAACC,GACN5G,QAAQC,IAAI,WAAY2G,QAE3B,IAyDH,OACE,oCAIE,kBAAC,QAAD,CAAO1D,OAAQH,EAAaI,QAAS,kBAAMH,GAAe,KACxD,kBAAC,cAAD,wBACA,kBAAC,YAAD,KA5DF,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aACA,kBAAC,YAAD,gBAKJ,kBAAC,YAAD,KACGwD,EAAO3F,KAAI,SAAC2B,EAAMzB,GAAP,OACV,kBAAC,WAAD,CACEyC,IAAKzC,EACLqC,UAAU,0DACVE,QAAS,WACPtD,QAAQC,IAAIuC,GACZS,EAAYT,GAEZQ,GAAe,KAIjB,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGI,UAAU,iBAAiBZ,EAAKX,iBAIzC,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGuB,UAAU,iBAAiBZ,EAAKwE,gBAQjD,kBAAC,cAAD,QAoBA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACE5D,UAAU,mBACVC,OAAO,UACPC,QAAS,kBAAMN,GAAe,KAHhC,UAOA,kBAAC,SAAD,CAAQI,UAAU,oBAAlB,e,6JC7FK,SAAS6D,EAAT,GAIX,IAHFlE,EAGC,EAHDA,YACAC,EAEC,EAFDA,eACAC,EACC,EADDA,YACC,EAC2BpF,mBAAS,IADpC,mBACM2I,EADN,KACcC,EADd,OAE2B5I,mBAAS,IAFpC,mBAEMyE,EAFN,KAEcuC,EAFd,KAID1F,qBAAU,WAAM,4CAEd,gCAAAC,EAAA,6DACMC,EAAU,CACZiD,OAAQA,EACR9C,MAAO,GAHX,kBASsBiG,IAAM,CACtBtF,IAAI,GAAD,OAAKC,MAAL,kBAAkBC,IAAIC,QAAtB,mBACHC,OAAQ,OACR5B,KAAMU,IAZZ,OASQkD,EATR,OAcIvC,QAAQC,IAAIsC,EAAM5D,MACd0D,EAAO,GACXE,EAAM5D,KAAKkC,KAAI,SAAC2B,GACdH,EAAKI,KAAKD,MAGZiE,EAAUpE,GApBd,wHAFc,0DA4Bd6E,KACC,CAAC5E,IAyEJ,OACE,oCAIE,kBAAC,QAAD,CAAOY,OAAQH,GACb,kBAAC,cAAD,wBACA,kBAAC,YAAD,KA5EF,6BACE,0BACEK,UAAU,OACVgD,SAAU,SAACrB,GACTA,EAAEI,mBAGJ,2BACE/B,UAAU,kNACViD,YAAY,mBACZ1C,SAAU,SAACoB,GACTF,EAAUE,EAAEC,OAAOC,WAIzB,kBAAC,iBAAD,CAAgB7B,UAAU,6BACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aACA,kBAAC,YAAD,gBAKJ,kBAAC,YAAD,KACGoD,EAAO3F,KAAI,SAAC2B,EAAMzB,GAAP,OACV,kBAAC,WAAD,CACEyC,IAAKzC,EACLqC,UAAU,0DACVE,QAAS,WACPtD,QAAQC,IAAIuC,GACZS,EAAYT,GAEZQ,GAAe,KAIjB,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGI,UAAU,iBAAiBZ,EAAKX,iBAIzC,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGuB,UAAU,iBAAiBZ,EAAKwE,gBAQjD,kBAAC,cAAD,SAqBF,kBAAC,cAAD,KACE,kBAAC,SAAD,CACE5D,UAAU,mBACVC,OAAO,UACPC,QAAS,WACPN,GAAe,KAJnB,UASA,kBAAC,SAAD,CAAQI,UAAU,oBAAlB","file":"static/js/16.dfe893b8.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\n// import {\n//   ChatIcon,\n//   CartIcon,x\n//   MoneyIcon,\n//   PeopleIcon,\n//   ButtonsIcon,\n//   HeartIcon,\n//   EditIcon,\n//   TrashIcon,\n// } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport SelectEmployeeModal from \"../../components/Modal/SelectEmployeeModal\";\nimport SelectEmployeeModalForCalls from \"../../components/Modal/SelectEmployeeModalForCalls\";\nimport {\n  capitalize,\n  getCallStatusAsString,\n} from \"../../helpers/toolfuctions/toolfunctions\";\nimport { saveAs } from \"file-saver\";\n\nfunction EnggPriorityList() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n  //download\n  const [isDwnldModalOpen, setIsDwnldModalOpen] = useState(false);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  /////// engineer\n  const [engineer, setEngineer] = useState(null);\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 100;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  useEffect(() => {\n    (async () => {\n      if (engineer) {\n        let payload = {\n          pages: {\n            page: 1,\n            limit: 100000,\n          },\n          filters: {\n            callStatus: \"\",\n            searchquery: \"\",\n            fromDate: \"\",\n            toDate: \"\",\n            employeeId: engineer._id,\n            // servicelocation:\"Trivandrum\"\n          },\n        };\n        console.log(\"HERE\", payload);\n        try {\n          let response = await axios({\n            url: `${API}/call/${Emp.getId()}/getall`,\n            method: \"POST\",\n            data: payload,\n          });\n          console.log(response.data.out);\n          setTotalResults(response.data.total);\n          setData(response.data.out);\n          // const { total, data } = response.data;\n          // console.log(data + \"Now\");\n\n          setData(response.data.out);\n        } catch (error) {\n          throw error;\n        }\n        // console.log(engineer)\n      }\n    })();\n  }, [engineer]);\n\n  const DwnldModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isDwnldModalOpen}\n          onClose={() => setIsDwnldModalOpen(false)}\n          className=\" sdark:bg-gray-800 p-5 my-6 mx-10 px-5  bg-gray-50 text-gray-900 dark:text-white text-center  rounded-lg \"\n        >\n          <ModalHeader className=\"flex flex-row justify-between text-xl mx-10 px-10\">\n            <div className=\"text-lg\">Download Call Data?</div>\n          </ModalHeader>\n          <ModalBody>\n            <Button\n              layout=\"outline\"\n              onClick={() => {\n                downloadAssets();\n              }}\n            >\n              Download Current Engineer\n            </Button>\n          </ModalBody>\n          {/* <ModalFooter></ModalFooter> */}\n        </Modal>\n      </>\n    );\n  };\n\n  const downloadAssets = async () => {\n    let csv = `CallNo,Date,Time,Unit,Phone,Product,SerialNumber,Problem,CallStatus,AssignedTo,AssignedDate,ETA,Priority\\n`;\n\n    data.map((call, i) => {\n      csv =\n        csv +\n        `\"${call.callNo}\",\"${moment(call.date).format(\"DD-MM-YYYY\")}\",\"${moment(\n          `${\"2018-04-02\"}T${call.time}`\n        ).format(\"h:mm a\")}\",\"${call.unitName}\",\"${call.phone}\",\"${\n          call.assetId.producttype\n        }\",\"${call.assetId.product.serialno}\",\"${\n          call.problem\n        }\",\"${getCallStatusAsString(call.callStatus)}\",\"${\n          call.employeeName ? call.employeeName : \"Not Assigned\"\n        }\",\"${moment(call.assignedDate).format(\"DD-MM-YYYY\")}\",\"${\n          call.assignedETA\n        }\",\"${i + 1}\",\\n`;\n    });\n    // console.log(csv); //product.\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    saveAs(csvData, \"CallsExport.csv\");\n  };\n\n  // download funciton to get all engineers' calls\n  const downloadAllCalls = async () => {\n    let temp = [];\n\n    let payload = {\n      search: \"\",\n      limit: 1000000,\n    };\n    // here we are just getting all the employees not their calls\n    try {\n      let users = await axios({\n        url: `${API}/admin/${Emp.getId()}/getAllEmpCalls`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(users.data);\n\n      users.data.map((user) => {\n        temp.push(user);\n      });\n      // console.log(temp);\n      // setValues(temp);\n    } catch (error) {\n      throw error;\n    }\n    // console.log(temp);\n\n    // getting data of each employee\n\n    let finaldata = [];\n    for (let i = 0; i < temp.length; i++) {\n      let payloadtwo = {\n        pages: {\n          page: 1,\n          limit: 100000,\n        },\n        filters: {\n          callStatus: \"\",\n          searchquery: \"\",\n          fromDate: \"\",\n          toDate: \"\",\n          employeeId: temp[i]._id,\n          // servicelocation:\"Trivandrum\"\n        },\n      };\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payloadtwo,\n        });\n        console.log(response.data.out);\n        finaldata.push(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    // console.log(finaldata);\n    let csv = `CallNo,Date,Time,Unit,Phone,Product,SerialNumber,Problem,CallStatus,AssignedTo,AssignedDate,ETA,Priority,\\n`;\n\n    for (let j = 0; j < finaldata.length; j++) {\n      if (finaldata[j][0]) {\n        csv = csv + `${capitalize(finaldata[j][0].employeeName)},\\n`;\n      }\n\n      finaldata[j].map((call, i) => {\n        csv =\n          csv +\n          `\"${call.callNo}\",\"${moment(call.date).format(\n            \"DD-MM-YYYY\"\n          )}\",\"${moment(`${\"2018-04-02\"}T${call.time}`).format(\"h:mm a\")}\",\"${\n            call.unitName\n          }\",\"${call.phone}\",\"${call.assetId.producttype}\",\"${\n            call.assetId.product.serialno\n          }\",\"${call.problem}\",\"${getCallStatusAsString(call.callStatus)}\",\"${\n            call.employeeName ? call.employeeName : \"Not Assigned\"\n          }\",\"${moment(call.assignedDate).format(\"DD-MM-YYYY\")}\",\"${\n            call.assignedETA\n          }\",\"${i + 1}\",\\n`;\n      });\n    }\n    // console.log(csv); //product.\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    saveAs(csvData, \"CallsExport.csv\");\n  };\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Engineer Call Priority\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SelectEmployeeModalForCalls\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEmployee={setEngineer}\n      />\n      {DwnldModal()}\n      <SelectEmployeeModalForCalls />\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"flex flex-row items-center justify-start space-x-2\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <Button layout=\"outline\" onClick={() => setIsEnggModalOpen(true)}>\n            Select Engineer\n          </Button>\n          <div className=\"mx-4\">\n            <Button\n              className=\"px-12 py-2\"\n              layout=\"outline\"\n              onClick={() => {\n                setIsDwnldModalOpen(true);\n              }}\n            >\n              Export\n            </Button>\n          </div>\n          <div className=\"mx-4\">\n            <Button\n              className=\"px-12 py-2\"\n              layout=\"outline\"\n              onClick={() => {\n                // setIsDwnldModalOpen(true);\n                downloadAllCalls();\n              }}\n            >\n              Export All\n            </Button>\n          </div>\n          {/* <Button onClick={() => submitCustomer(true)}>Submit</Button> */}\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <TableCell>Call No</TableCell>\n              <TableCell>Date</TableCell>\n\n              <TableCell>Unit Name</TableCell>\n              <TableCell>Product</TableCell>\n              <TableCell>Problem</TableCell>\n\n              <TableCell>Call Status</TableCell>\n              <TableCell className=\"text-xs\">Assig. Date</TableCell>\n              {/* <TableCell>Assigned ETA</TableCell> */}\n              <TableCell>Priority</TableCell>\n              {/* <TableCell>Edit </TableCell> */}\n            </TableHeader>\n            <TableBody>\n              {engineer &&\n                data.map((item, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == item._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowId(callId._id);\n                      // setBBarOpen(1);\n                      // // console.log(\"the id is \" + call._id);\n                      // setSelectedProd(callId);\n                      // if (callId.assetId) setAssetDetails(callId.assetId);\n                      // else setAssetDetails({});\n                      // console.log(callId.assetId);\n                      // console.log(call.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{item.callNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {moment(item.date).format(\"DD/MM/YYYY\")}\n                        </span>\n                        <span className=\"text-sm\">\n                          {moment(`${\"2018-04-02\"}T${item.time}`).format(\n                            \"h:mm a\"\n                          )}\n                        </span>\n                      </div>\n                    </TableCell>\n\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">{item.unitName}</span>\n                        <span className=\"text-sm\">Ph: {item.phone}</span>\n                      </div>\n                    </TableCell>\n\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {item.assetId.producttype}\n                        </span>\n                        <span className=\"text-xs \">\n                          SL:{item.assetId.product.serialno}\n                        </span>\n                      </div>\n                    </TableCell>\n\n                    <TableCell className=\"flex flex-row \">\n                      <div className=\"flex items-center justify-center \">\n                        <div className=\"flex flex-col items-start overflow-auto text-sm w-40 \">\n                          <span className=\" \">{item.problem}</span>\n                          {item.employeeId ? (\n                            <span>Engineer: {item.employeeName}</span>\n                          ) : (\n                            <span>Engineer Not Assigned</span>\n                          )}\n                        </div>\n                      </div>\n                      {/* <span>Engineer: {call.engineer}</span> */}\n                    </TableCell>\n\n                    <TableCell className=\"text-xs  \">\n                      <div className=\" w-32 overflow-auto \">\n                        {item.callStatus == 0 ? (\n                          <span className=\" \">Pending For Allocation</span>\n                        ) : null}\n                        {item.callStatus == 1 ? (\n                          <span className=\"\">Pending for Percall Approval</span>\n                        ) : null}\n                        {item.callStatus == 2 ? (\n                          <span className=\"\">Pending for Response</span>\n                        ) : null}\n                        {item.callStatus == 3 ? (\n                          <span className=\"\">Pending for OEM Response</span>\n                        ) : null}\n                        {item.callStatus == 4 ? (\n                          <span className=\"\">Pending for 2nd Response</span>\n                        ) : null}\n                        {item.callStatus == 5 ? (\n                          <span className=\"\">Pending for Customer</span>\n                        ) : null}\n                        {item.callStatus == 6 ? (\n                          <span className=\"\">Under Observation</span>\n                        ) : null}\n                        {item.callStatus == 7 ? (\n                          <span className=\"\">Pending for Others</span>\n                        ) : null}\n                        {item.callStatus == 8 ? (\n                          <span className=\"\">Pending for Spare</span>\n                        ) : null}\n                        {item.callStatus == 9 ? (\n                          <span className=\"\">Spare in Transit</span>\n                        ) : null}\n                        {item.callStatus == 10 ? (\n                          <span className=\"\">Cancelled Calls</span>\n                        ) : null}\n                        {item.callStatus == 11 ? (\n                          <span className=\"\">Closed Calls</span>\n                        ) : null}\n                        {item.callStatus == 12 ? (\n                          <span className=\"\">Spare Taken CMRR</span>\n                        ) : null}\n                        {item.callStatus == 13 ? (\n                          <span className=\" \">\n                            Pending For Spare Collection\n                          </span>\n                        ) : null}\n                        {item.callStatus == 14 ? (\n                          <span className=\"\">Standby Given</span>\n                        ) : null}\n                        {item.callStatus == 15 ? (\n                          <Badge>Pending For Verification</Badge>\n                        ) : null}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {moment(item.assignedDate).format(\"DD-MM-YYYY\")}\n                        </span>\n                        <span className=\"text-xs\">\n                          {\" \"}\n                          Time: {item.assignedETA}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>{i + 1}</TableCell>\n                    {/* <TableCell>\n                    \n                      \n                        <div className=\"px-2 py-2 dark:border-purple-400 border-purple-600 dark:bg-gray-700 bg-purple-100 inline-block rounded-full dark:text-purple-400 text-purple-700\">\n                          \n                          <Button\n                            layout=\"link\"\n                            size=\"icon\"\n                            aria-label=\"Edit\"\n                            onClick={() => {\n                              setIsEnggModalOpen(true);\n                              setAssignedETA(item.assignedETA);\n                              setAssignedDate(item.assignedDate);\n                            }}\n                            className=\"rounded-full mx-2 \"\n                          >\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                          </Button>\n                        </div>\n                      \n                  </TableCell> */}\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default EnggPriorityList;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(true);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function EngineerListModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEngineer,\n  nextModal,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAll`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              {/* <TableCell>Email</TableCell> */}\n              <TableCell>Employee ID</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  setEngineer({\n                    _id: user._id,\n                    enggName: user.employeeName,\n                  });\n                  setIsModalOpen(false);\n                  nextModal(true);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeID}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Assign Engineer</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function SelectEmployeeModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEmployee,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAllEmpData`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              <TableCell>Email</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  console.log(user);\n                  setEmployee(user);\n\n                  setIsModalOpen(false);\n                  //   nextModal(true)\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.email}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Select Employee</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function SelectEmployeeModalForCalls({\n  isModalOpen,\n  setIsModalOpen,\n  setEmployee,\n}) {\n  const [values, setValues] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    // console.log(\"HERERRE\");\n    async function getter() {\n      let payload = {\n        search: search,\n        limit: 5,\n      };\n      // console.log(\"payload\", payload);\n\n      // here we are just getting all the employees not their calls\n      try {\n        let users = await Axios({\n          url: `${API}/admin/${Emp.getId()}/getAllEmpCalls`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        // console.log(temp);\n        setValues(temp);\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    getter();\n  }, [search]);\n\n  const userTable = () => {\n    return (\n      <div>\n        <form\n          className=\"mb-2\"\n          onSubmit={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <input\n            className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n            placeholder=\"Search Customers\"\n            onChange={(e) => {\n              setSearch(e.target.value);\n            }}\n          />\n        </form>\n        <TableContainer className=\" max-h-64 overflow-scroll\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Name</TableCell>\n                <TableCell>Email</TableCell>\n                {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {values.map((user, i) => (\n                <TableRow\n                  key={i}\n                  className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                  onClick={() => {\n                    console.log(user);\n                    setEmployee(user);\n\n                    setIsModalOpen(false);\n                    //   nextModal(true)\n                  }}\n                >\n                  <TableCell>\n                    <div>\n                      <div>\n                        <p className=\"font-semibold\">{user.employeeName}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div>\n                      <div>\n                        <p className=\"font-semibold\">{user.email}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n          </TableFooter>\n        </TableContainer>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen}>\n        <ModalHeader>Select Employee</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n            }}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}