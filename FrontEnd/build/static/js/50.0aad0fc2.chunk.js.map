{"version":3,"sources":["pages/Customers/UnitAsset.js","components/Modal/UnitListModal.js"],"names":["UnitAsset","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","useState","activerowid","setActiveRowId","useParams","unitid","id","accountid","page","setPage","data","setData","isOpen","setIsOpen","isOpenTwo","setIsOpenTwo","refresh","setRefresh","setDisabler","Business","product","setProduct","_id","unitName","customerName","accountName","selectedprod","setSelectedProd","searchtype","setSearchType","searchlabel","setSearchLabel","searchquery","setSearchQuery","totalResults","setTotalResults","useEffect","a","payload","pages","limit","filters","business","producttype","unitId","axios","url","API","Emp","getId","method","response","console","log","out","total","className","class","onClick","aria-label","aria-haspopup","xmlns","viewBox","d","onClose","onSubmit","e","preventDefault","value","onChange","target","placeholder","map","user","i","key","type","serialno","moment","contractfrom","format","contractto","ponumber","podate","resultsPerPage","label","p","UnitListModal","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","name","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/50.0aad0fc2.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\n\nfunction UnitAsset() {\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n  // Url params------------\n  let { id, accountid, unitid } = useParams();\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(0);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          business: Business,\n          producttype: product,\n          //   customer: customer,\n          //   account: account,\n          unitId: unitid,\n          //   customerId: customer._id,\n          //   accountId: account._id,\n          searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      try {\n        let response = await axios({\n          url: `${API}/asset/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n        setData(response.data.out);\n        setTotalResults(response.data.total);\n      } catch (error) {\n        throw error;\n      }\n    })();\n\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      <div className=\"mb-64\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            {/* <div class=\"relative  \">\n              <button\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                onClick={() => {\n                  setIsModalOpen(!isModalOpen);\n                }}\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                Pick Customer\n              </button>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div> */}\n\n            {/* <div class=\"relative mx-5 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={Business}\n                onChange={(e) => {\n                  setBusiness(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Business Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"AMC\">AMC</option>\n                <option value=\"Warranty\">Warranty</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div> */}\n            {/* ---------------------------Product Drop Down-------------------------------------- */}\n            <div className=\"relative \">\n              <button\n                onClick={() => {\n                  setIsOpen(!isOpen);\n                }}\n                className=\"shadow-md z-50 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {product ? product : \"Pick Product\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"\");\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Console\");\n                  }}\n                >\n                  <span>Console</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"DMP\");\n                  }}\n                >\n                  <span>DMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Inkjet\");\n                  }}\n                >\n                  <span>Inkjet</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"KVM\");\n                  }}\n                >\n                  <span>KVM</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laptop\");\n                  }}\n                >\n                  <span>Laptop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laser\");\n                  }}\n                >\n                  <span>Laser</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"LMP\");\n                  }}\n                >\n                  <span>LMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Module\");\n                  }}\n                >\n                  <span>Module</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Router\");\n                  }}\n                >\n                  <span>Router</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Scanner\");\n                  }}\n                >\n                  <span>Scanner</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Server\");\n                  }}\n                >\n                  <span>Server</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Desktop\");\n                  }}\n                >\n                  <span>Desktop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Storage\");\n                  }}\n                >\n                  <span>Storage</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Switch\");\n                  }}\n                >\n                  <span>Switch</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"UPS\");\n                  }}\n                >\n                  <span>UPS</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Others\");\n                  }}\n                >\n                  <span>Others</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n\n            {/* -------------------------------Search Type--------------------------------------- */}\n            <div className=\"relative \">\n              <button\n                onClick={() => {\n                  setIsOpenTwo(!isOpenTwo);\n                }}\n                className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {searchtype ? searchlabel : \"Pick Search Type\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpenTwo} onClose={() => setIsOpenTwo(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"\");\n                    setSearchLabel(\"\");\n                    setDisabler(true);\n                    setSearchQuery(\"\");\n                    setRefresh(!refresh);\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"keyboardsno\");\n                    setSearchLabel(\"Keyboard Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Keyboard Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"mousesno\");\n                    setSearchLabel(\"Mouse Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Mouse Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"motherboardsno\");\n                    setSearchLabel(\"Motherboard Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Motherboard Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"monitorsno\");\n                    setSearchLabel(\"Monitor Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Monitor Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"hddsno\");\n                    setSearchLabel(\"HDD Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>HDD Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"cpusno\");\n                    setSearchLabel(\"CPU Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>CPU Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"ramsno\");\n                    setSearchLabel(\"Ram Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>RAM Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"smpssno\");\n                    setSearchLabel(\"SMPS Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>SMPS Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"fansno\");\n                    setSearchLabel(\"Fan Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Fan Serial</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpenTwo(false);\n                    setSearchType(\"opticaldrivesno\");\n                    setSearchLabel(\"Optical Drive Serial\");\n                    setDisabler(false);\n                  }}\n                >\n                  <span>Optical Drive Serial</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n          {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n          {/* <div className=\"my-4 flex \">\n            <div class=\"relative \">\n              <select\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                <option value=\"TIME_ASC\">Time(Latest)</option>\n                <option value=\"TIME_DESC\">Time(Oldest)</option>\n                <option value=\"NAME_ASC\">Name(A-Z)</option>\n                <option value=\"NAME_DESC\">Name(Z-A)</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div> */}\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Customer</TableCell>\n                <TableCell>Unit</TableCell>\n                <TableCell>Business</TableCell>\n                <TableCell>Product</TableCell>\n                <TableCell>Product Serial</TableCell>\n                <TableCell>Contract From</TableCell>\n                <TableCell>Contract To</TableCell>\n                <TableCell>Purchase Number</TableCell>\n                <TableCell>Purchase Date</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(user._id);\n                    // console.log(\"the id is \" + user._id);\n                    setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.customerName}</p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.business == \"AMC\" ? \"primary\" : \"success\"}\n                    >\n                      {user.business}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.producttype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.product.serialno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.contractfrom).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.contractto).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.ponumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.podate).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default UnitAsset;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(true);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}