{"version":3,"sources":["pages/Calls/UpdateInvCall.js"],"names":["UpdateInvCall","movehistory","useHistory","params","useParams","useContext","TopBarContext","setTopHeading","topheading","id","assetid","callid","useState","submitModal","setSubmitModal","sparemodal","setSpareModal","historyModalOpen","setHistoryModalOpen","assethistoryModalOpen","setAssetHistoryModalOpen","notswapModalOpen","setNotSwapModalOpen","spareStatus","setSpareStatus","_id","unitName","unit","setUnit","customerName","customer","setCustomer","accountName","account","setAccount","setProductID","brand","setBrand","model","setModel","serialno","setSerialNo","os","setOs","cpuname","cpusno","setCpu","ramname","ramsno","ram","setram","hddname","hddsno","hdd","sethdd","smpsname","smpssno","smps","setsmps","fanname","fansno","setfan","motherboardname","motherboardsno","motherboard","setmotherboard","opticaldrivename","opticaldrivesno","setopticaldrive","keyboardname","keyboardsno","kbd","setkbd","mousename","mousesno","mouse","setmouse","monitorname","monitorsno","monitor","setmonitor","gcardname","gcardsno","setgcard","enetcardname","enetcardsno","setenetcard","serialcardname","serialcardsno","setserialcard","parallelcardname","parallelcardsno","setparallelcard","hbacardname","hbacardsno","sethbacard","raidcontrollername","raidcontrollersno","setraidcontroller","tapecontrollername","tapecontrollersno","settapecontroller","othersname","otherssno","setothers","Business","setBusiness","servicelocation","setServiceLocation","POnumber","setPOnumber","setPOdate","setContractFrom","setContractTo","setBillingFrom","setBillingTo","setAMCRate","setGSTAMOUNT","setNetAmount","assethistory","setAssetHistory","product","setProduct","selectedItem","setSelectedItem","inventdata","setInventData","addedinv","setAddedInv","name","sno","isImgUploadModal","setIsImgUploadModal","imageUploadMessage","setImageUploadMessage","isImgUploadMenuModal","setIsImgUploadMenuModal","imgFile","setImgFile","imageUploadMenuMessage","imageIndex","goodSpareImgUrl","setGoodSpareImgUrl","defectiveImgUrl","setDefectiveImgUrl","setImgUrl","ccfrImgUrl","setCcfrImgUrl","isHistoryImgViewModal","setIsHistoryImgViewModal","goodSpareHistoryImg","setGoodSpareHistoryImg","defectiveHistoryImg","setDefectiveHistoryImg","ccfrHistoryImg","setCcfrHistoryImg","item","photoUpload","photo","cb","console","log","data","FormData","append","axios","post","API","headers","accept","_boundary","then","response","status","error","code","fileName","location","catch","useEffect","Date","page","invsearch","setInvSearch","callAttendDate","setCallAttendDate","startOfService","setStartOfService","endOfService","setEndOfService","actionTaken","setActionTaken","a","payload","pages","limit","filters","type","toLowerCase","condition","searchquery","url","Emp","getId","method","out","thegetter","getAsset","res","asset","history","producttype","customerId","accountId","business","ponumber","amcrate","moment","podate","format","contractfrom","contractto","billingfrom","billingto","gstamount","netamount","cpu","length","fan","opticaldrive","keyboard","gcard","enetcard","netcardname","serialcard","parallelcard","hbacard","raidcontroller","tapecontroller","others","call","setCall","getCall","getAttachedInv","temp","i","attachedinv","currid","currinv","push","handleUpdate","assignedDate","assignedETA","alert","tempcallstatus","callStatus","callinvids","handleInventoryUpdate","newcallhistory","date","engineer","employeeName","note","update","$push","inventoryid","callNo","calldate","assetserial","capitalize","existUrl","newUrl","existserial","newserial","payloadtwo","isOpen","onClose","className","map","entry","key","onClick","layout","HistoryModal","AssetHistoryModal","src","width","height","onChange","e","callback","target","files","photoUploadHandler","message","href","contactPerson","state","pincode","locationType","district","problem","value","disabled","selected","onSubmit","preventDefault","placeholder","user"],"mappings":"uUAopEeA,UA9mEf,WAEE,IAAIC,EAAcC,cACZC,EAASC,cAHQ,EAIeC,qBAAWC,KAA7BC,GAJG,EAIfC,WAJe,EAIHD,eAEdE,EAAKN,EAAOO,QACZC,EAASR,EAAOQ,OAPC,EAUeC,oBAAS,GAVxB,mBAUhBC,EAVgB,KAUHC,EAVG,OAWaF,oBAAS,GAXtB,mBAWhBG,EAXgB,KAWJC,EAXI,OAYyBJ,oBAAS,GAZlC,mBAYhBK,EAZgB,KAYEC,EAZF,OAamCN,oBAAS,GAb5C,mBAahBO,EAbgB,KAaOC,EAbP,OAcyBR,oBAAS,GAdlC,mBAchBS,EAdgB,KAcEC,EAdF,OAeeV,mBAAS,IAfxB,mBAehBW,EAfgB,KAeHC,EAfG,OAgBaZ,mBAAS,IAhBtB,gCAmBCA,mBAAS,CAAEa,IAAK,GAAIC,SAAU,MAnB/B,mBAmBhBC,EAnBgB,KAmBVC,EAnBU,OAoBShB,mBAAS,CAAEa,IAAK,GAAII,aAAc,KApB3C,mBAoBhBC,EApBgB,KAoBNC,GApBM,QAqBOnB,mBAAS,CAAEa,IAAK,GAAIO,YAAa,KArBxC,qBAqBhBC,GArBgB,MAqBPC,GArBO,SAwBWtB,mBAAS,IAxBpB,qBAwBLuB,IAxBK,gBAyBGvB,mBAAS,IAzBZ,qBAyBhBwB,GAzBgB,MAyBTC,GAzBS,SA0BGzB,mBAAS,IA1BZ,qBA0BhB0B,GA1BgB,MA0BTC,GA1BS,SA2BS3B,mBAAS,IA3BlB,qBA2BhB4B,GA3BgB,MA2BNC,GA3BM,SA4BH7B,mBAAS,IA5BN,qBA4BhB8B,GA5BgB,MA4BZC,GA5BY,SA6BD/B,mBAAS,CAAC,CAAEgC,QAAS,GAAIC,OAAQ,MA7BhC,qBA6BXC,IA7BW,gBA8BDlC,mBAAS,CAAC,CAAEmC,QAAS,GAAIC,OAAQ,MA9BhC,qBA8BhBC,GA9BgB,MA8BXC,GA9BW,SA+BDtC,mBAAS,CAAC,CAAEuC,QAAS,GAAIC,OAAQ,MA/BhC,qBA+BhBC,GA/BgB,MA+BXC,GA/BW,SAgCC1C,mBAAS,CAAC,CAAE2C,SAAU,GAAIC,QAAS,MAhCpC,qBAgChBC,GAhCgB,MAgCVC,GAhCU,SAiCD9C,mBAAS,CAAC,CAAE+C,QAAS,GAAIC,OAAQ,MAjChC,qBAiCXC,IAjCW,gBAkCejD,mBAAS,CAC7C,CAAEkD,gBAAiB,GAAIC,eAAgB,MAnClB,qBAkChBC,GAlCgB,MAkCHC,GAlCG,SAqCiBrD,mBAAS,CAC/C,CAAEsD,iBAAkB,GAAIC,gBAAiB,MAtCpB,qBAqCFC,IArCE,gBAwCDxD,mBAAS,CAAC,CAAEyD,aAAc,GAAIC,YAAa,MAxC1C,qBAwChBC,GAxCgB,MAwCXC,GAxCW,SAyCG5D,mBAAS,CAAC,CAAE6D,UAAW,GAAIC,SAAU,MAzCxC,qBAyChBC,GAzCgB,MAyCTC,GAzCS,SA0COhE,mBAAS,CAAC,CAAEiE,YAAa,GAAIC,WAAY,MA1ChD,qBA0ChBC,GA1CgB,MA0CPC,GA1CO,SA2CGpE,mBAAS,CAAC,CAAEqE,UAAW,GAAIC,SAAU,MA3CxC,qBA2CTC,IA3CS,gBA4CSvE,mBAAS,CACvC,CAAEwE,aAAc,GAAIC,YAAa,MA7CZ,qBA4CNC,IA5CM,gBA+Ca1E,mBAAS,CAC3C,CAAE2E,eAAgB,GAAIC,cAAe,MAhDhB,qBA+CJC,IA/CI,gBAkDiB7E,mBAAS,CAC/C,CAAE8E,iBAAkB,GAAIC,gBAAiB,MAnDpB,qBAkDFC,IAlDE,gBAqDOhF,mBAAS,CAAC,CAAEiF,YAAa,GAAIC,WAAY,MArDhD,qBAqDPC,IArDO,gBAsDqBnF,mBAAS,CACnD,CAAEoF,mBAAoB,GAAIC,kBAAmB,MAvDxB,qBAsDAC,IAtDA,gBAyDqBtF,mBAAS,CACnD,CAAEuF,mBAAoB,GAAIC,kBAAmB,MA1DxB,qBAyDAC,IAzDA,gBA4DKzF,mBAAS,CAAC,CAAE0F,WAAY,GAAIC,UAAW,MA5D5C,qBA4DRC,IA5DQ,gBA+DS5F,mBAAS,IA/DlB,qBA+DhB6F,GA/DgB,MA+DNC,GA/DM,SAgEuB9F,mBAAS,IAhEhC,qBAgEhB+F,GAhEgB,MAgECC,GAhED,SAiEShG,mBAAS,IAjElB,qBAiEhBiG,GAjEgB,MAiENC,GAjEM,SAkEKlG,mBAAS,IAlEd,qBAkERmG,IAlEQ,gBAmEiBnG,mBAAS,IAnE1B,qBAmEFoG,IAnEE,gBAoEapG,mBAAS,IApEtB,qBAoEJqG,IApEI,gBAqEerG,mBAAS,IArExB,qBAqEHsG,IArEG,gBAsEWtG,mBAAS,IAtEpB,qBAsELuG,IAtEK,gBAuEOvG,mBAAS,IAvEhB,qBAuEPwG,IAvEO,gBAwEDxG,mBAAS,IAxER,qCAyEWA,mBAAS,KAzEpB,qBAyELyG,IAzEK,gBA0EWzG,mBAAS,IA1EpB,qBA0EL0G,IA1EK,gBA2EiB1G,mBAAS,IA3E1B,qBA2EhB2G,GA3EgB,MA2EFC,GA3EE,SA8EO5G,mBAAS,UA9EhB,qBA8EhB6G,GA9EgB,MA8EPC,GA9EO,SAiFW9G,mBAAS,IAjFpB,qCAoFeA,oBAAS,IApFxB,qCAwFeA,mBAAS,EAAE,KAxF1B,qCA6FiBA,mBAAS,KA7F1B,qBA6FhB+G,GA7FgB,MA6FFC,GA7FE,SA8FahH,mBAAS,CAAC,KA9FvB,qBA8FhBiH,GA9FgB,MA8FJC,GA9FI,SA+FSlH,mBAAS,IA/FlB,qBA+FhBmH,GA/FgB,MA+FNC,GA/FM,SAgGWpH,mBAAS,CACzC,CACEqH,KAAM,eACNC,IAAK,kBAnGc,qCAsGatH,mBAAS,CAC3C,CACEqH,KAAM,eACNC,IAAK,mBAzGc,qCA8GyBtH,oBAAS,IA9GlC,qBA8GhBuH,GA9GgB,MA8GEC,GA9GF,SA+G6BxH,mBAAS,IA/GtC,qBA+GhByH,GA/GgB,MA+GIC,GA/GJ,SAgHiC1H,oBAAS,GAhH1C,qBAgHhB2H,GAhHgB,MAgHMC,GAhHN,SAkHO5H,mBAAS,MAlHhB,qBAkHhB6H,GAlHgB,MAkHPC,GAlHO,SAmHqC9H,mBAAS,IAnH9C,qBAmHhB+H,GAnHgB,gBAoHa/H,mBAAS,KApHtB,qBAoHhBgI,GApHgB,gBAsHuBhI,mBAAS,CAAC,MAtHjC,qBAsHhBiI,GAtHgB,MAsHCC,GAtHD,SAuHuBlI,mBAAS,CAAC,KAvHjC,qBAuHhBmI,GAvHgB,MAuHCC,GAvHD,SAwHKpI,mBAAS,CAAC,KAxHf,qBAwHRqI,IAxHQ,gBAyHarI,mBAAS,IAzHtB,qBAyHhBsI,GAzHgB,MAyHJC,GAzHI,SA2HmCvI,oBAAS,GA3H5C,qBA2HhBwI,GA3HgB,MA2HOC,GA3HP,SA4H+BzI,mBAAS,IA5HxC,qBA4HhB0I,GA5HgB,MA4HKC,GA5HL,SA6H+B3I,mBAAS,IA7HxC,qBA6HhB4I,GA7HgB,MA6HKC,GA7HL,SA8HqC7I,mBAAS,SA9H9C,qCA+HqBA,mBAAS,KA/H9B,qBA+HhB8I,GA/HgB,MA+HAC,GA/HA,SA4IyB/I,mBAAS,CAAC,CAAEgJ,KAAM,UA5I3C,qBAkJjBC,IAlJiB,YAkJH,SAACC,EAAOC,GAE1B,GADAC,QAAQC,IAAIH,GACC,MAATA,EAGF,OAFAxB,GAAsB,2BACtBF,IAAoB,GAGtBE,GAAsB,cACtBF,IAAoB,GAEpB,IAAM8B,EAAO,IAAIC,SACjBD,EAAKE,OAAO,cAAeN,EAAOA,EAAM7B,MAGxCoC,IACGC,KADH,UACWC,MADX,sBACoCL,EAAM,CACtCM,QAAS,CACPC,OAAQ,mBACR,kBAAmB,iBACnB,eAAe,iCAAf,OAAiDP,EAAKQ,cAGzDC,MAAK,SAACC,GACL,GAAI,MAAQA,EAASC,OAEnB,GAAID,EAASV,KAAKY,MACZ,oBAAsBF,EAASV,KAAKY,MAAMC,MAC5Cf,QAAQC,IAAI,gBAAiB,OAC7B3B,GAAsB,uBACtBF,IAAoB,KAEpB4B,QAAQC,IAAIW,EAASV,MAErB5B,GAAsB,mCAEnB,CAEL,IAAI0C,EAAWJ,EAASV,KACxBF,QAAQC,IAAI,WAAYe,EAASC,UACjCjB,QAAQC,IAAI,iBACZ3B,GAAsB,kBACtBF,IAAoB,GACpB2B,EAAGa,EAASV,KAAKe,cAItBC,OAAM,SAACJ,GAENxC,GAAsB,iBACtBF,IAAoB,GACpB4B,QAAQC,IAAIa,QAkPlBK,qBAAU,WAER,OADA5K,EAAc,yBACP,WACLA,EAAc,OAEf,IA3boB,OA+bCK,mBAAS,IA/bV,qCAgcSA,mBAAS,KAhclB,qCAicaA,mBAAS,KAjctB,qCAkcGA,mBAAS,KAlcZ,qCAmcCA,mBAAS,IAAIwK,OAncd,qCAocWxK,mBAAS,KApcpB,qCAqcCA,mBAAS,IArcV,qBAqchByK,GArcgB,gBAwcWzK,mBAAS,KAxcpB,qBAwchB0K,GAxcgB,MAwcLC,GAxcK,SAycqB3K,mBAAS,IAzc9B,qCA0caA,mBAAS,IA1ctB,qCA6cqBA,mBAAS,KA7c9B,qBA6chB4K,GA7cgB,MA6cAC,GA7cA,SA8cqB7K,mBAAS,IA9c9B,qBA8chB8K,GA9cgB,MA8cAC,GA9cA,SA+ciB/K,mBAAS,IA/c1B,qBA+chBgL,GA/cgB,MA+cFC,GA/cE,SAgdejL,mBAAS,IAhdxB,qBAgdhBkL,GAhdgB,MAgdHC,GAhdG,oDAydvB,8BAAAC,EAAA,6DAEEhC,QAAQC,IAAI,UAAWtC,IACnBsE,EAAU,CACZC,MAAO,CACLb,KAAMA,GACNc,MAAO,GAETC,QAAS,CACPC,KAAM1E,GAAa2E,cACnBrB,SAAU,GACVsB,UAAW,GAEXC,YAAalB,KAbnB,kBAkByBjB,IAAM,CACzBoC,IAAI,GAAD,OAAKlC,MAAL,sBAAsBmC,IAAIC,QAA1B,WACHC,OAAQ,OACR1C,KAAM+B,IArBZ,OAkBQrB,EAlBR,OAuBIZ,QAAQC,IAAI,mBAAoBW,EAASV,KAAK2C,KAC9C/E,GAAc8C,EAASV,KAAK2C,KAxBhC,wHAzduB,sBAmdvB1B,qBAAU,YAnda,oCAodrB2B,KACC,CAACnF,GAAc2D,KAkClB,IA+aMyB,GAAQ,uCAAG,8BAAAf,EAAA,+EAEG3B,IAAMC,KAAN,UAAcC,MAAd,kBAA2BmC,IAAIC,QAA/B,YAAkD,CAChElM,GAAIA,IAHO,OAETuM,EAFS,OAKbhD,QAAQC,IAAI,QAAS+C,EAAI9C,MACrB+C,EAAQD,EAAI9C,KAChB/H,GAAa8K,EAAMxF,QAAQhG,KAC3B+F,GAAgByF,EAAMxF,QAAQyF,SAE9BtG,GAAmBqG,EAAMtG,iBACzBe,GAAWuF,EAAME,aACjBvL,EAAQ,CAAEH,IAAKhB,EAAIiB,SAAUuL,EAAMvL,WACnCK,GAAY,CAAEN,IAAKwL,EAAMG,WAAYvL,aAAcoL,EAAMpL,eACzDK,GAAW,CAAET,IAAKwL,EAAMI,UAAWrL,YAAaiL,EAAMjL,cAKtD0E,GAAYuG,EAAMK,UAClBxG,GAAYmG,EAAMM,UAClBnG,GAAW6F,EAAMO,SAEjBzG,GAAU0G,IAAOR,EAAMS,QAAQC,OAAO,eACtC3G,GAAgByG,IAAOR,EAAMW,cAAcD,OAAO,eAClD1G,GAAcwG,IAAOR,EAAMY,YAAYF,OAAO,eAC9CzG,GAAeuG,IAAOR,EAAMa,aAAaH,OAAO,eAChDxG,GAAasG,IAAOR,EAAMc,WAAWJ,OAAO,eAE5CtG,GAAa4F,EAAMe,WACnB1G,GAAa2F,EAAMgB,WAInB5L,GAAS4K,EAAMxF,QAAQrF,OACvBG,GAAS0K,EAAMxF,QAAQnF,OACvBG,GAAYwK,EAAMxF,QAAQjF,UAC1BG,GAAMsK,EAAMxF,QAAQ/E,IACpBI,GAAOmK,EAAMxF,QAAQyG,KACrBhL,GAAO+J,EAAMxF,QAAQxE,KACW,GAA5BgK,EAAMxF,QAAQpE,IAAI8K,OAAa7K,GAAO,CAAC,CAAEH,QAAS,GAAIC,OAAQ,MAC7DE,GAAO2J,EAAMxF,QAAQpE,KACO,GAA7B4J,EAAMxF,QAAQhE,KAAK0K,OACrBzK,GAAQ,CAAC,CAAEH,SAAU,GAAIC,QAAS,MAC/BE,GAAQuJ,EAAMxF,QAAQhE,MACK,GAA5BwJ,EAAMxF,QAAQ2G,IAAID,OAAatK,GAAO,CAAC,CAAEF,QAAS,GAAIC,OAAQ,MAC7DC,GAAOoJ,EAAMxF,QAAQ2G,KACc,GAApCnB,EAAMxF,QAAQzD,YAAYmK,OAC5BlK,GAAe,CAAC,CAAEH,gBAAiB,GAAIC,eAAgB,MACpDE,GAAegJ,EAAMxF,QAAQzD,aACO,GAArCiJ,EAAMxF,QAAQ4G,aAAaF,OAC7B/J,GAAgB,CAAC,CAAEF,iBAAkB,GAAIC,gBAAiB,MACvDC,GAAgB6I,EAAMxF,QAAQ4G,cACE,GAAjCpB,EAAMxF,QAAQ6G,SAASH,OACzB3J,GAAO,CAAC,CAAEH,aAAc,GAAIC,YAAa,MACtCE,GAAOyI,EAAMxF,QAAQ6G,UACQ,GAA9BrB,EAAMxF,QAAQ9C,MAAMwJ,OACtBvJ,GAAS,CAAC,CAAEH,UAAW,GAAIC,SAAU,MAClCE,GAASqI,EAAMxF,QAAQ9C,OACQ,GAAhCsI,EAAMxF,QAAQ1C,QAAQoJ,OACxBnJ,GAAW,CAAC,CAAEH,YAAa,GAAIC,WAAY,MACxCE,GAAWiI,EAAMxF,QAAQ1C,SACI,GAA9BkI,EAAMxF,QAAQ8G,MAAMJ,OACtBhJ,GAAS,CAAC,CAAEF,UAAW,GAAIC,SAAU,MAClCC,GAAS8H,EAAMxF,QAAQ8G,OACS,GAAjCtB,EAAMxF,QAAQ+G,SAASL,OACzB7I,GAAY,CAAC,CAAEmJ,YAAa,GAAIpJ,YAAa,MAC1CC,GAAY2H,EAAMxF,QAAQ+G,UACQ,GAAnCvB,EAAMxF,QAAQiH,WAAWP,OAC3B1I,GAAc,CAAC,CAAEF,eAAgB,GAAIC,cAAe,MACjDC,GAAcwH,EAAMxF,QAAQiH,YAEQ,GAArCzB,EAAMxF,QAAQkH,aAAaR,OAC7BvI,GAAgB,CAAC,CAAEF,iBAAkB,GAAIC,gBAAiB,MACvDC,GAAgBqH,EAAMxF,QAAQkH,cAEC,GAAhC1B,EAAMxF,QAAQmH,QAAQT,OACxBpI,GAAW,CAAC,CAAEF,YAAa,GAAIC,WAAY,MACxCC,GAAWkH,EAAMxF,QAAQmH,SAEa,GAAvC3B,EAAMxF,QAAQoH,eAAeV,OAC/BjI,GAAkB,CAAC,CAAEF,mBAAoB,GAAIC,kBAAmB,MAC7DC,GAAkB+G,EAAMxF,QAAQoH,gBAEM,GAAvC5B,EAAMxF,QAAQqH,eAAeX,OAC/B9H,GAAkB,CAAC,CAAEF,mBAAoB,GAAIC,kBAAmB,MAC7DC,GAAkB4G,EAAMxF,QAAQqH,gBAEF,GAA/B7B,EAAMxF,QAAQsH,OAAOZ,OACvB3H,GAAU,CAAC,CAAEF,WAAY,GAAIC,UAAW,MACrCC,GAAUyG,EAAMxF,QAAQsH,QA1FhB,kDA4Fb/E,QAAQC,IAAI,kBAAZ,MA5Fa,0DAAH,qDAt6BS,GAwgCCrJ,mBAAS,IAxgCV,qBAwgChBoO,GAxgCgB,MAwgCVC,GAxgCU,MA0gCjBC,GAAO,uCAAG,4BAAAlD,EAAA,+EAEI3B,IAAMC,KAAN,UAAcC,MAAd,iBAA0BmC,IAAIC,QAA9B,YAAiD,CAC/DlM,GAAIE,IAHM,OAERqM,EAFQ,OAKZhD,QAAQC,IAAI,OAAQ+C,EAAI9C,MACxB+E,GAAQjC,EAAI9C,MANA,gDAQZF,QAAQC,IAAI,kBAAZ,MARY,yDAAH,qDAYPkF,GAAc,uCAAG,kCAAAnD,EAAA,+DAGnBhC,QAAQC,IAAI+E,IACRI,EAAO,GACFC,EAAI,EALM,YAKHA,EAAIL,GAAKM,YAAYnB,QALlB,wBAMboB,EAASP,GAAKM,YAAYD,GANb,SAOGhF,IAAMC,KAAN,UACfC,MADe,sBACEmC,IAAIC,QADN,YAElB,CACElM,GAAI8O,IAVS,OAObC,EAPa,OAejBJ,EAAKK,KAAKD,EAAQtF,MAfD,QAK0BmF,IAL1B,uBAiBnBrH,GAAYoH,GAjBO,kDAmBnBpF,QAAQC,IAAI,kBAAZ,MAnBmB,0DAAH,qDAuBpBkB,qBAAU,WACR4B,KACAmC,OACC,IAEH/D,qBAAU,WACRgE,OACC,CAACH,KAIJ,IAgFMU,GAAY,uCAAG,oCAAA1D,EAAA,2DAEC,IAAlBR,IACkB,IAAlBE,IACe,IAAfI,IACA2B,IAAOuB,GAAKW,cAAchC,OAAO,cAC/BF,IAAOjC,IAAgBmC,OAAO,eAChC/B,GAAeF,IACdsD,GAAKY,YAAclE,IAClB+B,IAAOuB,GAAKW,cAAchC,OAAO,eAC/BF,IAAOjC,IAAgBmC,OAAO,eACd,IAAlBjC,IAXe,uBAcjBmE,MAAM,4DAdW,0BAwCfC,EAAiB,GAEE,GAAnBd,GAAKe,aACPD,EAAiB,0BAEI,GAAnBd,GAAKe,aACPD,EAAiB,gCAEI,GAAnBd,GAAKe,aACPD,EAAiB,wBAEI,GAAnBd,GAAKe,aACPD,EAAiB,4BAEI,GAAnBd,GAAKe,aACPD,EAAiB,4BAEI,GAAnBd,GAAKe,aACPD,EAAiB,wBAEI,GAAnBd,GAAKe,aACPD,EAAiB,qBAEI,GAAnBd,GAAKe,aACPD,EAAiB,sBAEI,GAAnBd,GAAKe,aACPD,EAAiB,qBAEI,GAAnBd,GAAKe,aACPD,EAAiB,oBAEI,IAAnBd,GAAKe,aACPD,EAAiB,mBAEI,IAAnBd,GAAKe,aACPD,EAAiB,gBAEI,IAAnBd,GAAKe,aACPD,EAAiB,oBAEI,IAAnBd,GAAKe,aACPD,EAAiB,gCAEI,IAAnBd,GAAKe,aACPD,EAAiB,iBAEI,IAAnBd,GAAKe,aACPD,EAAiB,4BAKfE,EAAa,GACRX,EAAI,EA9FM,aA8FHA,EAAItH,GAASoG,QA9FV,kCA+FX8B,GAAsBZ,GA/FX,QAgGjBW,EAAWP,KAAK1H,GAASsH,GAAG5N,KAhGX,QA8FkB4N,IA9FlB,+BAqGfa,EAAiB,CACnBC,KAAM1C,MAASE,SACfoC,WAAYf,GAAKe,WACjBK,SAAUpB,GAAKqB,aACf7E,eAAgBA,GAChBE,eAAgBA,GAChBE,aAAcA,GACd0E,KAAK,0BAAD,OAA4BR,GAChChE,YAAaA,GACb5C,WAAYA,IAIV+C,EAAU,CACZxL,GAAIuO,GAAKvN,IACT8O,OAAQ,CACNR,WAAYf,GAAKe,WACjBT,YAAaU,EAKbQ,MAAO,CAAEtD,QAASgD,KAGtBlG,QAAQC,IAAIgC,GA9HO,oBAiII5B,IAAM,CACzBoC,IAAI,GAAD,OAAKlC,MAAL,iBAAiBmC,IAAIC,QAArB,eACHC,OAAQ,OACR1C,KAAM+B,IApIS,eAsIjBjC,QAAQC,IAAI,WAtIK,sEA4InBnJ,GAAe,GA5II,2DAAH,qDAiJZmP,GAAqB,uCAAG,WAAOZ,GAAP,mBAAArD,EAAA,6DACxBC,EAAU,CACZwE,YAAa1I,GAASsH,GAAG5N,IACzBd,OAAQqO,GAAK0B,OACbC,SAAU3B,GAAKmB,KAEf5D,UAAWxE,GAASsH,GAAG9C,UACvB5F,gBAAiBA,GACjBiK,YAAa/J,IARa,kBAYPwD,IAAM,CACvBoC,IAAI,GAAD,OAAKlC,MAAL,iBAAiBmC,IAAIC,QAArB,kBACHC,OAAQ,OACR1C,KAAM+B,IAfkB,wFA2BxBiE,EAAiB,CACnBC,KAAM1C,MAASE,SACfoC,WAAYf,GAAKe,WACjBK,SAAUpB,GAAKqB,aACf7E,eAAgBA,GAChBE,eAAgBA,GAChBE,aAAcA,GACd0E,KAAK,GAAD,OAAKO,qBAAW9I,GAASsH,GAAGhD,MAA5B,YAAqCwE,qBACvC9I,GAASsH,GAAGpH,MADV,aAEE4I,qBAAW9I,GAASsH,GAAGnH,KAFzB,iCAGFH,GAASsH,GAAG9C,WAEdT,YAAaA,GACbgF,SAAU,GACVC,OAAQ,GACRC,YAAa,GACbC,UAAW,IAGTC,EAAa,CACfzQ,GAAIuO,GAAKvN,IACT8O,OAAQ,CACNR,WAAYf,GAAKe,WACjBS,MAAO,CAAEtD,QAASgD,KAlDM,oBAwDL7F,IAAM,CACzBoC,IAAI,GAAD,OAAKlC,MAAL,iBAAiBmC,IAAIC,QAArB,eACHC,OAAQ,OACR1C,KAAMgH,IA3DkB,8IAAH,sDAyyB3B,OACE,oCA//CmB,WACnB,GAAIlC,GAAK9B,QAAS,CAChB,IAAIhD,EAAO8E,GAAK9B,QAGhB,OACE,oCACE,kBAAC,QAAD,CACEiE,OAAQlQ,EACRmQ,QAAS,kBAAMlQ,GAAoB,IACnCmQ,UAAU,4GAEV,kBAAC,cAAD,CAAaA,UAAU,yCAErB,yCACW,kBAAC,QAAD,KAAQrC,GAAK0B,QAAgB,MAG1C,kBAAC,YAAD,KACE,yBAAKW,UAAU,8BAAf,gBAEA,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aACA,kBAAC,YAAD,iBACA,kBAAC,YAAD,sBACA,kBAAC,YAAD,yBACA,kBAAC,YAAD,uBACA,kBAAC,YAAD,eACA,kBAAC,YAAD,cACA,kBAAC,YAAD,qBACA,kBAAC,YAAD,iBAGJ,kBAAC,YAAD,KACGnH,EAAKoH,KAAI,SAACC,EAAOlC,GAAR,OACR,kBAAC,WAAD,CACEgC,UAAS,mEAETG,IAAKnC,EACLoC,QAAS,cAQT,kBAAC,YAAD,CAAWJ,UAAU,OACnB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBACV5D,IAAO8D,EAAMpB,MAAMxC,OAAO,kBAKnC,kBAAC,YAAD,KACE,0BAAM0D,UAAU,WACbR,qBAAWU,EAAMnB,YAItB,kBAAC,YAAD,KACE,0BAAMiB,UAAU,WACbE,EAAM/F,iBAGX,kBAAC,YAAD,KACE,0BAAM6F,UAAU,WACbE,EAAM7F,iBAGX,kBAAC,YAAD,KACE,0BAAM2F,UAAU,WAAWE,EAAM3F,eAEnC,kBAAC,YAAD,KACE,8BACsB,GAAnBoD,GAAKe,WACJ,kBAAC,QAAD,+BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,qCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,0BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,2BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,0BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,yBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,wBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,qBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,yBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,qCACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,sBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,OAGR,kBAAC,YAAD,CAAWsB,UAAU,0BACnB,0BAAMA,UAAU,wBACbE,EAAMjB,OAGX,kBAAC,YAAD,KACE,0BAAMe,UAAU,WAAWE,EAAMzF,cAGnC,kBAAC,YAAD,KACE,kBAAC,SAAD,CACE4F,OAAO,UACPD,QAAS,WACHF,EAAMR,QACRxH,GAAuBgI,EAAMR,QAC3BQ,EAAMT,UACRrH,GAAuB8H,EAAMT,UAC3BS,EAAMrI,YACRS,GAAkB4H,EAAMrI,YAC1BG,IAAyB,KAT7B,iBA6Bd,kBAAC,cAAD,SAu1CLsI,GA/0CqB,WACxB,GAAIpK,GAAa,GAIf,OACE,oCACE,kBAAC,QAAD,CACE4J,OAAQhQ,EACRiQ,QAAS,kBAAMhQ,GAAyB,IACxCiQ,UAAU,2GAEV,kBAAC,cAAD,CAAaA,UAAU,yCAErB,8CACgB,kBAAC,QAAD,KAAQrC,GAAK0B,QAAgB,MAG/C,kBAAC,YAAD,KACE,yBAAKW,UAAU,8BAAf,iBAEA,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aACA,kBAAC,YAAD,iBACA,kBAAC,YAAD,sBACA,kBAAC,YAAD,yBACA,kBAAC,YAAD,uBACA,kBAAC,YAAD,eACA,kBAAC,YAAD,cACA,kBAAC,YAAD,qBACA,kBAAC,YAAD,iBAGJ,kBAAC,YAAD,KACG9J,GAAa+J,KAAI,SAACC,EAAOlC,GAAR,OAChB,kBAAC,WAAD,CACEgC,UAAS,mEAETG,IAAKnC,EACLoC,QAAS,cAQT,kBAAC,YAAD,CAAWJ,UAAU,OACnB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBACV5D,IAAO8D,EAAMpB,MAAMxC,OAAO,kBAKnC,kBAAC,YAAD,KACE,0BAAM0D,UAAU,WACbR,qBAAWU,EAAMnB,YAItB,kBAAC,YAAD,KACE,0BAAMiB,UAAU,WACbE,EAAM/F,iBAGX,kBAAC,YAAD,KACE,0BAAM6F,UAAU,WACbE,EAAM7F,iBAGX,kBAAC,YAAD,KACE,0BAAM2F,UAAU,WAAWE,EAAM3F,eAEnC,kBAAC,YAAD,KACE,8BACsB,GAAnBoD,GAAKe,WACJ,kBAAC,QAAD,+BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,qCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,0BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,2BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,0BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,yBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,wBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,qBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,yBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,qCACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,sBACE,KACgB,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,OAGR,kBAAC,YAAD,CAAWsB,UAAU,0BACnB,0BAAMA,UAAU,wBACbE,EAAMjB,OAGX,kBAAC,YAAD,KACE,0BAAMe,UAAU,WAAWE,EAAMzF,cAEnC,kBAAC,YAAD,KACE,kBAAC,SAAD,CACE4F,OAAO,UACPD,QAAS,WACHF,EAAMR,QACRxH,GAAuBgI,EAAMR,QAC3BQ,EAAMT,UACRrH,GAAuB8H,EAAMT,UAC3BS,EAAMrI,YACRS,GAAkB4H,EAAMrI,YAC1BG,IAAyB,KAT7B,iBA6Bd,kBAAC,cAAD,QAwqCLuI,GAv3DD,oCACE,kBAAC,QAAD,CACET,OAAQhJ,GACRiJ,QAAS,kBAAMhJ,IAAoB,KAEnC,kBAAC,cAAD,KAAcC,IACd,kBAAC,YAAD,MACA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEgJ,UAAU,mBACVI,QAAS,kBAAMrJ,IAAoB,KAFrC,YAuCN,oCACE,kBAAC,QAAD,CACE+I,OAAQ5I,GACR6I,QAAS,WACPnI,GAAU,IACVP,GAAW,MACXF,IAAwB,KAG1B,kBAAC,cAAD,KAAcG,IACd,kBAAC,YAAD,KACE,oCAC6B,aAA1BA,GACC,yBACEkJ,IAAK9I,GAAgBH,IACrByI,UAAU,OACVS,MAAM,MACNC,OAAO,QAEmB,QAA1BpJ,GACF,yBACEkJ,IAAKhJ,GAAgBD,IACrByI,UAAU,OACVS,MAAM,MACNC,OAAO,QAEmB,aAA1BpJ,GACF,yBACEkJ,IAAK3I,GACLmI,UAAU,OACVS,MAAM,MACNC,OAAO,QAEP,KAEJ,yBAAKV,UAAU,kCACb,yBAAKA,UAAU,kBACb,kBAAC,QAAD,CAAOA,UAAU,IACf,8CACA,kBAAC,QAAD,CACEA,UAAU,OACVhF,KAAK,OAEL2F,SAAU,SAACC,GAAD,OA1JH,SAACA,EAAGC,GAC7BA,EAASD,EAAEE,OAAOC,MAAM,IAyJWC,CAAmBJ,EAAGvJ,SAM7C,kBAAC,SAAD,CACE+I,QAAS,WA7ED,IAACa,EACR,cADQA,EA8ES3J,IA5E9BkB,GAAYpB,IAAS,SAACgE,GACpBzC,QAAQC,IAAI,YAAawC,EAAK7D,IAE9B,IAAIwG,EAAOrG,GACXqG,EAAKxG,IAAc6D,EACnBzD,GAAmBoG,MAED,QAAXkD,EACTzI,GAAYpB,IAAS,SAACgE,GACpB,IAAI2C,EAAOvG,GACXuG,EAAKxG,IAAc6D,EACnBzC,QAAQC,IAAI,YAAawC,EAAK7D,IAE9BE,GAAmBsG,MAED,QAAXkD,GACTzI,GAAYpB,IAAS,SAACgE,GACpBzC,QAAQC,IAAI,YAAawC,GAEzBtD,GAAcsD,OA2DJiF,OAAO,UACPL,UAAU,YALZ,mBAYN,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEA,UAAU,mBACVI,QAAS,WACPxI,GAAU,IACVP,GAAW,MACXF,IAAwB,KAL5B,YAkBN,oCACE,kBAAC,QAAD,CACE2I,OAAQ/H,GACRgI,QAAS,WACP3H,GAAuB,IACvBF,GAAuB,IACvBI,GAAkB,IAClBN,IAAyB,IAE3BgI,UAAU,2GAGV,kBAAC,cAAD,eACA,kBAAC,YAAD,KACE,yBAAKA,UAAU,iCACb,6BACA,yBAAKA,UAAU,wDACW,IAAvB7H,GACC,6BACE,yBACEiI,QAAS,WACPzH,QAAQC,IAAIT,KAEd6H,UAAU,qCAJZ,iBASA,uBAAGkB,KAAM/I,GAAqB2I,OAAO,UAUnC,yBACEN,IAAKrI,GACL6H,UAAU,gBACVS,MAAM,MACNC,OAAO,UAIX,KAEoB,IAAvBzI,GACC,6BACE,yBAAK+H,UAAU,qCACZ,IADH,eAIA,uBAAGkB,KAAMjJ,GAAqB6I,OAAO,UACnC,yBACEN,IAAKvI,GACL+H,UAAU,gBACVS,MAAM,MACNC,OAAO,UAIX,KAEe,IAAlBrI,GACC,6BACE,yBAAK2H,UAAU,qCACZ,IADH,QAIA,uBAAGkB,KAAM7I,GAAgByI,OAAO,UAC9B,yBACEN,IAAKnI,GACL2H,UAAU,gBACVS,MAAM,MACNC,OAAO,UAIX,QAIV,kBAAC,cAAD,QAo8BJ,yBAAKV,UAAU,yBAIb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,6IACb,yBAAKA,UAAU,KACb,8CAAoBrC,GAAK0B,SAE3B,yBAAKW,UAAU,KACb,iDAAuBrC,GAAKwD,gBAE9B,yBAAKnB,UAAU,KACb,uCAAa5D,IAAOuB,GAAKmB,MAAMxC,OAAO,iBAI1C,yBAAK0D,UAAU,uJACb,yBAAKA,UAAU,mBACb,gDAEF,8BACsB,GAAnBrC,GAAKe,WACJ,kBAAC,QAAD,+BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,qCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBf,GAAKe,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBf,GAAKe,WAAkB,kBAAC,QAAD,0BAAmC,KACvC,GAAnBf,GAAKe,WAAkB,kBAAC,QAAD,2BAAoC,KACxC,GAAnBf,GAAKe,WAAkB,kBAAC,QAAD,0BAAmC,KACvC,GAAnBf,GAAKe,WAAkB,kBAAC,QAAD,yBAAkC,KACtC,IAAnBf,GAAKe,WAAmB,kBAAC,QAAD,wBAAiC,KACtC,IAAnBf,GAAKe,WAAmB,kBAAC,QAAD,qBAA8B,KACnC,IAAnBf,GAAKe,WAAmB,kBAAC,QAAD,yBAAkC,KACvC,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,qCACE,KACgB,IAAnBf,GAAKe,WAAmB,kBAAC,QAAD,sBAA+B,KACpC,IAAnBf,GAAKe,WACJ,kBAAC,QAAD,iCACE,QAOV,yBAAKsB,UAAU,kBACb,yBAAKA,UAAU,4IACb,yBAAKA,UAAU,KACb,wCAAcjP,KAEhB,yBAAKiP,UAAU,KACb,uCAAa/O,KAEf,yBAAK+O,UAAU,KACb,gDAAsB7O,KAGZ,UAAXiF,IACU,UAAXA,IACW,WAAXA,GACE,oCACE,yBAAK4J,UAAU,IACb,mDAAyB3O,MAG3B,MAGN,yBAAK2O,UAAU,0IAEb,kBAAC,SAAD,CACEI,QAAS,WACPrQ,GAAyB,IAE3BsQ,OAAO,WAJT,sBASA,kBAAC,SAAD,CACED,QAAS,WACPvQ,GAAoB,IAEtBwQ,OAAO,WAJT,uBAWJ,yBAAKL,UAAU,6IAEb,yBAAKA,UAAU,uCACb,6BACE,0BAAMA,UAAU,uBAAhB,kBAA4D,IAC3D5J,IAEF9F,EAAKyL,WACJ,6BACE,0BAAMiE,UAAU,uBAAhB,YAAsD,IACrD1P,EAAKyL,WAAWqF,OAEjB,KACJ,6BACE,0BAAMpB,UAAU,uBAAhB,aAAuD,IACtDpP,GAAQD,aAIV2C,GAAM,GACL,6BACE,0BAAM0M,UAAU,uBAAhB,iBAA2D,IAC1D1M,GAAM,GAAKA,GAAM,GAAGF,UAAY,IAEjC,KACHE,GAAM,GACL,6BACE,0BAAM0M,UAAU,uBAAhB,mBAA6D,IAC5D1M,GAAM,GAAKA,GAAM,GAAGD,SAAW,IAEhC,MAKN,yBAAK2M,UAAU,uCACb,6BACE,0BAAMA,UAAU,uBAAhB,eAAyD,IACxDvP,EAASD,cAEZ,6BACE,0BAAMwP,UAAU,uBAAhB,WAAqD,IACpD1P,EAAKD,UAEPC,EAAKyL,WACJ,6BACE,0BAAMiE,UAAU,uBAAhB,eAAyD,IACxD1P,EAAKyL,WAAWsF,SAEjB,KAEHnO,GAAI,GACH,6BACE,0BAAM8M,UAAU,uBAAhB,eAAyD,IACxD9M,GAAI,GAAGF,cAER,KAEHE,GAAI,GACH,6BACE,0BAAM8M,UAAU,uBAAhB,gBAA0D,IACzD9M,GAAI,GAAKA,GAAI,GAAGD,YAAc,IAE/B,MAIN,yBAAK+M,UAAU,uCACZ1P,EAAKyL,WACJ,6BACE,0BAAMiE,UAAU,4BAAhB,kBACkB,KACV,IACP1P,EAAKyL,WAAWuF,cAEjB,KAEH5N,GAAQ,GACP,6BACE,0BAAMsM,UAAU,4BAAhB,cAA6D,IAC5DtM,GAAQ,GAAKA,GAAQ,GAAGF,YAAc,IAEvC,KACHE,GAAQ,GACP,6BACE,0BAAMsM,UAAU,4BAAhB,oBAEQ,IACPtM,GAAQ,GAAKA,GAAQ,GAAGD,WAAa,IAEtC,KAEHrB,GAAK,GACJ,6BACE,0BAAM4N,UAAU,4BAAhB,iBAAgE,IAC/D5N,GAAK,GAAKA,GAAK,GAAGF,SAAW,IAE9B,KACHE,GAAK,GACJ,6BACE,0BAAM4N,UAAU,4BAAhB,iBACiB,KACT,IACP5N,GAAK,GAAKA,GAAK,GAAGD,QAAU,IAE7B,MAIN,yBAAK6N,UAAU,uCAEZhO,GAAI,GACH,6BACE,0BAAMgO,UAAU,4BAAhB,eAA8D,IAC7DhO,GAAI,GAAKA,GAAI,GAAGF,QAAU,IAE3B,KACHE,GAAI,GACH,6BACE,0BAAMgO,UAAU,4BAAhB,iBAAgE,IAC/DhO,GAAI,GAAKA,GAAI,GAAGD,OAAS,IAE1B,KAEHC,GAAI,GACH,6BACE,0BAAMgO,UAAU,4BAAhB,iBAAgE,IAC/DhO,GAAI,GAAKA,GAAI,GAAGF,QAAU,IAE3B,KAEHE,GAAI,GACH,6BACE,0BAAMgO,UAAU,4BAAhB,iBAAgE,IAC/DhO,GAAI,GAAKA,GAAI,GAAGD,OAAS,IAE1B,KACHY,GAAY,GACX,6BACE,0BAAMqN,UAAU,4BAAhB,iBAAgE,IAC/DrN,GAAY,GAAKA,GAAY,GAAGF,gBAAkB,IAEnD,KAEHE,GAAY,GACX,6BACE,0BAAMqN,UAAU,4BAAhB,iBACCrN,GAAY,GAAKA,GAAY,GAAGD,eAAiB,IAElD,MAGN,yBAAKsN,UAAU,uCACb,6BACE,0BAAMA,UAAU,uBAAhB,eAAyD,IACxD5K,IAEF9E,EAAKyL,WACJ,6BACE,0BAAMiE,UAAU,uBAAhB,eAAyD,IACxD1P,EAAKyL,WAAWwF,UAEjB,KAGH3P,GAAI,GACH,6BACE,0BAAMoO,UAAU,uBAAhB,gBAA0D,IACzDpO,GAAI,GAAKA,GAAI,GAAGF,QAAU,IAE3B,KACHE,GAAI,GACH,6BACE,0BAAMoO,UAAU,uBAAhB,gBAA0D,IACzDpO,GAAI,GAAKA,GAAI,GAAGD,OAAS,IAE1B,KAEHC,GAAI,GACH,6BACE,0BAAMoO,UAAU,uBAAhB,eAAyD,IACxDpO,GAAI,GAAKA,GAAI,GAAGF,QAAU,IAE3B,KAEHE,GAAI,GACH,6BACE,0BAAMoO,UAAU,uBAAhB,kBAA4D,IAC3DpO,GAAI,GAAKA,GAAI,GAAGD,OAAS,IAE1B,OAmBR,yBAAKqO,UAAU,kBACb,yBAAKA,UAAU,8IAEb,yBAAKA,UAAU,kBACb,0CACY,IACV,0BAAMA,UAAU,eAAerC,GAAKqB,kBAM5C,yBAAKgB,UAAU,iJAEb,yBAAKA,UAAU,kBACb,qDACuB,IACrB,0BAAMA,UAAU,eAAhB,IAAgCrC,GAAK6D,YAI3C,yBAAKxB,UAAU,6IAEb,yBAAKA,UAAU,uBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,gDACA,kBAAC,SAAD,CACEA,UAAU,SACVW,SAAU,SAACC,GACThD,GAAQ,2BAAKD,IAAN,IAAYe,WAAYkC,EAAEE,OAAOW,SACxC9I,QAAQC,IAAI+E,IACU,MAAlBiD,EAAEE,OAAOW,OACX9R,GAAc,IAGlB8R,MAAO9D,GAAKe,YAEZ,4BAAQ+C,MAAM,KAAd,0BACA,4BAAQA,MAAM,KAAd,gCACA,4BAAQA,MAAM,KAAd,yBACA,4BAAQA,MAAM,KAAd,6BACA,4BAAQA,MAAM,KAAd,6BACA,4BAAQA,MAAM,KAAd,yBACA,4BAAQA,MAAM,KAAd,sBACA,4BAAQA,MAAM,KAAd,uBACA,4BAAQA,MAAM,KAAd,sBACA,4BAAQA,MAAM,MAAd,iCACA,4BAAQA,MAAM,MAAd,qBACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,KAAd,qBACA,4BAAQA,MAAM,MAAd,oBACA,4BAAQA,MAAM,MAAd,6BACA,4BAAQA,MAAM,MAAd,oBAIN,yBAAKzB,UAAU,uBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,8CACA,kBAAC,SAAD,CACEA,UAAU,eACVW,SAAU,SAACC,GAETzQ,EAAeyQ,EAAEE,OAAOW,OACxB9I,QAAQC,IAAI+E,KAEd8D,MAAOvR,GAEP,4BAAQuR,MAAM,GAAGC,UAAQ,GAAzB,uBAGA,4BAAQD,MAAM,OAAd,OACA,4BAAQA,MAAM,MAAd,WAqMV,yBAAKzB,UAAU,iBACb,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,+CACA,kBAAC,QAAD,CACEA,UAAU,GACVhF,KAAK,OACLyG,MAAOrF,IAAOuB,GAAKW,cAAchC,OAAO,cACxCqE,SAAU,SAACC,GACThD,GAAQ,2BAAKD,IAAN,IAAYxD,eAAgByG,EAAEE,OAAOW,cAKpD,yBAAKzB,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,mDACA,kBAAC,QAAD,CACEA,UAAU,GACVhF,KAAK,OACLyG,MAAO9D,GAAKY,YACZoC,SAAU,SAACC,GACThD,GAAQ,2BAAKD,IAAN,IAAYxD,eAAgByG,EAAEE,OAAOW,cAKpD,yBAAKzB,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,qDACA,kBAAC,QAAD,CACEA,UAAU,GACVhF,KAAK,OACLyG,MAAOtH,GACPwG,SAAU,SAACC,GACTxG,GAAkBwG,EAAEE,OAAOW,WAIhCrF,IAAOuB,GAAKW,cAAchC,OAAO,cAClCF,IAAOjC,IAAgBmC,OAAO,cAC5B,0BAAM0D,UAAU,wBAAhB,qDAGE,MAEN,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,mDACA,kBAAC,QAAD,CACEA,UAAU,GACVhF,KAAK,OACLyG,MAAOpH,GACPsG,SAAU,SAACC,GACTtG,GAAkBsG,EAAEE,OAAOW,WAIhC9D,GAAKY,YAAclE,IACpB+B,IAAOuB,GAAKW,cAAchC,OAAO,eAC/BF,IAAOjC,IAAgBmC,OAAO,eACd,IAAlBjC,GACE,0BAAM2F,UAAU,wBAAhB,oCAGE,MAEN,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,iDACA,kBAAC,QAAD,CACEA,UAAU,GACVhF,KAAK,OACLyG,MAAOlH,GACPoG,SAAU,SAACC,GACTpG,GAAgBoG,EAAEE,OAAOW,WAK9BlH,GAAeF,IAAkC,IAAhBE,GAChC,0BAAMyF,UAAU,wBAAhB,sDAGE,OAIR,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,+CACA,kBAAC,QAAD,CACEA,UAAU,GACVhF,KAAK,OACLyG,MAAOhH,GACPkG,SAAU,SAACC,GACTlG,GAAekG,EAAEE,OAAOW,aApLlC,yBAAKzB,UAAU,IAEb,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,yBAAKA,UAAU,sJAAf,iBAGA,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,kBAAC,WAAD,KACE,kBAAC,YAAD,cACA,kBAAC,YAAD,aACA,kBAAC,YAAD,cACA,kBAAC,YAAD,sBACA,kBAAC,YAAD,oBAGJ,kBAAC,YAAD,KACGtJ,GAASuJ,KAAI,SAAC1H,EAAMyF,GAAP,OACZ,kBAAC,WAAD,CACEmC,IAAKnC,EACLgC,UAAS,4DAET,kBAAC,YAAD,KACE,0BAAMA,UAAU,WAAWhC,EAAI,IAGjC,kBAAC,YAAD,CAAWgC,UAAU,IACnB,6BACE,uBAAGA,UAAU,iBAAiBR,qBAAWjH,EAAKyC,SAGlD,kBAAC,YAAD,KACE,0BAAMgF,UAAU,WAAWzH,EAAK3B,OAGlC,kBAAC,YAAD,KACE,0BAAMoJ,UAAU,WAAWzH,EAAK1B,MAElC,kBAAC,YAAD,KAEE,yBAAKmJ,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UAEf,kBAAC,SAAD,CACEyB,MAAOlJ,EAAK2C,UACZ8E,UAAU,OACVW,SAAU,SAACC,GAET,IAAI7C,EAAI,YAAOrH,IACfqH,EAAKC,GAAG9C,UAAY0F,EAAEE,OAAOW,MAC7B9K,GAAYoH,KAGd,4BAAQ0D,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,aAAd,0BA35CpB,yBAAKzB,UAAU,QACb,yBAAKA,UAAU,sCAAf,yBAIA,yBAAKA,UAAU,8BAEb,yBAAKA,UAAU,yDAGb,yBAAKA,UAAU,SACb,kBAAC,SAAD,CACEW,SAAU,SAACC,GACTrK,GAAgBqK,EAAEE,OAAOW,QAE3BzB,UAAU,SAEV,4BAAQyB,MAAM,GAAGE,UAAQ,EAACD,UAAQ,GAAlC,aAGA,4BAAQD,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,gBAAd,gBACA,4BAAQA,MAAM,UAAd,eAytCV,yBAAKzB,UAAU,uEACb,0BAEE4B,SAAU,SAAChB,GACTA,EAAEiB,mBAGJ,2BACE7B,UAAU,kNACV8B,YAAY,uBACZL,MAAOxH,GACP0G,SAAU,SAACC,GACT1G,GAAa0G,EAAEE,OAAOW,WAK5B,yBAAKzB,UAAU,YAEb,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aACA,kBAAC,YAAD,aACA,kBAAC,YAAD,sBACA,kBAAC,YAAD,iBAGJ,kBAAC,YAAD,CAAWA,UAAU,IAClBxJ,GAAWyJ,KAAI,SAAC8B,EAAM/D,GAAP,OACd,kBAAC,WAAD,CACEgC,UAAS,2CACTG,IAAKnC,EACLoC,QAAS,cAQT,kBAAC,YAAD,CAAWJ,UAAU,OACnB,yBAAKA,UAAU,8BAMb,6BACE,uBAAGA,UAAU,iBACVR,qBAAWuC,EAAK/G,UAQzB,kBAAC,YAAD,CAAWgF,UAAU,IAEnB,yBAAKA,UAAU,8BACZ+B,EAAKnL,OAIV,kBAAC,YAAD,KACE,yBAAKoJ,UAAU,8BACZ+B,EAAKlL,MAGV,kBAAC,YAAD,KACe,IAAZkL,EAAKlL,IACJ,kBAAC,SAAD,CACEwJ,OAAO,UACPL,UAAU,yCACVI,QAAS,WACPzJ,GAAY,GAAD,mBAAKD,IAAL,CAAeqL,OAJ9B,UASE,eA5wBpB,oCACE,kBAAC,QAAD,CAAOjC,OAAQtQ,EAAauQ,QAAS,kBAAMtQ,GAAe,KACxD,kBAAC,cAAD,gCACA,kBAAC,YAAD,2CACA,kBAAC,cAAD,KAEE,kBAAC,SAAD,CACEuQ,UAAU,mBACVI,QAAS,kBAAMxR,EAAYwP,KAAK,oBAFlC,YAeN,oCACE,kBAAC,QAAD,CACE0B,OAAQ9P,EACR+P,QAAS,kBAAM9P,GAAoB,KAEnC,kBAAC,cAAD,kCACA,kBAAC,YAAD,qEAGA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACE+P,UAAU,mBACVI,QAAS,kBAAMnQ,GAAoB,KAFrC,YAcN,oCACE,kBAAC,QAAD,CAAO6P,OAAQpQ,GACb,kBAAC,cAAD,oBACA,kBAAC,YAAD,2CACA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEsQ,UAAU,mBACVI,QAAS,WAEPjQ,EAAe,OACfR,GAAc,KALlB,OAUA,kBAAC,SAAD,CACEqQ,UAAU,mBACVI,QAAS,WAEPjQ,EAAe,MACfR,GAAc,KALlB,SA69BN,6BACE,yBAAKqQ,UAAU,+CAEb,kBAAC,SAAD,CACEI,QAAS,WACP/B,MAEFgC,OAAO,WAJT","file":"static/js/66.e40f6f9d.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { API } from \"../../backendapi\";\nimport AsyncSelect from \"react-select/async\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Select,\n  Textarea,\n  Button,\n  Dropdown,\n  DropdownItem,\n  Badge,\n} from \"@windmill/react-ui\";\n\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\n\nimport { Add, DropdownIcon, Remove } from \"../../icons\";\nimport { useMemo } from \"react\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n\nfunction UpdateInvCall() {\n  // floatbox\n  let movehistory = useHistory();\n  const params = useParams();\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const id = params.assetid;\n  const callid = params.callid;\n  // console.log(id);\n  //modal\n  const [submitModal, setSubmitModal] = useState(false);\n  const [sparemodal, setSpareModal] = useState(false);\n  const [historyModalOpen, setHistoryModalOpen] = useState(false);\n  const [assethistoryModalOpen, setAssetHistoryModalOpen] = useState(false);\n  const [notswapModalOpen, setNotSwapModalOpen] = useState(false);\n  const [spareStatus, setSpareStatus] = useState(\"\");\n  const [ccfrStatus, setCcfrStatus] = useState(\"\");\n\n  //customer\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  //prodcut\n  const [productID, setProductID] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [model, setModel] = useState(\"\");\n  const [serialno, setSerialNo] = useState(\"\");\n  const [os, setOs] = useState(\"\");\n  const [cpu, setCpu] = useState([{ cpuname: \"\", cpusno: \"\" }]);\n  const [ram, setram] = useState([{ ramname: \"\", ramsno: \"\" }]);\n  const [hdd, sethdd] = useState([{ hddname: \"\", hddsno: \"\" }]);\n  const [smps, setsmps] = useState([{ smpsname: \"\", smpssno: \"\" }]);\n  const [fan, setfan] = useState([{ fanname: \"\", fansno: \"\" }]);\n  const [motherboard, setmotherboard] = useState([\n    { motherboardname: \"\", motherboardsno: \"\" },\n  ]);\n  const [opticaldrive, setopticaldrive] = useState([\n    { opticaldrivename: \"\", opticaldrivesno: \"\" },\n  ]);\n  const [kbd, setkbd] = useState([{ keyboardname: \"\", keyboardsno: \"\" }]);\n  const [mouse, setmouse] = useState([{ mousename: \"\", mousesno: \"\" }]);\n  const [monitor, setmonitor] = useState([{ monitorname: \"\", monitorsno: \"\" }]);\n  const [gcard, setgcard] = useState([{ gcardname: \"\", gcardsno: \"\" }]);\n  const [enetcard, setenetcard] = useState([\n    { enetcardname: \"\", enetcardsno: \"\" },\n  ]);\n  const [serialcard, setserialcard] = useState([\n    { serialcardname: \"\", serialcardsno: \"\" },\n  ]);\n  const [parallelcard, setparallelcard] = useState([\n    { parallelcardname: \"\", parallelcardsno: \"\" },\n  ]);\n  const [hbacard, sethbacard] = useState([{ hbacardname: \"\", hbacardsno: \"\" }]);\n  const [raidcontroller, setraidcontroller] = useState([\n    { raidcontrollername: \"\", raidcontrollersno: \"\" },\n  ]);\n  const [tapecontroller, settapecontroller] = useState([\n    { tapecontrollername: \"\", tapecontrollersno: \"\" },\n  ]);\n  const [others, setothers] = useState([{ othersname: \"\", otherssno: \"\" }]);\n  //asset\n\n  const [Business, setBusiness] = useState(\"\");\n  const [servicelocation, setServiceLocation] = useState(\"\");\n  const [POnumber, setPOnumber] = useState(\"\");\n  const [POdate, setPOdate] = useState(\"\");\n  const [ContractFrom, setContractFrom] = useState(\"\");\n  const [ContractTo, setContractTo] = useState(\"\");\n  const [BillingFrom, setBillingFrom] = useState(\"\");\n  const [BillingTo, setBillingTo] = useState(\"\");\n  const [AMCRate, setAMCRate] = useState(\"\");\n  const [GST, setGST] = useState(\"\");\n  const [GSTAMOUNT, setGSTAMOUNT] = useState(\"\");\n  const [NetAmount, setNetAmount] = useState(\"\");\n  const [assethistory, setAssetHistory] = useState([]);\n\n  //////////////-------------------------------------------->Product name not in asset\n  const [product, setProduct] = useState(\"Server\");\n\n  ////////////---------------- INVENTORY state\n  const [inventory, setInventory] = useState([]);\n\n  //MODAL\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  // table variable styles\n\n  const [activeRowID, setActiveRowID] = useState([-1]);\n  //   const [secondactiveRowID, setSecondactiveRowID] = useState([-1]);\n\n  // ---------------New States------------\n  // const [itemtype, setItemtype] = useState(\"\"); //Full system vs item\n  const [selectedItem, setSelectedItem] = useState(\"\"); //the selected item category\n  const [inventdata, setInventData] = useState([{}]); // state to hold inventory searched\n  const [addedinv, setAddedInv] = useState([]); // state to hold inventory attached to the current call\n  const [existswap, setExistswap] = useState([\n    {\n      name: \"Not Selected\",\n      sno: \"Not Selected\",\n    },\n  ]);\n  const [inventswap, setInventswap] = useState([\n    {\n      name: \"Not Selected\",\n      sno: \"Not Selected\",\n    },\n  ]);\n\n  // Image states -----------------------------------------------------------------\n  const [isImgUploadModal, setIsImgUploadModal] = useState(false);\n  const [imageUploadMessage, setImageUploadMessage] = useState(\"\");\n  const [isImgUploadMenuModal, setIsImgUploadMenuModal] = useState(false);\n\n  const [imgFile, setImgFile] = useState(null);\n  const [imageUploadMenuMessage, setImageUploadMenuMessage] = useState(\"\");\n  const [imageIndex, setimageIndex] = useState(\"\");\n\n  const [goodSpareImgUrl, setGoodSpareImgUrl] = useState([\"\"]);\n  const [defectiveImgUrl, setDefectiveImgUrl] = useState([\"\"]);\n  const [imgUrl, setImgUrl] = useState([\"\"]);\n  const [ccfrImgUrl, setCcfrImgUrl] = useState(\"\");\n\n  const [isHistoryImgViewModal, setIsHistoryImgViewModal] = useState(false);\n  const [goodSpareHistoryImg, setGoodSpareHistoryImg] = useState(\"\");\n  const [defectiveHistoryImg, setDefectiveHistoryImg] = useState(\"\");\n  const [defectiveHistoryImgPos, setDefectiveHistoryImgPos] = useState(\"0% 0%\");\n  const [ccfrHistoryImg, setCcfrHistoryImg] = useState(\"\");\n\n  // mouse move for zoom not used now -----\n\n  // const handleMouseMove = (e) => {\n  //   const { left, top, width, height } = e.target.getBoundingClientRect();\n  //   const x = ((e.pageX - left) / width) * 100;\n  //   const y = ((e.pageY - top) / height) * 100;\n  //   setDefectiveHistoryImgPos(`${x}% ${y}%`);\n  //   // this.setState({ backgroundPosition: `${x}% ${y}%` })\n  // };\n\n  // ----------- Multi update states ---------------\n  const [assetpickerarray, setAssetpickerarray] = useState([{ item: \"test\" }]);\n\n  const photoUploadHandler = (e, callback) => {\n    callback(e.target.files[0]);\n  };\n\n  const photoUpload = (photo, cb) => {\n    console.log(photo);\n    if (photo == null) {\n      setImageUploadMessage(\"Image not selected\");\n      setIsImgUploadModal(true);\n      return;\n    }\n    setImageUploadMessage(\"Loading...\");\n    setIsImgUploadModal(true);\n\n    const data = new FormData(); // If file selected\n    data.append(\"imageUpload\", photo, photo.name);\n    // console.log(data);\n\n    axios\n      .post(`${API}/upload/img-upload`, data, {\n        headers: {\n          accept: \"application/json\",\n          \"Accept-Language\": \"en-US,en;q=0.8\",\n          \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        },\n      })\n      .then((response) => {\n        if (200 === response.status) {\n          // If file size is larger than expected.\n          if (response.data.error) {\n            if (\"LIMIT_FILE_SIZE\" === response.data.error.code) {\n              console.log(\"Max size: 2MB\", \"red\");\n              setImageUploadMessage(\"Maximum size is 2MB\");\n              setIsImgUploadModal(true);\n            } else {\n              console.log(response.data); // If not the given file type\n              // console.log( response.data.error, 'red' );\n              setImageUploadMessage(\"Given format not supported\");\n            }\n          } else {\n            // Success\n            let fileName = response.data;\n            console.log(\"fileName\", fileName.location);\n            console.log(\"File Uploaded\");\n            setImageUploadMessage(\"Image Uploaded\");\n            setIsImgUploadModal(true);\n            cb(response.data.location);\n          }\n        }\n      })\n      .catch((error) => {\n        // If another error\n        setImageUploadMessage(\"Error Occured\");\n        setIsImgUploadModal(true);\n        console.log(error);\n      });\n    // } else {\n    //  // if file not selected throw error\n    //  this.ocShowAlert( 'Please upload file', 'red' );\n    // }\n  };\n\n  const ImgUploadModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isImgUploadModal}\n          onClose={() => setIsImgUploadModal(false)}\n        >\n          <ModalHeader>{imageUploadMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsImgUploadModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const handleImgUpload = (message) => {\n    if (message == \"defective\") {\n      photoUpload(imgFile, (url) => {\n        console.log(\"PHOTO URL\", url, imageIndex);\n        // setImgUrl(url);\n        let temp = defectiveImgUrl;\n        temp[imageIndex] = url;\n        setDefectiveImgUrl(temp);\n      });\n    } else if (message == \"good\") {\n      photoUpload(imgFile, (url) => {\n        let temp = goodSpareImgUrl;\n        temp[imageIndex] = url;\n        console.log(\"PHOTO URL\", url, imageIndex);\n        // setImgUrl(url);\n        setGoodSpareImgUrl(temp);\n      });\n    } else if (message == \"ccfr\") {\n      photoUpload(imgFile, (url) => {\n        console.log(\"PHOTO URL\", url);\n        // setImgUrl(url);\n        setCcfrImgUrl(url);\n      });\n    }\n  };\n  const ImgUploadMenuModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isImgUploadMenuModal}\n          onClose={() => {\n            setImgUrl(\"\");\n            setImgFile(null);\n            setIsImgUploadMenuModal(false);\n          }}\n        >\n          <ModalHeader>{imageUploadMenuMessage}</ModalHeader>\n          <ModalBody>\n            <>\n              {imageUploadMenuMessage == \"defective\" ? (\n                <img\n                  src={defectiveImgUrl[imageIndex]}\n                  className=\"my-2\"\n                  width=\"100\"\n                  height=\"100\"\n                />\n              ) : imageUploadMenuMessage == \"good\" ? (\n                <img\n                  src={goodSpareImgUrl[imageIndex]}\n                  className=\"my-2\"\n                  width=\"100\"\n                  height=\"100\"\n                />\n              ) : imageUploadMenuMessage == \"defective\" ? (\n                <img\n                  src={ccfrImgUrl}\n                  className=\"my-2\"\n                  width=\"100\"\n                  height=\"100\"\n                />\n              ) : null}\n\n              <div className=\"flex-row flex  space-x-3 mt-3 \">\n                <div className=\"flex flex-col \">\n                  <Label className=\"\">\n                    <span>Image upload</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"file\"\n                      // value={photo}\n                      onChange={(e) => photoUploadHandler(e, setImgFile)}\n                    />\n                  </Label>\n\n                  {/* <HelperText valid={false}>{err.employeeName}</HelperText> */}\n                </div>\n                <Button\n                  onClick={() => {\n                    handleImgUpload(imageUploadMenuMessage);\n                  }}\n                  layout=\"outline\"\n                  className=\"my-6    \"\n                >\n                  Upload Image\n                </Button>\n              </div>\n            </>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setImgUrl(\"\");\n                setImgFile(null);\n                setIsImgUploadMenuModal(false);\n              }}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryImgViewModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isHistoryImgViewModal}\n          onClose={() => {\n            setDefectiveHistoryImg(\"\");\n            setGoodSpareHistoryImg(\"\");\n            setCcfrHistoryImg(\"\");\n            setIsHistoryImgViewModal(false);\n          }}\n          className=\"w-9/12 dark:bg-gray-800 px-5 my-10 bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          // className=\"w-6/12 h-8/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll text-cente items-center justify-center\"\n        >\n          <ModalHeader>Images</ModalHeader>\n          <ModalBody>\n            <div className=\"flex flex-col justify-center \">\n              <hr></hr>\n              <div className=\"flex flex-row justify-evenly flex-wrap items-center \">\n                {defectiveHistoryImg != \"\" ? (\n                  <div>\n                    <div\n                      onClick={() => {\n                        console.log(defectiveHistoryImg);\n                      }}\n                      className=\"text-lg font-semibold my-2 w-full\"\n                    >\n                      Replaced Item\n                    </div>\n\n                    <a href={defectiveHistoryImg} target=\"_blank\">\n                      {/* <figure\n                      onMouseMove={handleMouseMove}\n                      style={{\n                        backgroundImage: `url(${defectiveHistoryImg})`,\n                        backgroundPosition: `${defectiveHistoryImgPos}`,\n                      }}\n                    >\n                      <img src={defectiveHistoryImg} width=\"350\" height=\"350\" />\n                    </figure> */}\n                      <img\n                        src={defectiveHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {goodSpareHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      Replaced by\n                    </div>\n                    <a href={goodSpareHistoryImg} target=\"_blank\">\n                      <img\n                        src={goodSpareHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {ccfrHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      CCFR\n                    </div>\n                    <a href={ccfrHistoryImg} target=\"_blank\">\n                      <img\n                        src={ccfrHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            {/* <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setDefectiveHistoryImg(\"\");\n                setGoodSpareHistoryImg(\"\");\n                setCcfrHistoryImg(\"\");\n                setIsHistoryImgViewModal(false);\n              }}\n            >\n              Okay!\n            </Button> */}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  //-----------------------------------------------------------------\n\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Update Inventory Call\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [condition, setCondition] = useState(\"\");\n  const [page, setPage] = useState(1);\n\n  // search\n  const [invsearch, setInvSearch] = useState(\"\");\n  const [assetinvsearch, setAssetInvSearch] = useState(\"\");\n  const [listNumber, setListNumber] = useState(0);\n\n  // imp states\n  const [callAttendDate, setCallAttendDate] = useState(\"\");\n  const [startOfService, setStartOfService] = useState(\"\");\n  const [endOfService, setEndOfService] = useState(\"\");\n  const [actionTaken, setActionTaken] = useState(\"\");\n\n  // -----use effect to pull new inventory list according to filters\n  useEffect(() => {\n    thegetter();\n  }, [selectedItem, invsearch]);\n\n  //   useMemo(() => thegetter(), [invsearch]);\n\n  async function thegetter() {\n    // console.log(\"getter called test\");\n    console.log(\"type is\", selectedItem);\n    let payload = {\n      pages: {\n        page: page,\n        limit: 5,\n      },\n      filters: {\n        type: selectedItem.toLowerCase(),\n        location: \"\",\n        condition: \"\",\n        // searchtype: invsearch,\n        searchquery: invsearch,\n      },\n    };\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(\"this is the data\", response.data.out);\n      setInventData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  const InventoryTypeSelector = () => {\n    return (\n      <div className=\"my-5\">\n        <div className=\"text-sm font-bold dark:text-white \">\n          Add Inventory To Call\n        </div>\n        {/* -----Type Selection---- */}\n        <div className=\"flex flex-row items-center\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div className=\"mt-1 flex flex-row items-center justify-start w-full \">\n            {/* ---------------------------Product Drop Down-------------------------------------- */}\n\n            <div className=\"w-1/4\">\n              <Select\n                onChange={(e) => {\n                  setSelectedItem(e.target.value);\n                }}\n                className=\"mt-1 \"\n              >\n                <option value=\"\" selected disabled>\n                  Pick Item\n                </option>\n                <option value=\"Mouse\">Mouse</option>\n                <option value=\"Keyboard\">Keyboard</option>\n                <option value=\"Monitor\">Monitor</option>\n                <option value=\"Cpu\">Cpu</option>\n                <option value=\"Ram\">Ram</option>\n                <option value=\"Fan\">Fan</option>\n                <option value=\"Motherboard\">Motherboard</option>\n                <option value=\"SMPS\">SMPS</option>\n                <option value=\"HDD\">HDD</option>\n                <option value=\"Gcard\">Gcard</option>\n                <option value=\"EnetCard\">EnetCard</option>\n                <option value=\"SerialCard\">SerialCard</option>\n                <option value=\"ParalellCard\">ParalellCard</option>\n                <option value=\"OpticalDrive\">OpticalDrive</option>\n                <option value=\"Others\">Others</option>\n              </Select>\n            </div>\n\n            {/* {existswap[number]._id ? (\n              <Button\n                layout=\"outline\"\n                className=\"dark:border-green-700 border-green-400 ml-2\"\n                onClick={() => {\n                  setImageUploadMenuMessage(\"defective\");\n                  //   setimageIndex(number);\n                  setIsImgUploadMenuModal(true);\n                }}\n              >\n                {defectiveImgUrl == \"\"\n                  ? \"Upload Defective Spare\"\n                  : \"Uploaded Defective Spare\"}\n              </Button>\n            ) : null}\n            {inventswap[number]._id ? (\n              <Button\n                layout=\"outline\"\n                className=\"dark:border-green-700 border-green-400 ml-2\"\n                onClick={() => {\n                  setImageUploadMenuMessage(\"good\");\n                  //   setimageIndex(number);\n                  setIsImgUploadMenuModal(true);\n                }}\n              >\n                {goodSpareImgUrl == \"\"\n                  ? \"Upload Good Spare\"\n                  : \"Uploaded Good Spare\"}\n              </Button>\n            ) : null} */}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // History Modal\n  const HistoryModal = () => {\n    if (call.history) {\n      let data = call.history;\n      // console.log(data);\n\n      return (\n        <>\n          <Modal\n            isOpen={historyModalOpen}\n            onClose={() => setHistoryModalOpen(false)}\n            className=\"w-9/12 overflow-y-auto dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg \"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              {/* <div>{item.name}</div> */}\n              <div>\n                Call No: <Badge>{call.callNo}</Badge>{\" \"}\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"font-semibold text-xl my-2\">Call History</div>\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody>\n                    {data.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 \n                       `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" );\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {call.callStatus == 0 ? (\n                              <Badge>Pending For Allocation</Badge>\n                            ) : null}\n                            {call.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {call.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {call.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {call.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {call.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {call.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {call.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {call.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {call.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {call.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {call.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                            {call.callStatus == 12 ? (\n                              <Badge>Spare Taken CMRR</Badge>\n                            ) : null}\n                            {call.callStatus == 13 ? (\n                              <Badge>Pending For Spare Collection</Badge>\n                            ) : null}\n                            {call.callStatus == 14 ? (\n                              <Badge>Standby Given</Badge>\n                            ) : null}\n                            {call.callStatus == 15 ? (\n                              <Badge>Pending For Verification</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"flex flex-row max-w-sm\">\n                          <span className=\"w-full overflow-auto\">\n                            {entry.note}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  // Asset History Modal\n  const AssetHistoryModal = () => {\n    if (assethistory[0]) {\n      // let data = call.history;\n      // console.log(data);\n\n      return (\n        <>\n          <Modal\n            isOpen={assethistoryModalOpen}\n            onClose={() => setAssetHistoryModalOpen(false)}\n            className=\"w-9/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              {/* <div>{item.name}</div> */}\n              <div>\n                Asset Serial: <Badge>{call.callNo}</Badge>{\" \"}\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"font-semibold text-xl my-2\">Asset History</div>\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody>\n                    {assethistory.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 \n                       `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {call.callStatus == 0 ? (\n                              <Badge>Pending For Allocation</Badge>\n                            ) : null}\n                            {call.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {call.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {call.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {call.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {call.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {call.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {call.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {call.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {call.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {call.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {call.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                            {call.callStatus == 12 ? (\n                              <Badge>Spare Taken CMRR</Badge>\n                            ) : null}\n                            {call.callStatus == 13 ? (\n                              <Badge>Pending For Spare Collection</Badge>\n                            ) : null}\n                            {call.callStatus == 14 ? (\n                              <Badge>Standby Given</Badge>\n                            ) : null}\n                            {call.callStatus == 15 ? (\n                              <Badge>Pending For Verification</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"flex flex-row max-w-sm\">\n                          <span className=\"w-full overflow-auto\">\n                            {entry.note}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  // -----getting inventory items\n\n  const getAsset = async () => {\n    try {\n      let res = await axios.post(`${API}/asset/${Emp.getId()}/getbyid`, {\n        id: id,\n      });\n      console.log(\"asset\", res.data);\n      let asset = res.data;\n      setProductID(asset.product._id);\n      setAssetHistory(asset.product.history);\n\n      setServiceLocation(asset.servicelocation);\n      setProduct(asset.producttype);\n      setUnit({ _id: id, unitName: asset.unitName });\n      setCustomer({ _id: asset.customerId, customerName: asset.customerName });\n      setAccount({ _id: asset.accountId, accountName: asset.accountName });\n\n      ////------------------------>>>>>>>>\n      // setProduct(\"Server\");\n      ////////---------ASSET INFO\n      setBusiness(asset.business);\n      setPOnumber(asset.ponumber);\n      setAMCRate(asset.amcrate);\n      // Dates --------------------------\n      setPOdate(moment(asset.podate).format(\"YYYY-MM-DD\"));\n      setContractFrom(moment(asset.contractfrom).format(\"YYYY-MM-DD\"));\n      setContractTo(moment(asset.contractto).format(\"YYYY-MM-DD\"));\n      setBillingFrom(moment(asset.billingfrom).format(\"YYYY-MM-DD\"));\n      setBillingTo(moment(asset.billingto).format(\"YYYY-MM-DD\"));\n      ////////////------------>>>>>>>> misiing field GST(asset.gs)\n      setGSTAMOUNT(asset.gstamount);\n      setNetAmount(asset.netamount);\n      // setProduct(asset);\n      //////////////////////////////\n\n      setBrand(asset.product.brand);\n      setModel(asset.product.model);\n      setSerialNo(asset.product.serialno);\n      setOs(asset.product.os);\n      setCpu(asset.product.cpu);\n      setram(asset.product.ram);\n      if (asset.product.hdd.length == 0) sethdd([{ hddname: \"\", hddsno: \"\" }]);\n      else sethdd(asset.product.hdd);\n      if (asset.product.smps.length == 0)\n        setsmps([{ smpsname: \"\", smpssno: \"\" }]);\n      else setsmps(asset.product.smps);\n      if (asset.product.fan.length == 0) setfan([{ fanname: \"\", fansno: \"\" }]);\n      else setfan(asset.product.fan);\n      if (asset.product.motherboard.length == 0)\n        setmotherboard([{ motherboardname: \"\", motherboardsno: \"\" }]);\n      else setmotherboard(asset.product.motherboard);\n      if (asset.product.opticaldrive.length == 0)\n        setopticaldrive([{ opticaldrivename: \"\", opticaldrivesno: \"\" }]);\n      else setopticaldrive(asset.product.opticaldrive);\n      if (asset.product.keyboard.length == 0)\n        setkbd([{ keyboardname: \"\", keyboardsno: \"\" }]);\n      else setkbd(asset.product.keyboard);\n      if (asset.product.mouse.length == 0)\n        setmouse([{ mousename: \"\", mousesno: \"\" }]);\n      else setmouse(asset.product.mouse);\n      if (asset.product.monitor.length == 0)\n        setmonitor([{ monitorname: \"\", monitorsno: \"\" }]);\n      else setmonitor(asset.product.monitor);\n      if (asset.product.gcard.length == 0)\n        setgcard([{ gcardname: \"\", gcardsno: \"\" }]);\n      else setgcard(asset.product.gcard);\n      if (asset.product.enetcard.length == 0)\n        setenetcard([{ netcardname: \"\", enetcardsno: \"\" }]);\n      else setenetcard(asset.product.enetcard);\n      if (asset.product.serialcard.length == 0)\n        setserialcard([{ serialcardname: \"\", serialcardsno: \"\" }]);\n      else setserialcard(asset.product.serialcard);\n\n      if (asset.product.parallelcard.length == 0)\n        setparallelcard([{ parallelcardname: \"\", parallelcardsno: \"\" }]);\n      else setparallelcard(asset.product.parallelcard);\n\n      if (asset.product.hbacard.length == 0)\n        sethbacard([{ hbacardname: \"\", hbacardsno: \"\" }]);\n      else sethbacard(asset.product.hbacard);\n\n      if (asset.product.raidcontroller.length == 0)\n        setraidcontroller([{ raidcontrollername: \"\", raidcontrollersno: \"\" }]);\n      else setraidcontroller(asset.product.raidcontroller);\n\n      if (asset.product.tapecontroller.length == 0)\n        settapecontroller([{ tapecontrollername: \"\", tapecontrollersno: \"\" }]);\n      else settapecontroller(asset.product.tapecontroller);\n\n      if (asset.product.others.length == 0)\n        setothers([{ othersname: \"\", otherssno: \"\" }]);\n      else setothers(asset.product.others);\n    } catch (err) {\n      console.log(\"assetFind Error\", err);\n    }\n  };\n\n  ////// CALL\n\n  const [call, setCall] = useState({});\n\n  const getCall = async () => {\n    try {\n      let res = await axios.post(`${API}/call/${Emp.getId()}/getbyid`, {\n        id: callid,\n      });\n      console.log(\"call\", res.data);\n      setCall(res.data);\n    } catch (err) {\n      console.log(\"call Find Error\", err);\n    }\n  };\n\n  const getAttachedInv = async () => {\n    try {\n      //   Code to get all the inventory attached with the call\n      console.log(call);\n      let temp = [];\n      for (let i = 0; i < call.attachedinv.length; i++) {\n        let currid = call.attachedinv[i];\n        let currinv = await axios.post(\n          `${API}/inventory/${Emp.getId()}/getbyid`,\n          {\n            id: currid,\n          }\n        );\n        // console.log(\"the inventory is\", currinv.data);\n\n        temp.push(currinv.data);\n      }\n      setAddedInv(temp);\n    } catch (err) {\n      console.log(\"call Find Error\", err);\n    }\n  };\n\n  useEffect(() => {\n    getAsset();\n    getCall();\n  }, []);\n\n  useEffect(() => {\n    getAttachedInv();\n  }, [call]);\n\n  // ------Modals------\n\n  const UpdatedModal = () => {\n    return (\n      <>\n        <Modal isOpen={submitModal} onClose={() => setSubmitModal(false)}>\n          <ModalHeader>Call Update Successfull</ModalHeader>\n          <ModalBody>Your Call Was Successfully Updated</ModalBody>\n          <ModalFooter>\n            {/* <Link to={`/app/viewcalls`}> */}\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => movehistory.push(\"/app/viewcalls\")}\n            >\n              Okay!\n            </Button>\n            {/* </Link> */}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const NotSwapModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={notswapModalOpen}\n          onClose={() => setNotSwapModalOpen(false)}\n        >\n          <ModalHeader>Inventory Process Pending</ModalHeader>\n          <ModalBody>\n            Please finish add/remove/swap of items before updating call.\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setNotSwapModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const SpareRequiredModal = () => {\n    return (\n      <>\n        <Modal isOpen={sparemodal}>\n          <ModalHeader>Spare Usage</ModalHeader>\n          <ModalBody> Was any spare used in this call ?</ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                // setCall({ ...call, spareUsed: \"Yes\" });\n                setSpareStatus(\"Yes\");\n                setSpareModal(false);\n              }}\n            >\n              Yes\n            </Button>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                // setCall({ ...call, spareUsed: \"No\" });\n                setSpareStatus(\"No\");\n                setSpareModal(false);\n              }}\n            >\n              No\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // --------------------  Functions ---------------------------\n\n  const handleUpdate = async () => {\n    if (\n      callAttendDate == \"\" ||\n      startOfService == \"\" ||\n      actionTaken == \"\" ||\n      moment(call.assignedDate).format(\"YYYY-MM-DD\") >\n        moment(callAttendDate).format(\"YYYY-MM-DD\") ||\n      endOfService < startOfService ||\n      (call.assignedETA > startOfService &&\n        moment(call.assignedDate).format(\"YYYY-MM-DD\") ==\n          moment(callAttendDate).format(\"YYYY-MM-DD\") &&\n        startOfService != \"\")\n    ) {\n      // setNotSwapModalOpen(true);\n      alert(\"Please enter the right values into all compulsory fields\");\n      return;\n    }\n    // if (ccfrStatus == \"\") {\n    //   alert(\"Select CCFR Status\");\n    //   return;\n    // }\n\n    // ------ Image Checker ---\n\n    // if (ccfrStatus == \"Yes\" && ccfrImgUrl == \"\") {\n    //   alert(\"Please Upload CCFR Image\");\n    //   return;\n    // }\n\n    // for (let i = 0; i < existswap.length; i++) {\n    //   if (existswap[i]._id && defectiveImgUrl[i] == \"\") {\n    //     alert(`Upload Image for the ${i + 1}th Defective Spare`);\n    //     return;\n    //   }\n    //   if (inventswap[i]._id && goodSpareImgUrl[i] == \"\") {\n    //     alert(`Upload Image for the ${i + 1}th Good Spare`);\n    //     return;\n    //   }\n    // }\n\n    let tempcallstatus = \"\";\n\n    if (call.callStatus == 0) {\n      tempcallstatus = \"Pending For Allocation\";\n    }\n    if (call.callStatus == 1) {\n      tempcallstatus = \"Pending for Percall Approval\";\n    }\n    if (call.callStatus == 2) {\n      tempcallstatus = \"Pending for Response\";\n    }\n    if (call.callStatus == 3) {\n      tempcallstatus = \"Pending for OEM Response\";\n    }\n    if (call.callStatus == 4) {\n      tempcallstatus = \"Pending for 2nd Response\";\n    }\n    if (call.callStatus == 5) {\n      tempcallstatus = \"Pending for Customer\";\n    }\n    if (call.callStatus == 6) {\n      tempcallstatus = \"Under Observation\";\n    }\n    if (call.callStatus == 7) {\n      tempcallstatus = \"Pending for Others\";\n    }\n    if (call.callStatus == 8) {\n      tempcallstatus = \"Pending for Spare\";\n    }\n    if (call.callStatus == 9) {\n      tempcallstatus = \"Spare in Transit\";\n    }\n    if (call.callStatus == 10) {\n      tempcallstatus = \"Cancelled Calls\";\n    }\n    if (call.callStatus == 11) {\n      tempcallstatus = \"Closed Calls\";\n    }\n    if (call.callStatus == 12) {\n      tempcallstatus = \"Spare Taken CMRR\";\n    }\n    if (call.callStatus == 13) {\n      tempcallstatus = \"Pending For Spare Collection\";\n    }\n    if (call.callStatus == 14) {\n      tempcallstatus = \"Standby Given\";\n    }\n    if (call.callStatus == 15) {\n      tempcallstatus = \"Pending For Verification\";\n    }\n\n    // ------- Handling the inventory updates -----------\n    // note here additional history will be added into the call also\n    let callinvids = [];\n    for (let i = 0; i < addedinv.length; i++) {\n      await handleInventoryUpdate(i);\n      callinvids.push(addedinv[i]._id);\n    }\n\n    // -----call history --------\n\n    let newcallhistory = {\n      date: moment().format(),\n      callStatus: call.callStatus,\n      engineer: call.employeeName,\n      callAttendDate: callAttendDate,\n      startOfService: startOfService,\n      endOfService: endOfService,\n      note: `Call Status Updated to ${tempcallstatus}`,\n      actionTaken: actionTaken,\n      ccfrImgUrl: ccfrImgUrl,\n      // existserial: existswap[0].sno,\n      // newserial: inventswap[0].sno,\n    };\n    let payload = {\n      id: call._id,\n      update: {\n        callStatus: call.callStatus,\n        attachedinv: callinvids,\n        // callAttendDate: call.callAttendDate,\n        // startOfService: call.startOfService,\n        // endOfService: call.endOfService,\n        // spareUsed: call.spareUsed,\n        $push: { history: newcallhistory },\n      },\n    };\n    console.log(payload);\n\n    try {\n      let response = await axios({\n        url: `${API}/call/${Emp.getId()}/assignEngg`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(\"updated\");\n      // setIsReviewModalOpen(true);\n    } catch (error) {\n      throw error;\n    }\n\n    setSubmitModal(true);\n  };\n\n  // -------handle inventory update --------\n\n  const handleInventoryUpdate = async (i) => {\n    let payload = {\n      inventoryid: addedinv[i]._id,\n      callid: call.callNo,\n      calldate: call.date,\n      //   type: selectedItem[i].toLowerCase(),\n      condition: addedinv[i].condition,\n      servicelocation: servicelocation,\n      assetserial: POnumber,\n    };\n\n    try {\n      let update = await axios({\n        url: `${API}/call/${Emp.getId()}/invcallupdate`,\n        method: \"POST\",\n        data: payload,\n      });\n      //   if (update.data.hello == \"empty\") {\n      //     console.log(\"empty swap return\");\n      //     return;\n      //   }\n    } catch (error) {\n      throw error;\n    }\n\n    // ----- call history update --------\n\n    let newcallhistory = {\n      date: moment().format(),\n      callStatus: call.callStatus,\n      engineer: call.employeeName,\n      callAttendDate: callAttendDate,\n      startOfService: startOfService,\n      endOfService: endOfService,\n      note: `${capitalize(addedinv[i].type)} ${capitalize(\n        addedinv[i].name\n      )} (${capitalize(addedinv[i].sno)}) Condition Update To ${\n        addedinv[i].condition\n      }`,\n      actionTaken: actionTaken,\n      existUrl: \"\",\n      newUrl: \"\",\n      existserial: \"\",\n      newserial: \"\",\n    };\n\n    let payloadtwo = {\n      id: call._id,\n      update: {\n        callStatus: call.callStatus,\n        $push: { history: newcallhistory },\n      },\n    };\n\n    // console.log(payloadtwo);\n    try {\n      let response = await axios({\n        url: `${API}/call/${Emp.getId()}/assignEngg`,\n        method: \"POST\",\n        data: payloadtwo,\n      });\n\n      //   // setIsReviewModalOpen(true);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //DROPDOWN------------------------------------------------------------------------------------\n\n  function toggleDropdown() {\n    // setIsOpen(!isOpen);\n  }\n\n  const AssetBar = () => {\n    return (\n      <div className=\"dark:text-white my-4 \">\n        {/* Row 1  */}\n        {/* <div className=\"text-xl font-semibold\">Asset Information</div> */}\n        {/* Row 1*/}\n        <div className=\"flex space-x-1\">\n          <div className=\"dark:text-gray-200 text-black text-sm flex space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n            <div className=\" \">\n              <span>Call Number: {call.callNo}</span>\n            </div>\n            <div className=\" \">\n              <span>Contact Person: {call.contactPerson}</span>\n            </div>\n            <div className=\" \">\n              <span>Date: {moment(call.date).format(\"DD-MM-YYYY\")}</span>\n            </div>\n          </div>\n\n          <div className=\"dark:text-gray-200 text-black text-sm space-x-1  flex flex-row items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start   w-1/4 my-2 \">\n            <div className=\" font-semibold \">\n              <span>Call Status: </span>\n            </div>\n            <span>\n              {call.callStatus == 0 ? (\n                <Badge>Pending For Allocation</Badge>\n              ) : null}\n              {call.callStatus == 1 ? (\n                <Badge>Pending for Percall Approval</Badge>\n              ) : null}\n              {call.callStatus == 2 ? (\n                <Badge>Pending for Response</Badge>\n              ) : null}\n              {call.callStatus == 3 ? (\n                <Badge>Pending for OEM Response</Badge>\n              ) : null}\n              {call.callStatus == 4 ? (\n                <Badge>Pending for 2nd Response</Badge>\n              ) : null}\n              {call.callStatus == 5 ? (\n                <Badge>Pending for Customer</Badge>\n              ) : null}\n              {call.callStatus == 6 ? <Badge>Under Observation</Badge> : null}\n              {call.callStatus == 7 ? <Badge>Pending for Others</Badge> : null}\n              {call.callStatus == 8 ? <Badge>Pending for Spare</Badge> : null}\n              {call.callStatus == 9 ? <Badge>Spare in Transit</Badge> : null}\n              {call.callStatus == 10 ? <Badge>Cancelled Calls</Badge> : null}\n              {call.callStatus == 11 ? <Badge>Closed Calls</Badge> : null}\n              {call.callStatus == 12 ? <Badge>Spare Taken CMRR</Badge> : null}\n              {call.callStatus == 13 ? (\n                <Badge>Pending For Spare Collection</Badge>\n              ) : null}\n              {call.callStatus == 14 ? <Badge>Standby Given</Badge> : null}\n              {call.callStatus == 15 ? (\n                <Badge>Pending For Verification</Badge>\n              ) : null}\n            </span>\n          </div>\n        </div>\n\n        {/*  Row 2*/}\n\n        <div className=\"flex space-x-1\">\n          <div className=\"dark:text-gray-200 text-black text-sm space-x-2  flex items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start w-full my-2\">\n            <div className=\" \">\n              <span>Brand :{brand}</span>\n            </div>\n            <div className=\" \">\n              <span>Model:{model}</span>\n            </div>\n            <div className=\" \">\n              <span>Serial Number: {serialno}</span>\n            </div>\n\n            {product == \"Laptop\" ||\n            product == \"Server\" ||\n            product == \"Desktop\" ? (\n              <>\n                <div className=\"\">\n                  <span>Operating System :{os}</span>\n                </div>\n              </>\n            ) : null}\n          </div>\n\n          <div className=\"dark:text-gray-200 text-black text-sm  bg-gray-100 dark:bg-gray-800 p-2 rounded-md  my-2 w-1/2 flex items-center justify-end space-x-1\">\n            {/* /////////////////////////////// . History  ///////////////////////////////////////////// */}\n            <Button\n              onClick={() => {\n                setAssetHistoryModalOpen(true);\n              }}\n              layout=\"outline\"\n            >\n              View Asset History\n            </Button>\n\n            <Button\n              onClick={() => {\n                setHistoryModalOpen(true);\n              }}\n              layout=\"outline\"\n            >\n              View Call History\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"dark:text-gray-200 text-black flex flex-row  items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start lg:space-x-8  w-full \">\n          {/* Row - 1 */}\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            <div>\n              <span className=\"font-semibold w-1/5\">Product Type :</span>{\" \"}\n              {product}\n            </div>\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">State : </span>{\" \"}\n                {unit.customerId.state}\n              </div>\n            ) : null}\n            <div>\n              <span className=\"font-semibold w-1/5\">Account :</span>{\" \"}\n              {account.accountName}\n            </div>\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n\n            {mouse[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Mouse Model :</span>{\" \"}\n                {mouse[0] ? mouse[0].mousename : \"\"}\n              </div>\n            ) : null}\n            {mouse[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Mouse Serial : </span>{\" \"}\n                {mouse[0] ? mouse[0].mousesno : \"\"}\n              </div>\n            ) : null}\n          </div>\n\n          {/*  Row 2 */}\n\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            <div>\n              <span className=\"font-semibold w-1/5\">Customer : </span>{\" \"}\n              {customer.customerName}\n            </div>\n            <div>\n              <span className=\"font-semibold w-1/5\">Unit : </span>{\" \"}\n              {unit.unitName}\n            </div>\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">PIN Code : </span>{\" \"}\n                {unit.customerId.pincode}\n              </div>\n            ) : null}\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n            {kbd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">KBD Model :</span>{\" \"}\n                {kbd[0].keyboardname}\n              </div>\n            ) : null}\n\n            {kbd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">KBD Serial: </span>{\" \"}\n                {kbd[0] ? kbd[0].keyboardsno : \"\"}\n              </div>\n            ) : null}\n          </div>\n          {/*  Row 3 */}\n\n          <div className=\" flex flex-col  text-sm my-1 w-full\">\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">\n                  Location type :{\" \"}\n                </span>{\" \"}\n                {unit.customerId.locationType}\n              </div>\n            ) : null}\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n            {monitor[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">Monitor : </span>{\" \"}\n                {monitor[0] ? monitor[0].monitorname : \"\"}\n              </div>\n            ) : null}\n            {monitor[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">\n                  Monitor Serial :\n                </span>{\" \"}\n                {monitor[0] ? monitor[0].monitorsno : \"\"}\n              </div>\n            ) : null}\n\n            {smps[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">SMPS1 Model :</span>{\" \"}\n                {smps[0] ? smps[0].smpsname : \"\"}\n              </div>\n            ) : null}\n            {smps[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">\n                  SMPS1 Serial :{\" \"}\n                </span>{\" \"}\n                {smps[0] ? smps[0].smpssno : \"\"}\n              </div>\n            ) : null}\n          </div>\n          {/* Row 4 */}\n\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n            {hdd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD1 Model:</span>{\" \"}\n                {hdd[0] ? hdd[0].hddname : \"\"}\n              </div>\n            ) : null}\n            {hdd[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD1 Serial :</span>{\" \"}\n                {hdd[0] ? hdd[0].hddsno : \"\"}\n              </div>\n            ) : null}\n\n            {hdd[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD2 Model : </span>{\" \"}\n                {hdd[1] ? hdd[1].hddname : \"\"}\n              </div>\n            ) : null}\n\n            {hdd[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">HDD2 Serial: </span>{\" \"}\n                {hdd[1] ? hdd[1].hddsno : \"\"}\n              </div>\n            ) : null}\n            {motherboard[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">Motherboard: </span>{\" \"}\n                {motherboard[0] ? motherboard[0].motherboardname : \"\"}\n              </div>\n            ) : null}\n\n            {motherboard[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5 ml-2\">MBD Serial : </span>\n                {motherboard[0] ? motherboard[0].motherboardsno : \"\"}\n              </div>\n            ) : null}\n          </div>\n          {/* -----------Row 5---------- */}\n          <div className=\"flex flex-col  text-sm my-1 w-full \">\n            <div>\n              <span className=\"font-semibold w-1/5\">Business : </span>{\" \"}\n              {Business}\n            </div>\n            {unit.customerId ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">District : </span>{\" \"}\n                {unit.customerId.district}\n              </div>\n            ) : null}\n            {/* ---------------------------------------------------------------------------------------------------------------- */}\n\n            {ram[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM1 Modell:</span>{\" \"}\n                {ram[0] ? ram[0].ramname : \"\"}\n              </div>\n            ) : null}\n            {ram[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM1 Serial:</span>{\" \"}\n                {ram[0] ? ram[0].ramsno : \"\"}\n              </div>\n            ) : null}\n\n            {ram[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM2 Model:</span>{\" \"}\n                {ram[1] ? ram[1].ramname : \"\"}\n              </div>\n            ) : null}\n\n            {ram[1] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">RAM2 Serial : </span>{\" \"}\n                {ram[1] ? ram[1].ramsno : \"\"}\n              </div>\n            ) : null}\n            {/* {opticaldrive[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Optical Model: </span>{\" \"}\n                {opticaldrive[0] ? opticaldrive[0].opticaldrivename : \"\"}\n              </div>\n            ) : null}\n\n            {opticaldrive[0] ? (\n              <div>\n                <span className=\"font-semibold w-1/5\">Optical Serial : </span>{\" \"}\n                {opticaldrive[0] ? opticaldrive[0].opticaldrivesno : \"\"}\n              </div>\n            ) : null} */}\n          </div>\n        </div>\n\n        {/* <hr className=\"my-4\" /> */}\n\n        <div className=\"flex space-x-1\">\n          <div className=\"dark:text-gray-200 text-black text-sm flex  flex-wrap items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n            {/* /////////////////////////////// . Engineer INFO  ///////////////////////////////////////////// */}\n            <div className=\" font-semibold\">\n              <span>\n                Engineer:{\" \"}\n                <span className=\"font-normal\">{call.employeeName}</span>\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"dark:text-gray-200 text-black text-sm flex flex-col flex-wrap items-start bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full  \">\n          {/* /////////////////////////////// . Problem Description  ///////////////////////////////////////////// */}\n          <div className=\" font-semibold\">\n            <span>\n              Problem Description:{\" \"}\n              <span className=\"font-normal\"> {call.problem}</span>\n            </span>\n          </div>\n        </div>\n        <div className=\"dark:text-gray-200 text-black text-sm flex  space-x-2 items-start bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n          {/* /////////////////////////////// . Update  ///////////////////////////////////////////// */}\n          <div className=\"flex flex-col w-3/4\">\n            <Label className=\"w-full\">\n              <span>Status Update </span>\n              <Select\n                className=\"inline\"\n                onChange={(e) => {\n                  setCall({ ...call, callStatus: e.target.value });\n                  console.log(call);\n                  if (e.target.value == \"11\") {\n                    setSpareModal(true);\n                  }\n                }}\n                value={call.callStatus}\n              >\n                <option value=\"0\">Pending For Allocation</option>\n                <option value=\"1\">Pending for Percall Approval</option>\n                <option value=\"2\"> Pending for Response</option>\n                <option value=\"3\"> Pending for OEM Response</option>\n                <option value=\"4\"> Pending for 2nd Response</option>\n                <option value=\"5\"> Pending for Customer</option>\n                <option value=\"6\"> Under Observation</option>\n                <option value=\"7\"> Pending for Others</option>\n                <option value=\"8\"> Pending for Spare</option>\n                <option value=\"13\"> Pending For Spare Collection</option>\n                <option value=\"12\"> Spare Taken CMRR</option>\n                <option value=\"14\"> Standby Given</option>\n                <option value=\"9\"> Spare in Transit</option>\n                <option value=\"10\"> Cancelled Calls</option>\n                <option value=\"15\"> Pending For Verification</option>\n                <option value=\"11\"> Closed Calls</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-1/4\">\n            <Label className=\"w-full\">\n              <span>Spare Update</span>\n              <Select\n                className=\"inline w-1/2\"\n                onChange={(e) => {\n                  // setCall({ ...call, spareUsed: e.target.value });\n                  setSpareStatus(e.target.value);\n                  console.log(call);\n                }}\n                value={spareStatus}\n              >\n                <option value=\"\" disabled>\n                  Select Spare Status\n                </option>\n                <option value=\"Yes\">Yes</option>\n                <option value=\"No\">No</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* //////////////////////////////////////////////////////////////////////////// */}\n      </div>\n    );\n  };\n\n  const InvTable = () => {\n    return (\n      <div className=\" mt-2 rounded-lg bg-gray-200 dark:bg-gray-700 p-3   overflow-y-auto\">\n        <form\n          // onSubmit={handlevendorSubmit}\n          onSubmit={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <input\n            className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n            placeholder=\"Enter Serial Number \"\n            value={invsearch}\n            onChange={(e) => {\n              setInvSearch(e.target.value);\n            }}\n          />\n        </form>\n\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Select</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody className=\"\">\n                {inventdata.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600  `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowID(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                          className=\"hidden ml-2 mr-3 md:block\"\n                          src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                          alt=\"User image\"\n                        /> */}\n                        <div>\n                          <p className=\"font-semibold\">\n                            {capitalize(user.type)}\n                          </p>\n                          {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {user.accountName}\n                          </p> */}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"\">\n                      {/* later add celltextoverflow class */}\n                      <div className=\"w-40 overflow-auto text-sm\">\n                        {user.name}\n                      </div>\n                    </TableCell>\n\n                    <TableCell>\n                      <div className=\"w-40 overflow-auto text-sm\">\n                        {user.sno}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {user.sno != \"\" ? (\n                        <Button\n                          layout=\"outline\"\n                          className=\"dark:border-green-700 border-green-400\"\n                          onClick={() => {\n                            setAddedInv([...addedinv, user]);\n                          }}\n                        >\n                          Select\n                        </Button>\n                      ) : null}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const ActiveInvent = () => {\n    return (\n      //   {/* Selection Modules */}\n      <div className=\"\">\n        {/*----------- Inventory Selection Table ----------- */}\n        <TableContainer className=\"mt-4\">\n          <div className=\"dark:text-gray-200 text-black text-sm flex space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 font-bold\">\n            Items In Call\n          </div>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableCell>Sl No</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Model</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Condition</TableCell>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {addedinv.map((item, i) => (\n                <TableRow\n                  key={i}\n                  className={`hover:shadow-lg hover:bg-blue-200 dark:hover:bg-gray-600`}\n                >\n                  <TableCell>\n                    <span className=\"text-sm\">{i + 1}</span>\n                  </TableCell>\n\n                  <TableCell className=\"\">\n                    <div>\n                      <p className=\"font-semibold\">{capitalize(item.type)}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{item.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{item.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    {/* <span className=\"text-sm\">{item.condition}</span> */}\n                    <div className=\"flex flex-col w-full\">\n                      <Label className=\"w-full\">\n                        {/* <span>Select Condition*</span> */}\n                        <Select\n                          value={item.condition}\n                          className=\"mt-1\"\n                          onChange={(e) => {\n                            //   console.log(addedinv[i]);\n                            let temp = [...addedinv];\n                            temp[i].condition = e.target.value;\n                            setAddedInv(temp);\n                          }}\n                        >\n                          <option value=\"Good\">Good</option>\n                          <option value=\"Bad\">Bad</option>\n                          <option value=\"Used\">Used</option>\n                          <option value=\"DOA\">DOA</option>\n                          <option value=\"Damaged\">Damaged</option>\n                          <option value=\"Scrap\">Scrap</option>\n                          <option value=\"ScrapSold\">Scrap Sold</option>\n                        </Select>\n                      </Label>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            label=\"Table navigation\"\n            onChange={onPageChange}\n          />\n        </TableFooter> */}\n        </TableContainer>\n      </div>\n    );\n  };\n\n  const CallUpdater = () => {\n    return (\n      <div className=\"border-b pb-3\">\n        <div className=\"flex-row flex  space-x-3 mb-2\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Assigned Date</span>\n              <Input\n                className=\"\"\n                type=\"date\"\n                value={moment(call.assignedDate).format(\"YYYY-MM-DD\")}\n                onChange={(e) => {\n                  setCall({ ...call, callAttendDate: e.target.value });\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Call Attended ETA</span>\n              <Input\n                className=\"\"\n                type=\"time\"\n                value={call.assignedETA}\n                onChange={(e) => {\n                  setCall({ ...call, callAttendDate: e.target.value });\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Call Attended Date*</span>\n              <Input\n                className=\"\"\n                type=\"date\"\n                value={callAttendDate}\n                onChange={(e) => {\n                  setCallAttendDate(e.target.value);\n                }}\n              />\n            </Label>\n            {moment(call.assignedDate).format(\"YYYY-MM-DD\") >\n            moment(callAttendDate).format(\"YYYY-MM-DD\") ? (\n              <span className=\"text-red-700 text-xs\">\n                Error: Selected date is before the assigned date!\n              </span>\n            ) : null}\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Start Of Service*</span>\n              <Input\n                className=\"\"\n                type=\"time\"\n                value={startOfService}\n                onChange={(e) => {\n                  setStartOfService(e.target.value);\n                }}\n              />\n            </Label>\n            {call.assignedETA > startOfService &&\n            moment(call.assignedDate).format(\"YYYY-MM-DD\") ==\n              moment(callAttendDate).format(\"YYYY-MM-DD\") &&\n            startOfService != \"\" ? (\n              <span className=\"text-red-700 text-xs\">\n                Error: Time before assigned ETA!\n              </span>\n            ) : null}\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>End Of Service*</span>\n              <Input\n                className=\"\"\n                type=\"time\"\n                value={endOfService}\n                onChange={(e) => {\n                  setEndOfService(e.target.value);\n                }}\n              />\n            </Label>\n\n            {endOfService < startOfService && endOfService != \"\" ? (\n              <span className=\"text-red-700 text-xs\">\n                Error: Selected time is before start service time!\n              </span>\n            ) : null}\n          </div>\n        </div>\n\n        <div className=\"flex flex-col w-full\">\n          <Label className=\"w-full\">\n            <span>Action Taken*</span>\n            <Input\n              className=\"\"\n              type=\"text\"\n              value={actionTaken}\n              onChange={(e) => {\n                setActionTaken(e.target.value);\n              }}\n            />\n          </Label>\n        </div>\n      </div>\n    );\n  };\n\n  const CallEnder = () => {\n    return (\n      <div className=\"dark:text-gray-200 text-black text-sm flex   space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 \">\n        {/* /////////////////////////////// . Update  ///////////////////////////////////////////// */}\n\n        <div className=\"flex flex-col w-1/4\">\n          <Label className=\"w-full\">\n            <span>CCFR Signed</span>\n            <Select\n              className=\"inline w-1/2\"\n              onChange={(e) => {\n                // setCall({ ...call, spareUsed: e.target.value });\n                setCcfrStatus(e.target.value);\n                // console.log(call);\n              }}\n              value={ccfrStatus}\n            >\n              <option value=\"\" disabled>\n                Select CCFR Status\n              </option>\n              <option value=\"Yes\">Yes</option>\n              <option value=\"No\">No</option>\n            </Select>\n          </Label>\n        </div>\n\n        <div className=\"flex flex-col w-1/4 mt-5\">\n          {ccfrStatus == \"Yes\" ? (\n            <Button\n              layout=\"outline\"\n              className=\"\"\n              onClick={() => {\n                setImageUploadMenuMessage(\"ccfr\");\n                setIsImgUploadMenuModal(true);\n              }}\n            >\n              Upload CCFR\n            </Button>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {HistoryModal()}\n      {AssetHistoryModal()}\n      {ImgUploadModal()}\n      {ImgUploadMenuModal()}\n      {HistoryImgViewModal()}\n      {AssetBar()}\n      {CallUpdater()}\n      {ActiveInvent()}\n      {InventoryTypeSelector()}\n      {InvTable()}\n\n      {UpdatedModal()}\n      {NotSwapModal()}\n      {SpareRequiredModal()}\n      {/* {CallEnder()} */}\n      <div>\n        <div className=\"flex flex-col items-center w-full mt-5 mb-5\">\n          {/* <Link to={`/app/viewcalls`}> */}\n          <Button\n            onClick={() => {\n              handleUpdate();\n            }}\n            layout=\"outline\"\n          >\n            Update Call\n          </Button>\n          {/* <Button\n            onClick={() => {\n            \n              // console.log(existswap.length);\n            }}\n            layout=\"outline\"\n          >\n            Test\n          </Button> */}\n          {/* </Link> */}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default UpdateInvCall;\n"],"sourceRoot":""}