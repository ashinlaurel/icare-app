{"version":3,"sources":["pages/EngineerPages/EnggCalls.js"],"names":["ViewEngineerCalls","useState","isReviewModalOpen","setIsReviewModalOpen","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","TopBarContext","setTopHeading","topheading","page","data","setData","refresh","Business","product","_id","enggName","useEffect","a","axios","url","API","Emp","getId","method","id","EmpProfile","response","console","log","assignedCalls","ReviewSubmit","isOpen","onClose","className","onClick","map","i","callId","priority","key","callNo","moment","date","format","unitName","phone","to","assetId","layout"],"mappings":"0SA6SeA,UAjQf,WAA6B,MAIuBC,oBAAS,GAJhC,mBAIpBC,EAJoB,KAIDC,EAJC,OAMsCC,qBAC/DC,KADgBC,GANS,EAMnBC,SANmB,EAMTD,aAAaE,EANJ,EAMIA,gBANJ,KAMqBC,aAIVR,mBAAS,IAVpB,mBAUpBS,EAVoB,aAYWN,qBAAWO,MAA7BC,GAZO,EAYnBC,WAZmB,EAYPD,eAZO,EAcHX,mBAAS,GAdN,mBAcpBa,EAdoB,aAeHb,mBAAS,KAfN,mBAepBc,EAfoB,KAedC,EAfc,OAiBGf,oBAAS,GAjBZ,mBAiBpBgB,EAjBoB,aAoBKhB,mBAAS,KApBd,mBAoBpBiB,EApBoB,aAqBGjB,mBAAS,KArBZ,mBAqBpBkB,EArBoB,aAwBKlB,mBAAS,CAAEmB,IAAK,GAAIC,SAAU,MAxBnC,gCA0BapB,mBAAS,KA1BtB,6BA6C3BqB,qBAAU,WAER,OAAO,WACLhB,EAAY,GACZE,EAAgB,OAEjB,IAGHc,qBAAU,WAER,OADAV,EAAc,YACP,WACLA,EAAc,OAEf,IAGHU,qBAAU,YAER,uCAAC,4BAAAC,EAAA,+EAEwBC,IAAM,CACzBC,IAAI,GAAD,OAAKC,IAAL,kBAAkBC,IAAIC,QAAtB,oBACHC,OAAQ,OACRd,KAAM,CAACe,GAAGC,IAAWH,WAL1B,OAEOI,EAFP,OAOGC,QAAQC,IAAIF,EAASjB,KAAK,GAAGoB,eAK7BnB,EAAQgB,EAASjB,KAAK,GAAGoB,eAZ5B,oHAAD,yDAkBC,CAACrB,EAAMI,EAAUC,EAASF,IAI7B,IAAMmB,EAAe,WACnB,OACE,oCACE,kBAAC,QAAD,CACEC,OAAQnC,EACRoC,QAAS,kBAAMnC,GAAqB,KAEpC,kBAAC,cAAD,8BACA,kBAAC,YAAD,MACA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEoC,UAAU,mBACVC,QAAS,kBAAMrC,GAAqB,KAFtC,aAYV,OACE,oCAcE,kBAACiC,EAAD,MAKA,yBAAKG,UAAU,cAGb,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACA,kBAAC,YAAD,iBACE,kBAAC,YAAD,gBACA,kBAAC,YAAD,aACA,kBAAC,YAAD,kBACA,kBAAC,YAAD,cACA,kBAAC,YAAD,iBAKJ,kBAAC,YAAD,KACGxB,EAAK0B,KAAI,WAAwBC,GAAxB,EAAEtB,IAAF,IAAMuB,EAAN,EAAMA,OAAOC,EAAb,EAAaA,SAAb,OACR,kBAAC,WAAD,CACEL,UAAS,iDACP7B,GAAeiC,EAAOvB,IAClB,yCACA,QAHG,KAKTyB,IAAKH,EACLF,QAAS,cAWP,kBAAC,YAAD,CAAWD,UAAU,OACrB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBAAiBK,MAKpC,kBAAC,YAAD,CAAWL,UAAU,OACnB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBAAiBI,EAAOG,WAI3C,kBAAC,YAAD,KACE,0BAAMP,UAAU,WACbQ,IAAOJ,EAAOK,MAAMC,OAAO,gBAGhC,kBAAC,YAAD,KACE,0BAAMV,UAAU,WAAWI,EAAOO,WAEpC,kBAAC,YAAD,KACE,0BAAMX,UAAU,WAAWI,EAAOQ,QAEpC,kBAAC,YAAD,KACA,yBAAKZ,UAAU,6CACX,kBAAC,IAAD,CACEM,IAAKF,EAAOvB,IACZgC,GAAE,+BAA0BT,EAAOvB,IAAjC,YAAwCuB,EAAOU,UAEjD,kBAAC,SAAD,CACEC,OAAO,UACPd,QAAS,aACTD,UAAU,KAHZ,mBA+Cd,kBAAC,cAAD","file":"static/js/58.1918d77b.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Label,\n  Select,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\n// import EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n\nfunction ViewEngineerCalls() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [refresh, setRefresh] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n\n  // Getting data states\n\n  // pagination setup\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"My Calls\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      try {\n        let response = await axios({\n          url: `${API}/admin/${Emp.getId()}/getCallsByEmpId`,\n          method: \"POST\",\n          data: {id:EmpProfile.getId()},\n        });\n        console.log(response.data[0].assignedCalls);\n        // setTotalResults(response);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data[0].assignedCalls);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  // console.log(selectedprod);\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>Updated Successfully!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <ReviewSubmit />\n\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n       \n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n              <TableCell>Priority</TableCell>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Update</TableCell>\n                {/* <TableCell>Assigned Employee</TableCell>\n                <TableCell>Update</TableCell> */}\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map(({_id,callId,priority}, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == callId._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    // setActiveRowId(call._id);\n                    // setBBarOpen(1);\n                    // // console.log(\"the id is \" + call._id);\n                    // setSelectedProd(call);\n                    // console.log(\"SELECTD\", call);\n                    // setAssetDetails(call.assetId);\n                    // // console.log(call.product.keyboard[0].kbdname);\n                  }}\n                >\n\n                    <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{priority}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{callId.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(callId.date).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                  <div className=\"flex justify-start items-center space-x-2\">\n                      <Link\n                        key={callId._id}\n                        to={`/app/call/updatecall/${callId._id}/${callId.assetId}`}\n                      >\n                        <Button\n                          layout=\"outline\"\n                          onClick={() => {}}\n                          className=\" \"\n                        >\n                          Update\n                        </Button>\n                      </Link>\n                      {/* <Button\n                        onClick={() => {\n                          setViewId(i);\n                          setHistoryModalOpen(true);\n                        }}\n                        layout=\"outline\"\n                      >\n                        History\n                      </Button> */}\n                    </div>\n                  </TableCell>\n                  {/* <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        {call.employeeName}\n                    \n                      </>\n                    ) : (\n                      <>\n                      \n                        Not Assigned\n                 \n                      </>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Link\n                      key={call._id}\n                      // to={`/app/call/updatecall/${call._id}/${call.assetId._id}`}\n                    >\n                      <Button layout=\"outline\" onClick={() => {}} className=\" \">\n                        Update\n                      </Button>\n                    </Link>\n                  </TableCell> */}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            \n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default ViewEngineerCalls;\n"],"sourceRoot":""}