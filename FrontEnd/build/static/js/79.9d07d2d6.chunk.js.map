{"version":3,"sources":["pages/Notifications/Notifications.js"],"names":["Notifications","useContext","TopBarContext","setTopHeading","topheading","useState","page","setPage","data","setData","refresh","setRefresh","status","location","setLocation","ToLocation","setToLocation","condition","setCondition","LSTtype","setLSTtype","selectedprod","searchquery","setSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","messageModal","setMessageModal","modalMessage","setModalMessage","isDownloadModalOpen","setisDownloadModalOpen","downloadLST","setDownloadLST","downloadNum","setDownloadNum","useEffect","loc","EmpProfile","getLocation","a","console","log","payload","pages","limit","filters","from","to","axios","url","API","Emp","getId","method","response","out","total","createAndDownloadPdf","id","LSTno","CourierNumber","DocketType","update","responseType","pdfBlob","Blob","type","saveAs","updateInventory","i","j","items","lstItem","invItem","invItems","todaydate","moment","format","newhistory","histtype","date","callId","assetId","note","vendorName","_id","sno","$push","history","flag","map","item","name","updatelst","updateCMRRInventory","CMRRItem","CMRRItems","className","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","onClick","user","key","LSTNo","length","layout","aria-label","size","aria-hidden","num","tempdata","temp","filter","x","invnumber","InvTable","resultsPerPage","label","p","isOpen","onClose"],"mappings":"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","file":"static/js/79.9d07d2d6.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n// import { Page, Text, View, Document, StyleSheet,PDFDownloadLink } from '@react-pdf/renderer';\n// import ReactPDF from '@react-pdf/renderer';\n// import { PDFViewer } from '@react-pdf/renderer';\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n// import PrintLST from \"./PrintLST\";\n\nfunction Notifications() {\n  // table variable styles\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [status, setstatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n  const [LSTtype, setLSTtype] = useState(\"Normal\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // ----------------download states------------------------------\n  const [isDownloadModalOpen, setisDownloadModalOpen] = useState(false);\n  const [downloadLST, setDownloadLST] = useState({});\n  const [downloadNum, setDownloadNum] = useState(0);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Notifications\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    let loc = EmpProfile.getLocation();\n    // console.log(\"Location\",loc);\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          // type: type,\n          from: location,\n          to: ToLocation,\n          status: \"In Transit\",\n          LSTtype: LSTtype,\n          // searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      if (loc != \"All\") payload.filters.to = loc;\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/lst/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation, condition, status, refresh, LSTtype]);\n\n  console.log(selectedprod);\n\n  // ----------------------------------Download Functions -------------------------------\n  const DownloadModal = () => {\n    console.log(downloadLST);\n    return (\n      <>\n        <Modal\n          isOpen={isDownloadModalOpen}\n          onClose={() => setisDownloadModalOpen(false)}\n        >\n          <ModalHeader>Download LST</ModalHeader>\n          <ModalBody>\n            {data[downloadNum] ? (\n              <>\n                <div className=\"flex flex-row\">\n                  <div className=\" my-2 ml-5 mr-2 w-full\">Docket Type:</div>\n                  <input\n                    value={data[downloadNum].DocketType}\n                    onChange={(e) => {\n                      let temp = [...data];\n                      temp[downloadNum].DocketType = e.target.value;\n                      // console.log( temp[downloadNum].DocketType)\n                      setData(temp);\n                    }}\n                    class=\"w-full mr-5 shadow-md z-20 appearance-none rounded border border-gray-400 border-b block py-1  bg-white text-sm  text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  />\n                </div>\n\n                <div className=\"flex flex-row my-2\">\n                  <div className=\"my-2 ml-5 mr-2 w-full\">Courier Number:</div>\n                  <input\n                    value={data[downloadNum].CourierNumber}\n                    onChange={(e) => {\n                      let temp = [...data];\n                      temp[downloadNum].CourierNumber = e.target.value;\n                      // console.log( temp[downloadNum].CourierNumber)\n                      setData(temp);\n                    }}\n                    class=\"w-full mr-5  shadow-md z-20 appearance-none rounded border border-gray-400 border-b block py-1  bg-white text-sm  text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  />\n                </div>\n              </>\n            ) : null}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                createAndDownloadPdf(\n                  data[downloadNum]._id,\n                  data[downloadNum].LSTNo,\n                  data[downloadNum].CourierNumber,\n                  data[downloadNum].DocketType\n                );\n              }}\n            >\n              Download\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // PDF Download Functions\n\n  const createAndDownloadPdf = async (id, LSTno, CourierNumber, DocketType) => {\n    let payload = {\n      id: id,\n      update: {\n        CourierNumber,\n        DocketType,\n      },\n    };\n    let response = await axios({\n      url: `${API}/lst/${Emp.getId()}/downloadpdf`,\n      method: \"POST\",\n      data: payload,\n      responseType: \"blob\",\n    });\n\n    const pdfBlob = new Blob([response.data], { type: \"application/pdf\" });\n    setisDownloadModalOpen(false);\n    saveAs(pdfBlob, `LST_${LSTno}.pdf`);\n  };\n\n  // ---------------------------------------------------------------------------------------------------------\n\n  const updateInventory = async (i, j) => {\n    let items = data;\n    let lstItem = data[i];\n    let invItem = lstItem.invItems[j];\n    console.log(lstItem, invItem);\n\n    let todaydate = moment().format();\n\n    // ----history ---\n    let newhistory = {\n      histtype: \"lst\",\n      date: todaydate,\n      location: lstItem.to,\n      callId: \"Nil\",\n      assetId: \"Nil\",\n      status: invItem.condition,\n      note: `Item received at ${lstItem.to}`,\n    };\n    let update = {};\n    if (lstItem.to == \"Vendor\") {\n      newhistory.note = `Item received from ${lstItem.vendorName} back to ${lstItem.from}`;\n      update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.from,\n          sno: invItem.sno,\n          condition: invItem.condition,\n          $push: { history: newhistory },\n        },\n      };\n    } else {\n      update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.to,\n          status: invItem.condition,\n          $push: { history: newhistory },\n        },\n      };\n    }\n    console.log(\"PAYLOAD\", update);\n    try {\n      await axios({\n        url: `${API}/inventory/${Emp.getId()}/invupdate`,\n        method: \"POST\",\n        data: update,\n      });\n      items[i].invItems[j].location = lstItem.to;\n      setData(items);\n      setActiveRowID(-1);\n      setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n    let flag = false;\n    items[i].invItems.map((item) => {\n      if (item.location == \"In Transit\") flag = true;\n    });\n\n    if (flag == true) {\n      setModalMessage(`${invItem.name} Recieved`);\n      setMessageModal(true);\n      return;\n    }\n    const updatelst = {\n      id: lstItem._id,\n      update: {\n        status: \"Received\",\n      },\n    };\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: updatelst,\n      });\n      // items[i].invItems[j].location=lstItem.to;\n      // setData(items);\n      // setActiveRowID(-1);\n      // setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      setModalMessage(\n        `${invItem.name} Recieved.\\n All Items Received from LST`\n      );\n      setMessageModal(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const updateCMRRInventory = async (i, j) => {\n    let items = data;\n    let lstItem = data[i];\n    let CMRRItem = lstItem.CMRRItems[j];\n    console.log(lstItem, CMRRItem);\n\n    items[i].CMRRItems[j].location = lstItem.to;\n    setData(items);\n\n    // setIsReviewModalOpen(true);\n    console.log(\"Done\", items);\n\n    let flag = false;\n    items[i].CMRRItems.map((item) => {\n      if (item.location == \"In Transit\") flag = true;\n    });\n    const updatelst = {\n      id: lstItem._id,\n      update: {\n        CMRRItems: items[i].CMRRItems,\n      },\n    };\n    if (flag == false) {\n      updatelst.update.status = \"Received\";\n    }\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: updatelst,\n      });\n      if (flag == true) {\n        setModalMessage(`${CMRRItem.name} Recieved`);\n        setMessageModal(true);\n        // return;\n      } else {\n        setModalMessage(\n          `${CMRRItem.name} Recieved.\\n All Items Received from LST`\n        );\n        setMessageModal(true);\n      }\n\n      console.log(\"Done\");\n      return;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const InvTable = (num, to) => {\n    let items = data[num].invItems;\n    let LSTtype = data[num].LSTtype;\n    let CMRRItems = data[num].CMRRItems;\n    console.log(\"TO\", items.to);\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3\">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Category</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Inv Number</TableCell>\n                  <TableCell>Condition</TableCell>\n                  <TableCell>Receive</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {LSTtype == \"Normal\" || LSTtype == \"Customer\" ? (\n                  <>\n                    {data[num].invItems.map((user, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                          activeRowID == user._id\n                            ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                            : \"white\"\n                        } `}\n                        key={i}\n                        onClick={() => {\n                          setActiveRowID(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">{user.type}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{user.name}</span>\n                        </TableCell>\n\n                        <TableCell>\n                          {data[num].to == \"Vendor\" &&\n                          user.location == \"In Transit\" ? (\n                            <span className=\"text-sm\">\n                              <input\n                                value={user.sno}\n                                onChange={(e) => {\n                                  let tempdata = data;\n                                  let temp = data[num].invItems;\n                                  temp = temp.filter((x) => {\n                                    if (x._id != user._id) return x;\n                                    else {\n                                      console.log(\n                                        \"here\",\n                                        e.target.value,\n                                        x.name\n                                      );\n                                      x.sno = e.target.value;\n                                      return x;\n                                    }\n                                  });\n                                  // tempnum.invItems=temp;\n                                  tempdata[num].invItems = temp;\n                                  console.log(tempdata);\n                                  // tempdata[num].from=\"TETS\"\n                                  setData([...tempdata]);\n                                }}\n                                placeholder=\"Cse Id.\"\n                                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                              />\n                            </span>\n                          ) : (\n                            user.sno\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{user.location}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{user.invnumber}</span>\n                        </TableCell>\n                        <TableCell>\n                          {data[num].to == \"Vendor\" &&\n                          user.location == \"In Transit\" ? (\n                            <Select\n                              value={user.condition}\n                              className=\"mt-1\"\n                              onChange={(e) => {\n                                let tempdata = data;\n                                let temp = data[num].invItems;\n                                temp = temp.filter((x) => {\n                                  if (x._id != user._id) return x;\n                                  else {\n                                    console.log(\"here\", e.target.value, x.name);\n                                    x.condition = e.target.value;\n                                    return x;\n                                  }\n                                });\n                                // tempnum.invItems=temp;\n                                tempdata[num].invItems = temp;\n                                console.log(tempdata);\n                                // tempdata[num].from=\"TETS\"\n                                setData([...tempdata]);\n                              }}\n                            >\n                              <option value=\"Good\"> Good</option>\n                              <option value=\"Bad\">Bad</option>\n                              <option value=\"DOA\">DOA</option>z\n                            </Select>\n                          ) : (\n                            <Badge\n                              type={\n                                user.condition == \"Good\" ? \"primary\" : \"danger\"\n                              }\n                            >\n                              {user.condition}\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            className=\"dark:border-green-700 border-green-400\"\n                            onClick={() => {\n                              if (user.location == \"In Transit\")\n                                updateInventory(num, i);\n                              else {\n                                setModalMessage(\"Already Received\");\n                                setMessageModal(true);\n                              }\n                            }}\n                          >\n                            {user.location == \"In Transit\" ? (\n                              <>Receive</>\n                            ) : (\n                              <>Received</>\n                            )}\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </>\n                ) : (\n                  <>\n                    {data[num].CMRRItems.map((user, i) => (\n                      <TableRow\n                        // className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                        //   activerowid == user._id\n                        //     ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        //     : \"white\"\n                        // } `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">{user.type}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{user.name}</span>\n                        </TableCell>\n\n                        <TableCell>{user.sno}</TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{user.location}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{user.invnumber}</span>\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            type={\n                              user.condition == \"Good\" ? \"primary\" : \"danger\"\n                            }\n                          >\n                            {user.condition}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            className=\"dark:border-green-700 border-green-400\"\n                            onClick={() => {\n                              if (user.location == \"In Transit\")\n                                updateCMRRInventory(num, i);\n                              else {\n                                setModalMessage(\"Already Received\");\n                                setMessageModal(true);\n                              }\n                            }}\n                          >\n                            {user.location == \"In Transit\" ? (\n                              <>Receive</>\n                            ) : (\n                              <>Received</>\n                            )}\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        <div className=\" font-bold text-xl mt-10 dark:text-white\">\n          LSTs In Transit\n        </div>\n\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  From Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            {EmpProfile.getLocation == \"All\" ? (\n              <>\n                <div class=\"relative mx-1 \">\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={ToLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      To Location\n                    </option>\n                    <option value=\"\">All</option>\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                  </select>\n\n                  <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                    <svg\n                      class=\"fill-current h-4 w-4\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                    </svg>\n                  </div>\n                </div>\n              </>\n            ) : null}\n\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={LSTtype}\n                onChange={(e) => {\n                  setLSTtype(e.target.value);\n                }}\n              >\n                <option value=\"\" selected>\n                  All\n                </option>\n                <option value=\"Normal\">Normal</option>\n                <option value=\"CMRR\">CMRR</option>\n                <option value=\"Customer\">Customer</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search LST Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr className=\"flex flex-row justify-between\">\n                <TableCell>LST.No</TableCell>\n                <TableCell>From</TableCell>\n                <TableCell>To</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>No.</TableCell>\n                {/* <TableCell>Status</TableCell> */}\n                <TableCell> Report</TableCell>\n                <TableCell>\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => setActiveRowID(-1)}\n                  >\n                    Items\n                  </span>\n                </TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <div className=\"flex flex-col justify-around\">\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                      activeRowID == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowID(i);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.LSTNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.from}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {user.to == \"Vendor\" ? user.vendorName : user.to}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {\" \"}\n                        {moment(user.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {user.LSTtype == \"Normal\" || user.LSTtype == \"Customer\"\n                          ? user.invItems.length\n                          : user.CMRRItems.length}\n                      </span>\n                    </TableCell>\n                    {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n                    <TableCell className=\"text-center \">\n                      <Button\n                        layout=\"outline\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(\"dwlod\");\n                          // createAndDownloadPdf(user._id, user.LSTNo);\n                          setDownloadLST(user);\n                          setisDownloadModalOpen(true);\n                          setDownloadNum(i);\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        Download\n                      </Button>\n                    </TableCell>\n                    <TableCell className=\"text-center \">\n                      <Button\n                        // layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(activeRowID);\n                          console.log(i);\n                          if (activeRowID == i) {\n                            setActiveRowID(-1);\n                          } else {\n                            setActiveRowID(i);\n                          }\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        <DropdownIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n\n                  {activeRowID == i ? InvTable(i, user.to) : null}\n                </div>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {DownloadModal()}\n      {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default Notifications;\n"],"sourceRoot":""}