{"version":3,"sources":["pages/Calls/EnggPriorityList.js"],"names":["EnggPriorityList","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","TopBarContext","setTopHeading","topheading","setPage","data","setData","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","totalResults","setTotalResults","useEffect","a","payload","pages","page","limit","filters","callStatus","searchquery","fromDate","toDate","employeeId","_id","console","log","axios","url","API","Emp","getId","method","response","out","total","submitCustomer","newuser","assignedCalls","id","update","isModalOpen","setIsModalOpen","setEmployee","className","layout","onClick","map","item","i","key","callNo","moment","date","format","assignedDate","assignedETA","unitName","phone","resultsPerPage","label","onChange","p"],"mappings":"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","file":"static/js/59.976fab31.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport SelectEmployeeModal from \"../../components/Modal/SelectEmployeeModal\";\nimport SelectEmployeeModalForCalls from \"../../components/Modal/SelectEmployeeModalForCalls\";\n\nfunction EnggPriorityList() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  /////// engineer\n  const [engineer, setEngineer] = useState(null);\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const AddEnggModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={addEnggModalOpen}\n          onClose={() => setaddEnggModalOpen(false)}\n        >\n          <ModalHeader>Confirm Assignment</ModalHeader>\n          <ModalBody>\n            <div className=\"font-xl text-xl\">\n              Assign {engineer.enggName} to call {selectedprod.callNo}\n            </div>\n\n            <div className=\"flex flex-col w-full mt-2\">\n              <Label className=\"w-full\">\n                <span>Assign Date</span>\n                <Input\n                  className=\"\"\n                  type=\"date\"\n                  value={moment(assignedDate).format(\"YYYY-MM-DD\")}\n                  onChange={(e) => {\n                    // setCall({ ...call, callAttendDate: e.target.value });\n                    setAssignedDate(e.target.value);\n                  }}\n                />\n              </Label>\n            </div>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Assign ETA</span>\n                <Input\n                  className=\"\"\n                  type=\"time\"\n                  value={assignedETA}\n                  onChange={(e) => {\n                    // setCall({ ...call, startOfService: e.target.value });\n                    setAssignedETA(e.target.value);\n                  }}\n                />\n              </Label>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(selectedprod);\n                if (assignedDate == \"\" || assignedETA == \"\") {\n                  return;\n                }\n\n                // ----- history ---\n                let newcallhistory = {\n                  date: moment().format(),\n                  callStatus: \"2\",\n                  engineer: engineer.enggName,\n                  callAttendDate: \"Nil\",\n                  startOfService: \"Nil\",\n                  endOfService: \"Nil\",\n                  note: `${engineer.enggName} has been assigned to the call. Assigned Date: ${assignedDate} Assigned ETA: ${assignedETA}`,\n                  actionTaken: \"Nil\",\n                };\n\n                let payload = {\n                  id: selectedprod._id,\n                  update: {\n                    employeeId: engineer._id,\n                    employeeName: engineer.enggName,\n                    callStatus: 2,\n                    assignedDate: assignedDate,\n                    assignedETA: assignedETA,\n                    $push: { history: newcallhistory },\n                  },\n                };\n                let employeepayload = {\n                  id: engineer._id,\n                  update: {\n                    $push: {\n                      assignedCalls: {\n                        priority: 99,\n                        callId: selectedprod._id,\n                        date: new Date(),\n                      },\n                    },\n                  },\n                };\n                try {\n                  let response = await axios({\n                    url: `${API}/call/${Emp.getId()}/assignEngg`,\n                    method: \"POST\",\n                    data: payload,\n                  });\n                  let temp = data;\n                  console.log(temp);\n                  temp = temp.filter((c) => {\n                    if (c._id === selectedprod._id) {\n                      c.callStatus = 2;\n                      c.employeeName = engineer.enggName;\n                      c.employeeId = engineer._id;\n                      return c;\n                    }\n                    setData(temp);\n                  });\n                  // updating employee modal\n\n                  await axios({\n                    url: `${API}/admin/${Emp.getId()}/update`,\n                    method: \"POST\",\n                    data: employeepayload,\n                  });\n                  // console.log(response.data);\n                  setaddEnggModalOpen(false);\n                  setAssignedDate(\"\");\n                  setAssignedETA(\"\");\n                } catch (error) {\n                  throw error;\n                }\n              }}\n            >\n              Confirm Assignment\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // useEffect(() => {\n  //   setData(engineer.assignedCalls);\n  // }, [engineer]);\n\n  useEffect(() => {\n    (async () => {\n      if (engineer) {\n        let payload = {\n          pages: {\n            page: 1,\n            limit: 10000,\n          },\n          filters: {\n            callStatus: \"\",\n            searchquery: \"\",\n            fromDate: \"\",\n            toDate: \"\",\n            employeeId: engineer._id,\n          },\n        };\n        console.log(\"HERE\", payload);\n        try {\n          let response = await axios({\n            url: `${API}/call/${Emp.getId()}/getall`,\n            method: \"POST\",\n            data: payload,\n          });\n          console.log(response.data.out);\n          setTotalResults(response.data.total);\n          setData(response.data.out);\n          // const { total, data } = response.data;\n          // console.log(data + \"Now\");\n\n          setData(response.data.out);\n        } catch (error) {\n          throw error;\n        }\n        // console.log(engineer)\n      }\n    })();\n  }, [engineer]);\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Engineer Call Priority\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  const submitCustomer = async () => {\n    console.log(\"DATA\", data);\n    // e.preventDefault();\n    const newuser = {\n      assignedCalls: [...data],\n    };\n    console.log(newuser);\n\n    const payload = {\n      id: engineer._id,\n      update: newuser,\n    };\n    try {\n      await axios({\n        url: `${API}/admin/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: payload,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SelectEmployeeModalForCalls\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEmployee={setEngineer}\n      />\n      <SelectEmployeeModalForCalls />\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"flex flex-row items-center justify-start space-x-2\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <Button layout=\"outline\" onClick={() => setIsEnggModalOpen(true)}>\n            Select Engineer\n          </Button>\n          <Button onClick={() => submitCustomer(true)}>Submit</Button>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Assigned Date</TableCell>\n                <TableCell>Assigned ETA</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Priority</TableCell>\n                {/* <TableCell>Edit </TableCell> */}\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {engineer &&\n                data.map((item, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == item._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowId(callId._id);\n                      // setBBarOpen(1);\n                      // // console.log(\"the id is \" + call._id);\n                      // setSelectedProd(callId);\n                      // if (callId.assetId) setAssetDetails(callId.assetId);\n                      // else setAssetDetails({});\n                      // console.log(callId.assetId);\n                      // console.log(call.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{item.callNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(item.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(item.assignedDate).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{item.assignedETA}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{item.unitName}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{item.phone}</span>\n                    </TableCell>\n                    <TableCell>\n                      {item.callStatus == 0 ? (\n                        <span className=\"text-sm\">Pending For Allocation</span>\n                      ) : null}\n                      {item.callStatus == 1 ? (\n                        <span className=\"text-sm\">\n                          Pending for Percall Approval\n                        </span>\n                      ) : null}\n                      {item.callStatus == 2 ? (\n                        <span className=\"text-sm\">Pending for Response</span>\n                      ) : null}\n                      {item.callStatus == 3 ? (\n                        <span className=\"text-sm\">\n                          Pending for OEM Response\n                        </span>\n                      ) : null}\n                      {item.callStatus == 4 ? (\n                        <span className=\"text-sm\">\n                          Pending for 2nd Response\n                        </span>\n                      ) : null}\n                      {item.callStatus == 5 ? (\n                        <span className=\"text-sm\">Pending for Customer</span>\n                      ) : null}\n                      {item.callStatus == 6 ? (\n                        <span className=\"text-sm\">Under Observation</span>\n                      ) : null}\n                      {item.callStatus == 7 ? (\n                        <span className=\"text-sm\">Pending for Others</span>\n                      ) : null}\n                      {item.callStatus == 8 ? (\n                        <span className=\"text-sm\">Pending for Spare</span>\n                      ) : null}\n                      {item.callStatus == 9 ? (\n                        <span className=\"text-sm\">Spare in Transit</span>\n                      ) : null}\n                      {item.callStatus == 10 ? (\n                        <span className=\"text-sm\">Cancelled Calls</span>\n                      ) : null}\n                      {item.callStatus == 11 ? (\n                        <span className=\"text-sm\">Closed Calls</span>\n                      ) : null}\n                      {item.callStatus == 12 ? (\n                        <span className=\"text-sm\">Spare Taken CMRR</span>\n                      ) : null}\n                      {item.callStatus == 13 ? (\n                        <span className=\"text-sm\">Closed Calls</span>\n                      ) : null}\n                    </TableCell>\n                    <TableCell>\n                      {i + 1}\n                      {/* <input\n                      value={priority}\n                      onChange={(e) => {\n                        let temp = data;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != _id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.priority = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setData(temp);\n                      }} */}\n                    </TableCell>\n                    {/* <TableCell>\n                    \n                      \n                        <div className=\"px-2 py-2 dark:border-purple-400 border-purple-600 dark:bg-gray-700 bg-purple-100 inline-block rounded-full dark:text-purple-400 text-purple-700\">\n                          \n                          <Button\n                            layout=\"link\"\n                            size=\"icon\"\n                            aria-label=\"Edit\"\n                            onClick={() => {\n                              setIsEnggModalOpen(true);\n                              setAssignedETA(item.assignedETA);\n                              setAssignedDate(item.assignedDate);\n                            }}\n                            className=\"rounded-full mx-2 \"\n                          >\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                          </Button>\n                        </div>\n                      \n                  </TableCell> */}\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default EnggPriorityList;\n"],"sourceRoot":""}