{"version":3,"sources":["pages/Employee/LeaveHistory.js","components/Modal/AssetFilters/CustomerSelection.js"],"names":["LeaveHistory","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","useState","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","refresh","setRefresh","status","setStatus","location","selectedprod","isapproveModal","setIsapproveModal","messageModal","setMessageModal","modalMessage","setModalMessage","totalResults","setTotalResults","selected","setSelected","useEffect","a","console","log","payload","pages","limit","filters","axios","url","API","Emp","getId","method","response","out","total","handleChange","name","e","target","value","className","isOpen","onClose","type","startdate","onChange","enddate","Math","floor","Date","parse","reason","onClick","id","_id","update","employeeName","employeeId","then","catch","err","class","disabled","xmlns","viewBox","d","map","user","i","key","moment","format","style","textOverflow","layout","resultsPerPage","label","p","CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","theunitdetails","setTheUnitDetails","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleSubmit","preventDefault","role","pickCustomer","customerName","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","contactPerson","contactNo","selectedIndex","onSelect","ind","onSubmit","placeholder"],"mappings":"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","file":"static/js/52.c4728e90.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Input,\n  Label,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n\nfunction LeaveHistory() {\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n\n  // filterhooks\n  const [status, setStatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //modal\n  const [isapproveModal, setIsapproveModal] = useState(false);\n\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n  const [selected, setSelected] = useState(false);\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Leave History\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          status: status,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n      try {\n        let response = await axios({\n          url: `${API}/leave/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        console.log(location, \"LOCATIO!!!\");\n        console.log(`response.data.out`, response.data.out);\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, status, refresh]);\n\n  const handleChange = (name) => (e) => {\n    setSelected({ ...selected, [name]: e.target.value });\n  };\n\n  console.log(selectedprod);\n\n  // useEffect(() => {\n  //   console.log(\"LOACTION\",EmpProfile.getLocation())\n  //      if(EmpProfile.getRole()>12&& EmpProfile.getLocation()!=\"All\") setLocation(EmpProfile.getLocation())\n  //      setRefresh(!refresh);\n  //    }, [])\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const ApproveModal = () => {\n    return (\n      <>\n        <Modal isOpen={isapproveModal} onClose={() => setIsapproveModal(false)}>\n          <ModalHeader>Leave Information.</ModalHeader>\n          <ModalBody>\n            <div>\n              <div className=\"flex-row flex space-x-3 w-full\">\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Start Date*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"date\"\n                      value={selected.startdate}\n                      onChange={handleChange(\"startdate\")}\n                    />\n                  </Label>\n                  {/* <HelperText valid={false}>{err.invnumber}</HelperText> */}\n                </div>\n\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>End Date*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"date\"\n                      value={selected.enddate}\n                      onChange={handleChange(\"enddate\")}\n                    />\n                  </Label>\n                  {/* <HelperText valid={false}>{err.invnumber}</HelperText> */}\n                </div>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <div>Number of Days</div>\n                    <div className=\"text-xl font-semibold my-2 p-2 mx-5 text-black dark:text-white\">\n                      {selected.startdate != \"\" && selected.enddate != \"\" ? (\n                        Math.floor(\n                          (Date.parse(selected.enddate) -\n                            Date.parse(selected.startdate)) /\n                            86400000\n                        ) >= 0 ? (\n                          Math.floor(\n                            (Date.parse(selected.enddate) -\n                              Date.parse(selected.startdate)) /\n                              86400000\n                          ) + 1\n                        ) : (\n                          <>Invalid Dates</>\n                        )\n                      ) : null}\n                    </div>\n                  </Label>\n                  {/* <HelperText valid={false}>{err.invnumber}</HelperText> */}\n                </div>\n              </div>\n              {/* ----------------------Row 2 ----------------------------- */}\n              <div className=\"flex-row flex space-x-3 my-2\">\n                <div className=\"flex flex-col w-full \">\n                  <Label className=\"w-full\">\n                    <span>Reason</span>\n                    <div className=\"text-lg\">{selected.reason}</div>\n                  </Label>\n                  {/* <HelperText valid={false}>{err.invnumber}</HelperText> */}\n                </div>\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                if (selected.startdate === \"\") {\n                  setModalMessage(\"Start Date necessary\");\n                  setMessageModal(true);\n                  console.log(\"missing inputs\");\n                  return;\n                }\n                if (selected.enddate === \"\") {\n                  setModalMessage(\"End Date necessary\");\n                  setMessageModal(true);\n                  console.log(\"missing inputs\");\n                  return;\n                }\n\n                if (\n                  Math.floor(\n                    (Date.parse(selected.enddate) -\n                      Date.parse(selected.startdate)) /\n                      86400000\n                  ) < 0\n                ) {\n                  setModalMessage(\"Invalid Date\");\n                  setMessageModal(true);\n                  console.log(\"invalid inputs\");\n                  return;\n                }\n                let payload = {\n                  id: selected._id,\n                  update: {\n                    employeeName: selected.employeeName,\n                    employeeId: selected.employeeId,\n                    reason: selected.reason,\n                    startdate: selected.startdate,\n                    enddate: selected.enddate,\n                    status: \"Approved\",\n                  },\n                };\n                console.log(payload);\n                await axios({\n                  url: `${API}/leave/${Emp.getId()}/approve`,\n                  method: \"POST\",\n                  data: payload,\n                })\n                  .then((data) => {\n                    console.log(\"Updated\", data);\n                    setIsapproveModal(false);\n                    setModalMessage(\"Leave Approved\");\n                    setMessageModal(true);\n                  })\n                  .catch((err) => {\n                    setModalMessage(\"Error\");\n                    setMessageModal(true);\n                    console.log(\"err\", err);\n                  });\n                setRefresh(!refresh);\n              }}\n            >\n              Approve\n            </Button>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(`slected`, selected);\n                let payload = {\n                  id: selected._id,\n                  update: {\n                    status: \"Rejected\",\n                  },\n                };\n                // console.log(newitems);\n                await axios({\n                  url: `${API}/leave/${Emp.getId()}/approve`,\n                  method: \"POST\",\n                  data: payload,\n                })\n                  .then((data) => {\n                    console.log(\"Updated\", data);\n                    setIsapproveModal(false);\n                    setModalMessage(\"Leave Rejected\");\n                    setMessageModal(true);\n                  })\n                  .catch((err) => {\n                    setModalMessage(\"Error\");\n                    setMessageModal(true);\n                    console.log(\"err\", err);\n                  });\n                setRefresh(!refresh);\n              }}\n            >\n              Reject\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        {ApproveModal()}\n        {messageModalComponent()}\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={status}\n                onChange={(e) => {\n                  setStatus(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Status\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Submitted\">Submitted</option>\n                <option value=\"Rejected\">Rejected</option>\n                <option value=\"Approved\">Approved</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Employee Name</TableCell>\n                <TableCell>Start Date</TableCell>\n                <TableCell>End Date</TableCell>\n                <TableCell>Days</TableCell>\n                <TableCell>Reason</TableCell>\n                <TableCell>Status</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(user._id);\n\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell>\n                    <span className=\"text-sm\">{user.employeeName}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(user.startdate).format(\"DD-MM-YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell className=\"w-8\">\n                    <div>\n                      <p className=\"\">\n                        {moment(user.enddate).format(\"DD-MM-YYYY\")}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"w-8\">\n                    <div>\n                      {Math.floor(\n                        (Date.parse(user.enddate) -\n                          Date.parse(user.startdate)) /\n                          86400000\n                      ) + 1}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\" w-64 break-all \">\n                    <div\n                      className=\"break-all w-80  overflow-hidden\"\n                      style={{ textOverflow: \"clip\" }}\n                    >\n                      {/* <p className=\"font-semibold   w-48  break-words\"> */}\n                      {user.reason}\n                      {/* </p> */}\n                    </div>\n                  </TableCell>\n\n                  <TableCell>\n                    {user.status == \"Submitted\" ? (\n                      <Button\n                        layout=\"outline\"\n                        className=\"text-sm\"\n                        onClick={() => {\n                          setSelected(user);\n                          setIsapproveModal(true);\n                        }}\n                      >\n                        Approve\n                      </Button>\n                    ) : (\n                      <div className=\"text-purple-700 dark:text-purple-400 font-semibold\">\n                        {user.status}\n                      </div>\n                    )}\n                  </TableCell>\n\n                  {/* ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */}\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LeaveHistory;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\"  >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}