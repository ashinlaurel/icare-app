{"version":3,"sources":["components/Modal/AssetFilters/CustomerSelection.js","pages/Calls/RegisterCall.js"],"names":["CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","refresh","setRefresh","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","className","placeholder","onChange","map","i","key","onClick","type","RegisterCall","useHistory","isReviewModalOpen","setIsReviewModalOpen","isReqFieldModal","setIsReqFieldModal","isAssetModal","setIsAssetModal","IsassetexistModal","setIsassetexistModal","assetexistmessage","setAssetexistmessage","setTopHeading","useContext","TopBarContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","page","setPage","setData","setIsOpen","isOpenTwo","setIsOpenTwo","disabler","setDisabler","Business","setBusiness","product","setProduct","selectedprod","setSelectedProd","searchtype","setSearchType","searchlabel","setSearchLabel","searchquery","setSearchQuery","date","callStatus","engineer","callAttendDate","startOfService","endOfService","note","actionTaken","callhistory","setCallHistory","totalResults","setTotalResults","successfulCallNo","setSuccessfulCallNo","onPageChange","p","pages","limit","filters","business","producttype","unitId","Emp","getId","out","total","valobj","callNo","contactPerson","phone","problem","time","values","setValues","thedate","callNumberSetter","thecallcount","year","moment","format","month","day","callnumber","thestring","temp","submitCall","JSON","stringify","newcall","assetId","history","regtimestamp","errid","message","disabled","class","xmlns","viewBox","d","selected","aria-label","aria-haspopup","user","serialno","contractfrom","contractto","ponumber","podate","resultsPerPage","label"],"mappings":"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","file":"static/js/43.55f07c07.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport moment from \"moment\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nimport {\n  Input,\n  HelperText,\n  Label,\n  Button,\n  Badge,\n  Select,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { signup, signin, authenticate } from \"../../helpers/auth\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nimport { useHistory } from \"react-router-dom\";\n\n// --------ASSET\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { Link } from \"react-router-dom\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\n/////////////----------------->>>>>> bug <<<<<------------customerList refresh-------------------------\n\nfunction RegisterCall() {\n  let history = useHistory();\n\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [isReqFieldModal, setIsReqFieldModal] = useState(false);\n  const [isAssetModal, setIsAssetModal] = useState(false);\n  const [IsassetexistModal, setIsassetexistModal] = useState(false);\n  const [assetexistmessage, setAssetexistmessage] = useState(\"\");\n  const { setTopHeading } = useContext(TopBarContext);\n\n  //---------------------------------- ASSETS VIEW STATES\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n\n  // Bottom bar stuff\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // call history\n  const [callhistory, setCallHistory] = useState([\n    {\n      date: \"\",\n      callStatus: \"0\",\n      engineer: \"Yet To Be Assigned\",\n      callAttendDate: \"Nil\",\n      startOfService: \"Nil\",\n      endOfService: \"Nil\",\n      note: \"Call has been registered\",\n      actionTaken: \"Nil\",\n    },\n  ]);\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n  const [successfulCallNo, setSuccessfulCallNo] = useState(\"\");\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assets Management\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          business: Business,\n          producttype: product,\n          customer: customer,\n          account: account,\n          unitId: unit._id,\n          customerId: customer._id,\n          accountId: account._id,\n          searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/asset/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  // console.log(\"SELECTED PROD\",selectedprod,\"NOOOO\");\n\n  const Asset = () => {\n    return (\n      <>\n        {/* ---------------------Customer Selection Modal----------------------------------------- */}\n        <CustomerSelection\n          isModalOpen={isModalOpen}\n          setIsModalOpen={setIsModalOpen}\n          setUnit={setUnit}\n          unit={unit}\n          customer={customer}\n          setCustomer={setCustomer}\n          account={account}\n          setAccount={setAccount}\n          refresh={refresh}\n          setRefresh={setRefresh}\n        />\n        {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n        {/* {floatbox ? <AssetFloat /> : null} */}\n        <div className=\"mb-64 mt-1\">\n          <div className=\"dark:text-white flex items-center font-bold my-2 text-xl\">\n            Pick Asset\n          </div>\n          {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n          <div className=\"\">\n            {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n            <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n              <div class=\"relative  \">\n                <button\n                  class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                  onClick={() => {\n                    setIsModalOpen(!isModalOpen);\n                  }}\n                  // value={sortBy}\n                  // onChange={onSortToggle}\n                >\n                  Pick Customer\n                </button>\n\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n\n              <div class=\"relative mx-5 \">\n                <select\n                  class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                  value={Business}\n                  onChange={(e) => {\n                    setBusiness(e.target.value);\n                  }}\n                >\n                  <option value=\"\" disabled selected>\n                    Business Type\n                  </option>\n                  <option value=\"\">All</option>\n                  <option value=\"AMC\">AMC</option>\n                  <option value=\"WTY\">Warranty</option>\n                  <option value=\"NOS\">NOS</option>\n                </select>\n\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n              {/* ---------------------------Product Drop Down-------------------------------------- */}\n              <div className=\"relative z-40 \">\n                <button\n                  onClick={() => {\n                    setIsOpen(!isOpen);\n                  }}\n                  className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  aria-label=\"Notifications\"\n                  aria-haspopup=\"true\"\n                >\n                  {product ? product : \"Pick Product\"}\n                </button>\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n                <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"\");\n                    }}\n                  >\n                    <span>All</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Console\");\n                    }}\n                  >\n                    <span>Console</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"DMP\");\n                    }}\n                  >\n                    <span>DMP</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Inkjet\");\n                    }}\n                  >\n                    <span>Inkjet</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"KVM\");\n                    }}\n                  >\n                    <span>KVM</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Laptop\");\n                    }}\n                  >\n                    <span>Laptop</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Laser\");\n                    }}\n                  >\n                    <span>Laser</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"LMP\");\n                    }}\n                  >\n                    <span>LMP</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Module\");\n                    }}\n                  >\n                    <span>Module</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Router\");\n                    }}\n                  >\n                    <span>Router</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Scanner\");\n                    }}\n                  >\n                    <span>Scanner</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Server\");\n                    }}\n                  >\n                    <span>Server</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Desktop\");\n                    }}\n                  >\n                    <span>Desktop</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Storage\");\n                    }}\n                  >\n                    <span>Storage</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Switch\");\n                    }}\n                  >\n                    <span>Switch</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"UPS\");\n                    }}\n                  >\n                    <span>UPS</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpen(false);\n                      setProduct(\"Others\");\n                    }}\n                  >\n                    <span>Others</span>\n                  </DropdownItem>\n                </Dropdown>\n              </div>\n\n              {/* -------------------------------Search Type--------------------------------------- */}\n              <div className=\"relative \">\n                <button\n                  onClick={() => {\n                    setIsOpenTwo(!isOpenTwo);\n                  }}\n                  className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  aria-label=\"Notifications\"\n                  aria-haspopup=\"true\"\n                >\n                  {searchtype ? searchlabel : \"Pick Search Type\"}\n                </button>\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n                <Dropdown\n                  isOpen={isOpenTwo}\n                  onClose={() => setIsOpenTwo(false)}\n                >\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"\");\n                      setSearchLabel(\"\");\n                      setDisabler(true);\n                      setSearchQuery(\"\");\n                      setRefresh(!refresh);\n                    }}\n                  >\n                    <span>All</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"keyboardsno\");\n                      setSearchLabel(\"Keyboard Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Keyboard Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"mousesno\");\n                      setSearchLabel(\"Mouse Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Mouse Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"motherboardsno\");\n                      setSearchLabel(\"Motherboard Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Motherboard Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"monitorsno\");\n                      setSearchLabel(\"Monitor Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Monitor Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"hddsno\");\n                      setSearchLabel(\"HDD Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>HDD Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"cpusno\");\n                      setSearchLabel(\"CPU Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>CPU Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"ramsno\");\n                      setSearchLabel(\"Ram Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>RAM Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"smpssno\");\n                      setSearchLabel(\"SMPS Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>SMPS Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"fansno\");\n                      setSearchLabel(\"Fan Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Fan Serial</span>\n                  </DropdownItem>\n                  <DropdownItem\n                    onClick={() => {\n                      setIsOpenTwo(false);\n                      setSearchType(\"opticaldrivesno\");\n                      setSearchLabel(\"Optical Drive Serial\");\n                      setDisabler(false);\n                    }}\n                  >\n                    <span>Optical Drive Serial</span>\n                  </DropdownItem>\n                </Dropdown>\n              </div>\n              {/* -----------------Search Bar------------------------------------ */}\n              <div class=\"block relative xl:ml-64\">\n                <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                  <svg\n                    viewBox=\"0 0 24 24\"\n                    class=\"h-4 w-4 fill-current text-gray-500\"\n                  >\n                    <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                  </svg>\n                </span>\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    setRefresh(!refresh);\n                  }}\n                >\n                  <input\n                    value={searchquery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\"Search\"\n                    disabled={disabler}\n                    class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  />\n                </form>\n              </div>\n            </div>\n            {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n            {/* <div className=\"my-4 flex \">\n            <div class=\"relative \">\n              <select\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                <option value=\"TIME_ASC\">Time(Latest)</option>\n                <option value=\"TIME_DESC\">Time(Oldest)</option>\n                <option value=\"NAME_ASC\">Name(A-Z)</option>\n                <option value=\"NAME_DESC\">Name(Z-A)</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div> */}\n          </div>\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Customer</TableCell>\n                  <TableCell>Unit</TableCell>\n                  <TableCell>Business</TableCell>\n                  <TableCell>Product</TableCell>\n                  <TableCell>Product Serial</TableCell>\n                  <TableCell>Contract From</TableCell>\n                  <TableCell>Contract To</TableCell>\n                  <TableCell>Purchase Number</TableCell>\n                  <TableCell>Purchase Date</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {data.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      setSelectedProd(user);\n                      setAssetDetails(user);\n                      setBBarOpen(1);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                        <div>\n                          <p className=\"font-semibold\">{user.customerName}</p>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {user.accountName}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.unitName}</span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        type={user.business == \"AMC\" ? \"primary\" : \"success\"}\n                      >\n                        {user.business}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.producttype}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.product.serialno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.contractfrom).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.contractto).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.ponumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.podate).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            <TableFooter>\n              <Pagination\n                totalResults={totalResults}\n                resultsPerPage={resultsPerPage}\n                label=\"Table navigation\"\n                onChange={onPageChange}\n              />\n            </TableFooter>\n            <div className=\"flex justify-end\">\n              <Button className=\" mb-10 my-2 \" onClick={submitCall}>\n                Register Call\n              </Button>\n            </div>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </>\n    );\n  };\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  // *\n  //---------------------------------- ASSETS VIEW STATES\n\n  let valobj = {\n    //both\n    callNo: \"\",\n    date: \"\",\n    contactPerson: \"\",\n    phone: \"\",\n    callStatus: \"Pending for allocation\",\n    problem: \"\",\n    time: \"\",\n  };\n  const [values, setValues] = useState(valobj);\n  const [err, setErr] = useState({});\n\n  // ----------------------Heading Use Effect-------------\n\n  useEffect(() => {\n    setTopHeading(\"Register Call\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  const handleChange = (name) => (e) => {\n    let thedate = e.target.value;\n    setValues({ ...values, [name]: e.target.value });\n    if (name == \"date\") {\n      callNumberSetter(thedate);\n    }\n  };\n\n  const callNumberSetter = async (date) => {\n    let payload = {\n      date: date,\n    };\n    let thecallcount = 0;\n    try {\n      thecallcount = await axios({\n        url: `${API}/call/${Emp.getId()}/callsbydate`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    let year = moment(date).format(\"YY\");\n    let month = moment(date).format(\"MM\");\n    let day = moment(date).format(\"DD\");\n    let callnumber = thecallcount.data + 1;\n    if (callnumber < 10) {\n      callnumber = \"0\" + callnumber;\n    }\n\n    let thestring = year + month + day + callnumber;\n    setValues({ ...values, callNo: thestring, date: date });\n    // ------history management\n    let temp = callhistory;\n    temp[0].date = date;\n    setCallHistory(temp);\n\n    console.log(thestring);\n  };\n\n  const submitCall = async () => {\n    if (\n      values.callNo === \"\" ||\n      // (values.contactPerson === \"\") |\n      // (values.phone === \"\") |\n      values.problem === \"\" ||\n      values.date === \"\" ||\n      values.time === \"\"\n    ) {\n      setIsReqFieldModal(true);\n      return;\n    }\n    if (JSON.stringify(selectedprod) == JSON.stringify({})) {\n      setIsAssetModal(true);\n      return;\n    }\n    // e.preventDefault();\n    setSuccessfulCallNo(values.callNo);\n    const newcall = {\n      callNo: values.callNo,\n      date: values.date,\n      time: values.time,\n      contactPerson: values.contactPerson,\n      phone: values.phone,\n      problem: values.problem,\n      unitId: selectedprod.unitId,\n      unitName: selectedprod.unitName,\n      accountId: selectedprod.accountId,\n      accountName: selectedprod.accountName,\n      customerId: selectedprod.customerId,\n      customerName: selectedprod.customerName,\n      assetId: selectedprod._id,\n      callStatus: 0,\n      history: callhistory,\n      regtimestamp: moment().format(),\n      // employeeId:\"\"\n    };\n    console.log(\"CALL->\", newcall);\n    try {\n      await axios({\n        url: `${API}/call/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: newcall,\n      });\n      setIsReviewModalOpen(true);\n      setValues(valobj);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error.response.data);\n      if (error.response.data.errid == 1) {\n        setAssetexistmessage(error.response.data.message);\n        setIsassetexistModal(true);\n      }\n    }\n  };\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>\n            Created Call No. {successfulCallNo} Successfully!\n          </ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const ReqFieldErrModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReqFieldModal}\n          onClose={() => setIsReqFieldModal(false)}\n        >\n          <ModalHeader>Required fields are not filled!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReqFieldModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const AssetSelectedModal = () => {\n    return (\n      <>\n        <Modal isOpen={isAssetModal} onClose={() => setIsAssetModal(false)}>\n          <ModalHeader>Asset is not selected!</ModalHeader>\n          <ModalBody>Please select asset before registering call.</ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsAssetModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const AssetExistsModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={IsassetexistModal}\n          onClose={() => setIsassetexistModal(false)}\n        >\n          <ModalHeader>Call already raised for asset!</ModalHeader>\n          <ModalBody>\n            Call No {assetexistmessage} already raised for asset.\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsassetexistModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const addForm = () => {\n    return (\n      <div className=\"px-4 py-3 mt-4 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>Call Information</span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Call Number*</span>\n                <Input\n                  disabled\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values.callNo}\n                  onChange={handleChange(\"callNo\")}\n                />\n              </Label>\n              {/* <HelperText valid={false}>{err.callNo}</HelperText> */}\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Date*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"date\"\n                value={values.date}\n                onChange={handleChange(\"date\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Time*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"time\"\n                value={values.time}\n                onChange={handleChange(\"time\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Contact Person*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                placeholder=\"\"\n                value={values.contactPerson}\n                onChange={handleChange(\"contactPerson\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Phone Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values.phone}\n                onChange={handleChange(\"phone\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n        </div>\n        {/* ----------------------Row 2 ----------------------------- */}\n        <div className=\"flex-row flex space-x-3 \">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Problem Description*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values.problem}\n                onChange={handleChange(\"problem\")}\n              />\n            </Label>\n            {/* <HelperText valid={false}>{err.username}</HelperText> */}\n          </div>\n        </div>\n        {/* ///////////////////////////////////////////////////////// */}\n        {/* <Label className=\"font-bold mt-2 mb-1\">\n        \n        </Label> */}\n\n        {/* ///////////////////////////////////////////////////////// */}\n\n        <>\n          {/* <Button\n              onClick={() => setIsModalOpen(true)}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              className=\"mt-4 mr-2\"\n            >\n              {customer.customerName === \"\" ? (\n                <>Select Associations</>\n              ) : (\n                <>Customer: {customer.customerName}</>\n              )}\n            </Button> */}\n        </>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {/* <PageTitle>Add Customer</PageTitle> */}\n      {addForm()}\n\n      {Asset()}\n\n      {/* {productPicker()} */}\n      {ReviewSubmit()}\n      {ReqFieldErrModal()}\n      {AssetSelectedModal()}\n      {AssetExistsModal()}\n    </>\n  );\n}\n\nexport default RegisterCall;\n"],"sourceRoot":""}