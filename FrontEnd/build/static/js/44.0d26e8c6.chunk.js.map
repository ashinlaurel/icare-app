{"version":3,"sources":["components/Modal/AssetFilters/CustomerSelection.js","pages/Notifications/Notifications.js"],"names":["CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","refresh","setRefresh","theunitdetails","setTheUnitDetails","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","contactPerson","contactNo","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","className","placeholder","onChange","map","i","key","onClick","type","Notifications","activerowid","setActiveRowId","useContext","TopBarContext","setTopHeading","topheading","page","setPage","setData","status","location","setLocation","ToLocation","setToLocation","condition","setCondition","LSTtype","setLSTtype","selectedprod","searchquery","setSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","messageModal","setMessageModal","modalMessage","setModalMessage","loc","EmpProfile","getLocation","pages","limit","filters","from","to","Emp","getId","out","total","updateInventory","j","items","lstItem","invItem","invItems","todaydate","moment","format","newhistory","histtype","date","callId","assetId","note","update","vendorName","id","sno","$push","history","flag","item","updatelst","updateCMRRInventory","CMRRItem","CMRRItems","class","disabled","selected","xmlns","viewBox","d","user","LSTNo","length","layout","aria-label","size","aria-hidden","num","tempdata","temp","filter","x","invnumber","InvTable","resultsPerPage","label","p"],"mappings":"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","file":"static/js/44.0d26e8c6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n// import { Page, Text, View, Document, StyleSheet,PDFDownloadLink } from '@react-pdf/renderer';\n// import ReactPDF from '@react-pdf/renderer';\n// import { PDFViewer } from '@react-pdf/renderer';\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n// import PrintLST from \"./PrintLST\";\n\nfunction Notifications() {\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [status, setstatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n  const [LSTtype, setLSTtype] = useState(\"Normal\")\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Notifications\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    let loc = EmpProfile.getLocation();\n    // console.log(\"Location\",loc);\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          // type: type,\n          from: location,\n          to: ToLocation,\n          status: \"In Transit\",\n          LSTtype:LSTtype,\n          // searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      if (loc != \"All\") payload.filters.to = loc;\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/lst/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation, condition, status, refresh,LSTtype]);\n\n  console.log(selectedprod);\n\n  const updateInventory = async (i, j) => {\n    let items = data;\n    let lstItem = data[i];\n    let invItem = lstItem.invItems[j];\n    console.log(lstItem, invItem);\n\n    let todaydate = moment().format();\n\n    // ----history ---\n    let newhistory = {\n      histtype: \"lst\",\n      date: todaydate,\n      location: lstItem.to,\n      callId: \"Nil\",\n      assetId: \"Nil\",\n      status: invItem.condition,\n      note: `Item received at ${lstItem.to}`,\n    };\n    let update = {};\n    if (lstItem.to == \"Vendor\") {\n      newhistory.note = `Item received from ${lstItem.vendorName} back to ${lstItem.from}`;\n      update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.from,\n          sno: invItem.sno,\n          condition: invItem.condition,\n          $push: { history: newhistory },\n        },\n      };\n    } else {\n      update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.to,\n          $push: { history: newhistory },\n        },\n      };\n    }\n    console.log(\"PAYLOAD\", update);\n    try {\n      await axios({\n        url: `${API}/inventory/${Emp.getId()}/invupdate`,\n        method: \"POST\",\n        data: update,\n      });\n      items[i].invItems[j].location = lstItem.to;\n      setData(items);\n      setActiveRowID(-1);\n      setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n    let flag = false;\n    items[i].invItems.map((item) => {\n      if (item.location == \"In Transit\") flag = true;\n    });\n\n    if (flag == true) {\n      setModalMessage(`${invItem.name} Recieved`);\n      setMessageModal(true);\n      return;\n    }\n    const updatelst = {\n      id: lstItem._id,\n      update: {\n        status: \"Received\",\n      },\n    };\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: updatelst,\n      });\n      // items[i].invItems[j].location=lstItem.to;\n      // setData(items);\n      // setActiveRowID(-1);\n      // setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      setModalMessage(\n        `${invItem.name} Recieved.\\n All Items Received from LST`\n      );\n      setMessageModal(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const updateCMRRInventory = async (i, j) => {\n    let items = data;\n    let lstItem = data[i];\n    let CMRRItem = lstItem.CMRRItems[j];\n    console.log(lstItem, CMRRItem);\n\n\n   \n      items[i].CMRRItems[j].location = lstItem.to;\n      setData(items);\n      \n      // setIsReviewModalOpen(true);\n      console.log(\"Done\",items);\n  \n    let flag = false;\n    items[i].CMRRItems.map((item) => {\n      if (item.location == \"In Transit\") flag = true;\n    });\n    const updatelst = {\n      id: lstItem._id,\n      update: {\n        CMRRItems:items[i].CMRRItems,\n        \n      },\n    };\n    if (flag == false){\n      updatelst.update.status=\"Received\";\n    }\n    \n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: updatelst,\n      });\n      if (flag == true) {\n        setModalMessage(`${CMRRItem.name} Recieved`);\n        setMessageModal(true);\n        // return;\n      }else { \n      setModalMessage(\n        `${CMRRItem.name} Recieved.\\n All Items Received from LST`\n      );\n      setMessageModal(true);\n      }\n      \n      console.log(\"Done\");\n      return;\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const InvTable = (num, to) => {\n    let items = data[num].invItems;\n    let LSTtype= data[num].LSTtype;\n    let CMRRItems= data[num].CMRRItems;\n    console.log(\"TO\", items.to);\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3\">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Category</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Inv Number</TableCell>\n                  <TableCell>Condition</TableCell>\n                  <TableCell>Receive</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n              {(LSTtype == \"Normal\"||LSTtype == \"Customer\") ? (\n                <>\n                {data[num].invItems.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.type}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      {data[num].to == \"Vendor\" &&\n                      user.location == \"In Transit\" ? (\n                        <span className=\"text-sm\">\n                          <input\n                            value={user.sno}\n                            onChange={(e) => {\n                              let tempdata = data;\n                              let temp = data[num].invItems;\n                              temp = temp.filter((x) => {\n                                if (x._id != user._id) return x;\n                                else {\n                                  console.log(\"here\", e.target.value, x.name);\n                                  x.sno = e.target.value;\n                                  return x;\n                                }\n                              });\n                              // tempnum.invItems=temp;\n                              tempdata[num].invItems = temp;\n                              console.log(tempdata);\n                              // tempdata[num].from=\"TETS\"\n                              setData([...tempdata]);\n                            }}\n                            placeholder=\"Cse Id.\"\n                            class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                          />\n                        </span>\n                      ) : (\n                        user.sno\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      {data[num].to == \"Vendor\" &&\n                      user.location == \"In Transit\" ? (\n                        <Select\n                          value={user.condition}\n                          className=\"mt-1\"\n                          onChange={(e) => {\n                            let tempdata = data;\n                            let temp = data[num].invItems;\n                            temp = temp.filter((x) => {\n                              if (x._id != user._id) return x;\n                              else {\n                                console.log(\"here\", e.target.value, x.name);\n                                x.condition = e.target.value;\n                                return x;\n                              }\n                            });\n                            // tempnum.invItems=temp;\n                            tempdata[num].invItems = temp;\n                            console.log(tempdata);\n                            // tempdata[num].from=\"TETS\"\n                            setData([...tempdata]);\n                          }}\n                        >\n                          <option value=\"Good\"> Good</option>\n                          <option value=\"Defective\">Defective</option>\n                          <option value=\"DOA\">DOA</option>z\n                          <option value=\"Damaged\">Damaged</option>\n                        </Select>\n                      ) : (\n                        <Badge\n                          type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                        >\n                          {user.condition}\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        layout=\"outline\"\n                        className=\"dark:border-green-700 border-green-400\"\n                        onClick={() => {\n                          if (user.location == \"In Transit\")\n                            updateInventory(num, i);\n                          else {\n                            setModalMessage(\"Already Received\");\n                            setMessageModal(true);\n                          }\n                        }}\n                      >\n                        {user.location == \"In Transit\" ? (\n                          <>Receive</>\n                        ) : (\n                          <>Received</>\n                        )}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                </>\n                ) : (\n                  <>\n                {data[num].CMRRItems.map((user, i) => (\n                  <TableRow\n                    // className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    //   activerowid == user._id\n                    //     ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                    //     : \"white\"\n                    // } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowId(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.type}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      \n                        {user.sno}\n                      \n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                     \n                        <Badge\n                          type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                        >\n                          {user.condition}\n                        </Badge>\n                    \n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        layout=\"outline\"\n                        className=\"dark:border-green-700 border-green-400\"\n                        onClick={() => {\n                          if (user.location == \"In Transit\")\n                            updateCMRRInventory(num, i);\n                          else {\n                            setModalMessage(\"Already Received\");\n                            setMessageModal(true);\n                          }\n                        }}\n                      >\n                        {user.location == \"In Transit\" ? (\n                          <>Receive</>\n                        ) : (\n                          <>Received</>\n                        )}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                </>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        <div className=\" font-bold text-xl mt-10 dark:text-white\">\n          LSTs In Transit\n        </div>\n\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  From Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            {EmpProfile.getLocation == \"All\" ? (\n              <>\n                <div class=\"relative mx-1 \">\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={ToLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      To Location\n                    </option>\n                    <option value=\"\">All</option>\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                  </select>\n\n                  <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                    <svg\n                      class=\"fill-current h-4 w-4\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                    </svg>\n                  </div>\n                </div>\n              </>\n            ) : null}\n\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={LSTtype}\n                onChange={(e) => {\n                  setLSTtype(e.target.value);\n                }}\n              >\n                \n                <option value=\"\" selected>LST type</option>\n                <option value=\"Normal\" >Normal</option>\n                <option value=\"CMRR\">CMRR</option>\n                <option value=\"Customer\">Customer</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search LST Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr className=\"flex flex-row justify-between\">\n                <TableCell>LST.No</TableCell>\n                <TableCell>From</TableCell>\n                <TableCell>To</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>No.</TableCell>\n                {/* <TableCell>Status</TableCell> */}\n                <TableCell> Report</TableCell>\n                <TableCell>\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => setActiveRowID(-1)}\n                  >\n                    Items\n                  </span>\n                </TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <div className=\"flex flex-col justify-around\">\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(i);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.LSTNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.from}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {user.to == \"Vendor\" ? user.vendorName : user.to}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {\" \"}\n                        {moment(user.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{(user.LSTtype == \"Normal\"||user.LSTtype == \"Customer\")?user.invItems.length:user.CMRRItems.length}</span>\n                    </TableCell>\n                    {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n                    <TableCell className=\"text-center \">\n                      <Button\n                        layout=\"outline\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(\"dwlod\");\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        Download\n                      </Button>\n                    </TableCell>\n                    <TableCell className=\"text-center \">\n                      <Button\n                        // layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(activerowid);\n                          // if(activerowid==i){\n\n                          // setActiveRowID(-1);\n                          // }\n                          // else\n                          setActiveRowID(i);\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        <DropdownIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n\n                  {activeRowID == i ? InvTable(i, user.to) : null}\n                </div>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default Notifications;\n"],"sourceRoot":""}