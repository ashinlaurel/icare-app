{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/Inventory/PurchaseInventory.js","components/Modal/CustomerCreateModal.js","helpers/unitHelper.js","components/Modal/AddUnitModal.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","PurchaseInventory","setTopHeading","useContext","TopBarContext","useState","calculate","setCalculate","datecalculate","setDateCalculate","calnum","setCalnum","thebval","purchtype","vendor","invnumber","invdate","location","invtype","gstno","panno","aadharno","purchlocation","totalInvoice","basevalues","setBaseValues","invdetails","type","name","sno","condition","taxcategory","taxperc","rate","igst","cgst","sgst","nettax","amount","tcs","invamount","wty","expirydate","brand","model","systype","caseId","values","setValues","err","setErr","submitItems","a","console","log","ids","newitems","map","item","Axios","url","API","Emp","getId","method","data","then","i","push","_id","histdata","invItems","catch","useEffect","newlist","parseInt","parseFloat","moment","format","newbaseval","add","handleBaseChange","e","target","value","className","onChange","num","selected","toLowerCase","disabled","valid","readOnly","theperc","slice","onClick","newitem","aria-label","aria-haspopup","layout","pop","CustomerCreatetModal","isModalOpen","setIsModalOpen","setCustomer","getCustomers","post","search","role","users","temp","user","isOpen","onClose","key","customerName","unitCreate","newunit","unit","error","response","status","errors","AddUnitModal","account","setAccount","customer","customers","setCustomers","accounts","setAccounts","tabIndex","setTabIndex","pickCustomer","customerId","accs","pickAccount","accountName","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/14.ed432406.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport moment from \"moment\";\nimport { Card, CardBody } from \"@windmill/react-ui\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport {\n  Input,\n  HelperText,\n  Label,\n  Button,\n  Badge,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport { signup, signin, authenticate } from \"../../helpers/auth\";\nimport CustomerCreateModal from \"../../components/Modal/CustomerCreateModal\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport { resetIdCounter } from \"react-tabs\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { unitCreate } from \"../../helpers/unitHelper\";\nimport AddUnitModal from \"../../components/Modal/AddUnitModal\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Axios from \"axios\";\n/////////////----------------->>>>>> bug <<<<<------------customerList refresh--------------------------\n\nfunction PurchaseInventory() {\n  const { setTopHeading } = useContext(TopBarContext);\n  const [flow, setFlow] = useState(\"basic\");\n  const [calculate, setCalculate] = useState(false);\n  const [datecalculate, setDateCalculate] = useState(false);\n  const [calnum, setCalnum] = useState(-1);\n\n  const thebval = {\n    purchtype: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: \"\",\n    location: \"Trivandrum\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"Local\",\n    totalInvoice:\"0\",\n  };\n  const [basevalues, setBaseValues] = useState(thebval);\n\n  const invdetails = {\n    type: \"\",\n    name: \"\",\n    // assetsIdHistory: \"\",\n    // assetId: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    taxcategory: \"\",\n    taxperc: \"\",\n    rate: \"\",\n    igst: \"0\",\n    cgst: \"0\",\n    sgst: \"0\",\n    nettax: \"0\",\n    amount: \"0\",\n    tcs: \"0\",\n    invamount: \"0\",\n    wty: \"\",\n    expirydate: \"\",\n    //-------------------------\n    purchtype: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: \"\",\n    location: \"\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"\",\n\n    brand:\"\",\n    model:\"\",\n    systype:\"part\",\n\n    //-------\n    caseId: \"\",\n  };\n  const [values, setValues] = useState([invdetails]);\n\n  const [err, setErr] = useState({\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"\",\n    location: \"\",\n    invnumber: \"\",\n  });\n\n  const submitItems = async () => {\n    if (values.name === \"\" || values.sno === \"\" || values.invnumber === \"\") {\n      //   setIsReqFieldModal(true);\n      console.log(\"missing inputs\");\n      return;\n    }\n    let ids=[];\n    console.log(\"Submission Start\");\n    const newitems = [...values];\n    newitems.map((item) => {\n      item.purchtype = basevalues.purchtype;\n      item.vendor = basevalues.vendor;\n      item.invnumber = basevalues.invnumber;\n      item.invdate = basevalues.invdate;\n      item.location = basevalues.location;\n      item.invtype = basevalues.invtype;\n      item.gstno = basevalues.gstno;\n      item.panno = basevalues.panno;\n      item.aadharno = basevalues.aadharno;\n      item.purchlocation = basevalues.purchtype;\n    });\n    console.log(newitems);\n    await Axios({\n      url: `${API}/inventory/${Emp.getId()}/createitems`,\n      method: \"POST\",\n      data: newitems,\n    })\n      .then((data) => {\n        console.log(\"Added\", data);\n        data.data.map(i=>ids.push(i._id));\n        // setIsReviewModalOpen(true);\n        \n        console.log(ids);\n        let histdata={...basevalues,invItems:ids};\n\n        Axios({\n          url: `${API}/inventory/${Emp.getId()}/createpurchasehistory`,\n          method: \"POST\",\n          data: histdata,\n        })\n          .then((data) => {\n            console.log(\"hisory added\",data)\n            setValues([invdetails]);\n            setBaseValues(thebval);\n            setErr({\n              type: \"\",\n              name: \"\",\n              sno: \"\",\n              condition: \"\",\n              location: \"\",\n              invnumber: \"\",\n            });\n          }).catch((err) => {\n            console.log(\"err\", err);\n            setErr({ ...err });\n          });\n\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        setErr({ ...err });\n      });\n  };\n\n  // ----------------------Heading Use Effect-------------\n\n  useEffect(() => {\n    setTopHeading(\"Purchase Inventory\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // ------------------- Calculations----------------------------------\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (basevalues.purchlocation == \"Local\" && calnum != -1) {\n      newlist[calnum].sgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].cgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].nettax =\n        parseInt(newlist[calnum].sgst) + parseInt(newlist[calnum].cgst);\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    } else if (calnum != -1) {\n      newlist[calnum].igst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 100);\n      newlist[calnum].nettax = newlist[calnum].igst;\n\n      newlist[calnum].sgst = 0;\n      newlist[calnum].cgst = 0;\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    }\n\n    if (calnum != -1) {\n      newlist[calnum].tcs = parseFloat(newlist[calnum].amount) * 0.001;\n      newlist[calnum].invamount =\n        parseFloat(newlist[calnum].amount) + parseFloat(newlist[calnum].tcs);\n      newlist[calnum].expirydate = moment().format(\"DD-MM-YYYY\");\n      console.log(basevalues.totalInvoice,newlist[calnum].invamount)\n      console.log(parseFloat(basevalues.totalInvoice)+parseFloat(newlist[calnum].invamount))\n\n      let newbaseval=basevalues\n      newbaseval.totalInvoice=parseFloat(parseFloat(basevalues.totalInvoice)+parseFloat(newlist[calnum].invamount))\n      setBaseValues(newbaseval)\n    }\n\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [calculate]);\n\n  //   const handleChange = (name) => (e) => {\n  //     setValues({ ...values, [name]: e.target.value });\n  //   };\n\n  // ---------Date Calculations ------------\n\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (calnum != -1) {\n      switch (newlist[calnum].wty) {\n        case \"3M\":\n          newlist[calnum].expirydate = moment()\n            .add(3, \"M\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"6M\":\n          newlist[calnum].expirydate = moment()\n            .add(6, \"M\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"1Y\":\n          newlist[calnum].expirydate = moment()\n            .add(1, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"2Y\":\n          newlist[calnum].expirydate = moment()\n            .add(2, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"3Y\":\n          newlist[calnum].expirydate = moment()\n            .add(3, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"4Y\":\n          newlist[calnum].expirydate = moment()\n            .add(4, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"5Y\":\n          newlist[calnum].expirydate = moment()\n            .add(5, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [datecalculate]);\n\n  const handleBaseChange = (name) => (e) => {\n    setBaseValues({ ...basevalues, [name]: e.target.value });\n  };\n\n  //   const ReviewSubmit = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReviewModalOpen}\n  //           onClose={() => setIsReviewModalOpen(false)}\n  //         >\n  //           <ModalHeader>Information updated Successfully!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               // onClick={() => setIsReviewModalOpen(false)}\n  //               onClick={() => setIsReviewModalOpen(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  //   const ReqFieldErrModal = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReqFieldModal}\n  //           onClose={() => setIsReqFieldModal(false)}\n  //         >\n  //           <ModalHeader>Required fields are not filled!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               onClick={() => setIsReqFieldModal(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  //   Basic Form\n\n  const BasicForm = () => {\n    return (\n      <div className=\"px-4 py-3 mt-4 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>Purchase Information Total Invoice Amount{basevalues.totalInvoice}</span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* -----Row 1 --------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Type*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.purchtype}\n                onChange={handleBaseChange(\"purchtype\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Vendor Name*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.vendor}\n                onChange={handleBaseChange(\"vendor\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invnumber}\n                onChange={handleBaseChange(\"invnumber\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Date*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"date\"\n                value={basevalues.invdate}\n                onChange={handleBaseChange(\"invdate\")}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* ------------------------Row 2-------------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, location: e.target.value });\n                }}\n              >\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Type*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invtype}\n                onChange={handleBaseChange(\"invtype\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>GST Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.gstno}\n                onChange={handleBaseChange(\"gstno\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Pan No*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.panno}\n                onChange={handleBaseChange(\"panno\")}\n              />\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------------------ROw 3-------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Aadhar No*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.aadharno}\n                onChange={handleBaseChange(\"aadharno\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({\n                    ...basevalues,\n                    purchlocation: e.target.value,\n                  });\n\n                  let newlist = [...values];\n                  newlist.map((item, i) => {\n                    item.taxcategory = \"\";\n                    item.taxperc = \"\";\n                  });\n                  setValues([invdetails]);\n                }}\n              >\n                <option value=\"Local\">Local</option>\n                <option value=\"IGST\">IGST</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const ItemForm = (num) => {\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>Item Number : {num + 1},<span className=\"ml-10\"> Net Tax:{values[num].nettax} ,Invoice Amount: {values[num].invamount} </span>\n          </span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].systype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"part\" selected >\n                  Part\n                </option>\n                <option value=\"system\">System</option>\n                \n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Category*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].type = e.target.value;\n                  newlist[num].type = newlist[num].type.toLowerCase();\n\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Type\n                </option>\n                {values[num].systype==\"part\"?<>\n                <option value=\"Mouse\">Mouse</option>\n                <option value=\"Keyboard\">Keyboard</option>\n                <option value=\"Monitor\">Monitor</option>\n                <option value=\"Cpu\">Cpu</option>\n                <option value=\"Ram\">Ram</option>\n                <option value=\"Fan\">Fan</option>\n                <option value=\"Motherboard\">Motherboard</option>\n                <option value=\"SMPS\">SMPS</option>\n                <option value=\"HDD\">HDD</option>\n                <option value=\"GCard\">Gcard</option>\n                <option value=\"EnetCard\">Enet Card</option>\n                <option value=\"SerialCard\">Serial Card</option>\n                <option value=\"ParalellCard\">Paralell Card</option>\n                <option value=\"OpticalDrive\">Optical Drive</option>\n                <option value=\"Others\">Others</option>\n                </>:<>\n\n                <option value=\"console\">Console</option>\n                <option value=\"DMP\">DMP</option>\n                <option value=\"inkjet\">Inkjet</option>\n                <option value=\"KVM\">KVM</option>\n                <option value=\"laptop\">Laptop</option>\n                <option value=\"laser\">Laser</option>\n                <option value=\"LMP\">LMP</option>\n                <option value=\"module\">Module</option>\n                <option value=\"router\">Router</option>\n                <option value=\"scanner\">Scanner</option>\n                <option value=\"server\">Server</option>\n                <option value=\"desktop\">Desktop</option>\n                <option value=\"storage\">Storage</option>\n                <option value=\"switch\">Switch</option>\n                <option value=\"UPS\">UPS</option>\n                <option value=\"others\">Others</option>\n\n                </>}\n              </Select>\n            </Label>\n          </div>\n\n          {values[num].systype==\"part\"?\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Product Name*</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={(e) => {\n                    let newlist = [...values];\n                    newlist[num].name = e.target.value;\n                    setValues(newlist);\n                  }}\n                />\n              </Label>\n              <HelperText valid={false}>{err.name}</HelperText>\n            </div>\n          </>\n          :<>\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Brand*</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values.brand}\n                  onChange={(e) => {\n                    let newlist = [...values];\n                    newlist[num].brand = e.target.value;\n                    setValues(newlist);\n                  }}\n                />\n              </Label>\n              <HelperText valid={false}>{err.brand}</HelperText>\n            </div>\n          </>\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Model*</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values.model}\n                  onChange={(e) => {\n                    let newlist = [...values];\n                    newlist[num].model = e.target.value;\n                    setValues(newlist);\n                  }}\n                />\n              </Label>\n              <HelperText valid={false}>{err.name}</HelperText>\n            </div>\n          </>\n\n\n          </>\n          }\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values.sno}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].sno = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n            <HelperText valid={false}>{err.sno}</HelperText>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].condition = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].wty}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].wty = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setDateCalculate(!datecalculate);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Year</option>\n                <option value=\"3Y\">3 Year</option>\n                <option value=\"4Y\">4 Year</option>\n                <option value=\"5Y\">5 Year</option>\n              </Select>\n            </Label>\n          </div>\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Expiry Date</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values[num].expirydate}\n                  readOnly={true}\n                />\n              </Label>\n              <HelperText valid={false}>{err.name}</HelperText>\n            </div>\n          </>\n        \n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Category*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].taxcategory}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  let thestring = e.target.value;\n                  let theperc = thestring.slice(-3, -1);\n                  newlist[num].taxcategory = e.target.value;\n                  newlist[num].taxperc = theperc;\n                  setValues(newlist);\n                  // calculate trigger\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              >\n                {basevalues.purchlocation == \"Local\" ? (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"GST 18%\">GST 18%</option>\n                    <option value=\"GST 28%\">GST 28%</option>\n                  </>\n                ) : (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"IGST 18%\">IGST 18%</option>\n                    <option value=\"IGST 28%\">IGST 28%</option>\n                  </>\n                )}\n              </Select>\n            </Label>\n          </div>\n          {/* <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Percentage*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                readOnly=\"true\"\n                value={values[num].taxperc}\n              />\n            </Label>\n            <HelperText valid={false}>{err.invnumber}</HelperText>\n          </div> */}\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Rate*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].rate}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].rate = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* --------Row 4 ------------- */}\n        {/* <div className=\"flex-row flex space-x-3 my-2\">\n          {basevalues.purchlocation == \"Local\" ? (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>CGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].cgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>SGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].sgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          ) : (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>IGST</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].igst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          )}\n        </div> */}\n        {/* ----row 4------ */}\n        {/* <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].amount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>TCS</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].tcs}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].invamount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].invamount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div> */}\n\n        {/* <Label className=\"font-bold mt-5 mb-2\">\n    <span>Additional Information</span>\n  </Label> */}\n        {/* <hr /> */}\n      </div>\n    );\n  };\n\n  const BottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap\">\n            <Button\n              onClick={() => {\n                let newitem = [...values];\n                let add = invdetails;\n                newitem.push(add);\n                setValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Item\n            </Button>\n\n            <Button\n              onClick={() => {\n                let newitem = [...values];\n                if (newitem[1]) {\n                  newitem.pop();\n                  setValues(newitem);\n                }\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Remove Item\n            </Button>\n\n            <Button\n              onClick={submitItems}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Submit\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      {BasicForm()}\n      {values.map((item, i) => {\n        return ItemForm(i);\n      })}\n      {BottomCard()}\n    </>\n  );\n}\n\nexport default PurchaseInventory;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\n\nexport default function CustomerCreatetModal({\n  isModalOpen,\n  setIsModalOpen,\n  setCustomer,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    getCustomers();\n  }, []);\n\n  const getCustomers = () => {\n    Axios.post(`${API}/customer/customers`, { search: \"\", role: 1 })\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  };\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-900 \"\n                onClick={() => {\n                  setCustomer({\n                    _id: user._id,\n                    customerName: user.name,\n                  });\n                  setIsModalOpen(false);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                {/* <TableCell>\n                    <span className=\"text-sm\">$ {user.email}</span>\n                  </TableCell> */}\n                {/* <TableCell>\n                    <Badge type={user.status}>{user.status}</Badge>\n                  </TableCell> */}\n                {/* <TableCell>\n                  <span className=\"text-sm\">{user.infoId.unit}</span>\n                </TableCell> */}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Modal header</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import Axios from \"axios\";\nimport { API } from \"../backendapi\";\nimport Emp from \"../helpers/auth/EmpProfile\";\n\nexport const unitCreate = (newunit) => {\n  return Axios.post(`${API}/unit/${Emp.getId()}/create`, newunit)\n    .then((unit) => {\n      console.log(\"h\", unit.data);\n      return unit.data;\n    })\n    .catch((error) => {\n      console.log(\"ERRRROs\");\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        throw error.response.data.errors;\n      }\n    });\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function AddUnitModal({\n  isModalOpen,\n  setIsModalOpen,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  useEffect(() => {\n    Axios.post(`${API}/customer/customers`, { search: \"\", role: 1 })\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setCustomers(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select {tabIndex == 0 ? <>Customer</> : <>Account</>}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}