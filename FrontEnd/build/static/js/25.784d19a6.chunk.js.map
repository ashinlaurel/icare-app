{"version":3,"sources":["components/Modal/AssetFilters/CustomerSelection.js","pages/Calls/AssignEng.js","components/Modal/UnitListModal.js","components/Modal/EngineerListModal.js"],"names":["CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","refresh","setRefresh","theunitdetails","setTheUnitDetails","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","contactPerson","contactNo","isOpen","onClose","className","selectedIndex","onSelect","ind","onSubmit","placeholder","onChange","map","i","key","onClick","type","AssignEng","addEnggModalOpen","setaddEnggModalOpen","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","setData","callStatus","setCallStatus","fromDate","setFromDate","toDate","setToDate","Business","product","enggName","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","isProblemDesc","setIsProblemDesc","selectedprod","setSelectedProd","searchquery","setSearchQuery","assignedDate","setAssignedDate","assignedETA","setAssignedETA","totalResults","setTotalResults","AddEnggModal","callNo","moment","format","date","newcallhistory","callAttendDate","startOfService","endOfService","note","actionTaken","id","update","employeeId","employeeName","$push","history","employeepayload","assignedCalls","priority","callId","Date","Emp","getId","temp","filter","c","pages","limit","filters","total","out","nextModal","problem","class","disabled","selected","xmlns","viewBox","d","call","assetId","time","producttype","serialno","phone","layout","size","aria-label","aria-hidden","resultsPerPage","label","p","UnitListModal","EngineerListModal","values","setValues","then","users","user","push","catch","err","employeeID"],"mappings":"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","file":"static/js/25.784d19a6.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\"  >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\n\nfunction AssignEng() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [callStatus, setCallStatus] = useState(\"0\");\n  const [location, setLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n  const [fromDate, setFromDate] = useState(\"\");\n  const [toDate, setToDate] = useState(\"\");\n\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  const [isProblemDesc, setIsProblemDesc] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const AddEnggModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={addEnggModalOpen}\n          onClose={() => setaddEnggModalOpen(false)}\n        >\n          <ModalHeader>Confirm Assignment</ModalHeader>\n          <ModalBody>\n            <div className=\"font-xl text-xl\">\n              Assign {engineer.enggName} to call {selectedprod.callNo}\n            </div>\n\n            <div className=\"flex flex-col w-full mt-2\">\n              <Label className=\"w-full\">\n                <span>Assign Date</span>\n                <Input\n                  className=\"\"\n                  type=\"date\"\n                  value={moment(assignedDate).format(\"YYYY-MM-DD\")}\n                  onChange={(e) => {\n                    // setCall({ ...call, callAttendDate: e.target.value });\n                    setAssignedDate(e.target.value);\n                  }}\n                />\n              </Label>\n              {moment(selectedprod.date).format(\"YYYY-MM-DD\") >\n              moment(assignedDate).format(\"YYYY-MM-DD\") ? (\n                <span className=\"text-red-700\">\n                  Error: Selected date is before the call date!\n                </span>\n              ) : null}\n            </div>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Assign ETA</span>\n                <Input\n                  className=\"\"\n                  type=\"time\"\n                  value={assignedETA}\n                  onChange={(e) => {\n                    // setCall({ ...call, startOfService: e.target.value });\n                    setAssignedETA(e.target.value);\n                  }}\n                />\n              </Label>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(selectedprod);\n                if (assignedDate == \"\" || assignedETA == \"\") {\n                  return;\n                }\n                if (\n                  moment(selectedprod.date).format(\"YYYY-MM-DD\") >\n                  moment(assignedDate).format(\"YYYY-MM-DD\")\n                ) {\n                  return;\n                }\n\n                // ----- history ---\n                let newcallhistory = {\n                  date: moment().format(),\n                  callStatus: \"2\",\n                  engineer: engineer.enggName,\n                  callAttendDate: \"Nil\",\n                  startOfService: \"Nil\",\n                  endOfService: \"Nil\",\n                  note: `${engineer.enggName} has been assigned to the call. Assigned Date: ${assignedDate} Assigned ETA: ${assignedETA}`,\n                  actionTaken: \"Nil\",\n                };\n\n                let payload = {\n                  id: selectedprod._id,\n                  update: {\n                    employeeId: engineer._id,\n                    employeeName: engineer.enggName,\n                    callStatus: 2,\n                    assignedDate: assignedDate,\n                    assignedETA: assignedETA,\n                    $push: { history: newcallhistory },\n                  },\n                };\n                let employeepayload = {\n                  id: engineer._id,\n                  update: {\n                    $push: {\n                      assignedCalls: {\n                        priority: 99,\n                        callId: selectedprod._id,\n                        date: new Date(),\n                      },\n                    },\n                  },\n                };\n                try {\n                  let response = await axios({\n                    url: `${API}/call/${Emp.getId()}/assignEngg`,\n                    method: \"POST\",\n                    data: payload,\n                  });\n                  let temp = data;\n                  console.log(temp);\n                  temp = temp.filter((c) => {\n                    if (c._id === selectedprod._id) {\n                      c.callStatus = 2;\n                      c.employeeName = engineer.enggName;\n                      c.employeeId = engineer._id;\n                      return c;\n                    }\n                    setData(temp);\n                  });\n                  // updating employee modal\n\n                  await axios({\n                    url: `${API}/admin/${Emp.getId()}/update`,\n                    method: \"POST\",\n                    data: employeepayload,\n                  });\n                  // console.log(response.data);\n                  setaddEnggModalOpen(false);\n                  setAssignedDate(\"\");\n                  setAssignedETA(\"\");\n                  setRefresh(!refresh);\n                } catch (error) {\n                  throw error;\n                }\n              }}\n            >\n              Confirm Assignment\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const ProblemModal = () => {\n    return (\n      <>\n        <Modal isOpen={isProblemDesc} onClose={() => setIsProblemDesc(false)}>\n          <ModalHeader>Problem Description</ModalHeader>\n          <ModalBody>\n            <div className=\"font-xl text-xl overflow-scroll\">\n              {selectedprod.problem}\n            </div>\n          </ModalBody>\n        </Modal>\n      </>\n    );\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assign Engineer\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          callStatus: callStatus,\n          searchquery: searchquery,\n          fromDate: fromDate,\n          toDate: toDate,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        // console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [\n    page,\n    Business,\n    product,\n    refresh,\n    callStatus,\n    searchquery,\n    fromDate,\n    toDate,\n  ]);\n\n  // console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <EngineerListModal\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEngineer={setEngineer}\n        nextModal={setaddEnggModalOpen}\n      />\n      <AddEnggModal />\n      {ProblemModal()}\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* <div className=\"flex items-center\">\n          <PageTitle>Assets Management</PageTitle>\n          <div>\n            <Button\n              className=\"mx-3\"\n              onClick={() => {\n                setFloatBox(!floatbox);\n              }}\n              icon={HeartIcon}\n              layout=\"link\"\n              aria-label=\"Like\"\n            />\n          </div>\n        </div> */}\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={callStatus}\n                onChange={(e) => {\n                  setCallStatus(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Call Status\n                </option>\n                <option value=\"all\">All But Closed</option>\n                <option selected value=\"0\">\n                  Pending For Allocation\n                </option>\n                <option value=\"priority\">Priority</option>\n                {/* <option value=\"-1\">Allocated</option> */}\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            <Label className=\"\">\n              <span>From Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1\"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n              />\n            </Label>\n            <Label className=\"\">\n              <span>To Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1 mr-5\"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n              />\n            </Label>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search by Call No.\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                {callStatus == \"priority\" ? (\n                  <>\n                    <TableCell>Assigned Date</TableCell>\n                    <TableCell>Assigned ETA</TableCell>\n                  </>\n                ) : null}\n\n                <TableCell>Type</TableCell>\n                <TableCell>Product SNO.</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Problem Description</TableCell>\n                <TableCell>Assigned Employee</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((call, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == call._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(call._id);\n                    setBBarOpen(1);\n                    // console.log(\"the id is \" + call._id);\n                    setSelectedProd(call);\n                    if (call.assetId) setAssetDetails(call.assetId);\n                    else setAssetDetails({});\n                    console.log(\"CALL ASSET\", call.assetId);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{call.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm\">\n                        {moment(call.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                      {call.time ? (\n                        <span className=\"text-xs\">\n                          {moment(`${\"2018-04-02\"}T${call.time}`).format(\n                            \"h:mm a\"\n                          )}\n                        </span>\n                      ) : null}\n                    </div>\n                  </TableCell>\n                  {callStatus == \"priority\" ? (\n                    <>\n                      <TableCell>\n                        <span className=\"text-sm\">\n                          {moment(call.assignedDate).format(\"DD/MM/YYYY\")}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm\">{call.assignedETA}</span>\n                      </TableCell>\n                    </>\n                  ) : null}\n                  <TableCell>\n                    <span className=\"text-sm\">{call.assetId.producttype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {call.assetId.product.serialno}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    {call.callStatus == 0 ? (\n                      <span className=\"text-sm\">Pending For Allocation</span>\n                    ) : null}\n                    {call.callStatus == 1 ? (\n                      <span className=\"text-sm\">\n                        Pending for Percall Approval\n                      </span>\n                    ) : null}\n                    {call.callStatus == 2 ? (\n                      <span className=\"text-sm\">Pending for Response</span>\n                    ) : null}\n                    {call.callStatus == 3 ? (\n                      <span className=\"text-sm\">Pending for OEM Response</span>\n                    ) : null}\n                    {call.callStatus == 4 ? (\n                      <span className=\"text-sm\">Pending for 2nd Response</span>\n                    ) : null}\n                    {call.callStatus == 5 ? (\n                      <span className=\"text-sm\">Pending for Customer</span>\n                    ) : null}\n                    {call.callStatus == 6 ? (\n                      <span className=\"text-sm\">Under Observation</span>\n                    ) : null}\n                    {call.callStatus == 7 ? (\n                      <span className=\"text-sm\">Pending for Others</span>\n                    ) : null}\n                    {call.callStatus == 8 ? (\n                      <span className=\"text-sm\">Pending for Spare</span>\n                    ) : null}\n                    {call.callStatus == 9 ? (\n                      <span className=\"text-sm\">Spare in Transit</span>\n                    ) : null}\n                    {call.callStatus == 10 ? (\n                      <span className=\"text-sm\">Cancelled Calls</span>\n                    ) : null}\n                    {call.callStatus == 11 ? (\n                      <span className=\"text-sm\">Closed Calls</span>\n                    ) : null}\n                    {call.callStatus == 12 ? (\n                      <span className=\"text-sm\">Spare Taken CMRR</span>\n                    ) : null}\n                    {call.callStatus == 13 ? (\n                      <span className=\"text-sm\">\n                        Pending For Spare Collection\n                      </span>\n                    ) : null}\n                    {call.callStatus == 14 ? (\n                      <span className=\"text-sm\">Standby Given</span>\n                    ) : null}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center justify-center\">\n                      <Button\n                        layout=\"outline\"\n                        onClick={() => setIsProblemDesc(true)}\n                      >\n                        View\n                      </Button>{\" \"}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        <div className=\"px-4 py-2 dark:border-purple-400 border-purple-600 dark:bg-gray-700 bg-purple-100 inline-block rounded-lg dark:text-purple-400 text-purple-700\">\n                          {call.employeeName}\n                          <Button\n                            layout=\"link\"\n                            size=\"icon\"\n                            aria-label=\"Edit\"\n                            onClick={() => {\n                              setIsEnggModalOpen(true);\n                              setAssignedETA(call.assignedETA);\n                              setAssignedDate(call.assignedDate);\n                            }}\n                            className=\"rounded-full mx-2 \"\n                          >\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                          </Button>\n                        </div>\n                      </>\n                    ) : (\n                      <Button\n                        layout=\"outline\"\n                        onClick={() => setIsEnggModalOpen(true)}\n                      >\n                        Assign Now\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default AssignEng;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function EngineerListModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEngineer,\n  nextModal,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAll`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              {/* <TableCell>Email</TableCell> */}\n              <TableCell>Employee ID</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  setEngineer({\n                    _id: user._id,\n                    enggName: user.employeeName,\n                  });\n                  setIsModalOpen(false);\n                  nextModal(true);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeID}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Assign Engineer</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}