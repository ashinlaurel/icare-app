{"version":3,"sources":["components/Modal/UnitListModal.js","pages/Calls/AssignEng.js","components/Modal/EngineerListModal.js","components/Modal/AssetFilters/CustomerSelection.js"],"names":["UnitListModal","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","className","placeholder","onChange","map","i","key","onClick","type","AssignEng","addEnggModalOpen","setaddEnggModalOpen","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","setData","refresh","setRefresh","callStatus","setCallStatus","Business","product","enggName","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","selectedprod","setSelectedProd","searchquery","setSearchQuery","assignedDate","setAssignedDate","assignedETA","setAssignedETA","totalResults","setTotalResults","AddEnggModal","callNo","newcallhistory","date","moment","format","callAttendDate","startOfService","endOfService","note","actionTaken","id","update","employeeId","employeeName","$push","history","employeepayload","assignedCalls","priority","callId","Date","Emp","getId","temp","filter","c","pages","limit","filters","fromDate","toDate","total","out","nextModal","class","disabled","selected","xmlns","viewBox","d","call","assetId","phone","layout","size","aria-label","aria-hidden","resultsPerPage","label","p","EngineerListModal","values","setValues","then","users","user","push","catch","err","email","CustomerSelection"],"mappings":"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","file":"static/js/25.f3e18818.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\n\nfunction AssignEng() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [callStatus, setCallStatus] = useState(\"0\")\n  const [location, setLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const AddEnggModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={addEnggModalOpen}\n          onClose={() => setaddEnggModalOpen(false)}\n        >\n          <ModalHeader>Confirm Assignment</ModalHeader>\n          <ModalBody>\n            <div className=\"font-xl text-xl\">\n              Assign {engineer.enggName} to call {selectedprod.callNo}\n            </div>\n\n            <div className=\"flex flex-col w-full mt-2\">\n              <Label className=\"w-full\">\n                <span>Assign Date</span>\n                <Input\n                  className=\"\"\n                  type=\"date\"\n                  value={assignedDate}\n                  onChange={(e) => {\n                    // setCall({ ...call, callAttendDate: e.target.value });\n                    setAssignedDate(e.target.value);\n                  }}\n                />\n              </Label>\n            </div>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Assign ETA</span>\n                <Input\n                  className=\"\"\n                  type=\"time\"\n                  value={assignedETA}\n                  onChange={(e) => {\n                    // setCall({ ...call, startOfService: e.target.value });\n                    setAssignedETA(e.target.value);\n                  }}\n                />\n              </Label>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(selectedprod);\n                if (assignedDate == \"\" || assignedETA == \"\") {\n                  return;\n                }\n\n                // ----- history ---\n                let newcallhistory = {\n                  date: moment().format(),\n                  callStatus: \"2\",\n                  engineer: engineer.enggName,\n                  callAttendDate: \"Nil\",\n                  startOfService: \"Nil\",\n                  endOfService: \"Nil\",\n                  note: `${engineer.enggName} has been assigned to the call. Assigned Date: ${assignedDate} Assigned ETA: ${assignedETA}`,\n                  actionTaken: \"Nil\",\n                };\n\n                let payload = {\n                  id: selectedprod._id,\n                  update: {\n                    employeeId: engineer._id,\n                    employeeName: engineer.enggName,\n                    callStatus: 2,\n                    assignedDate: assignedDate,\n                    assignedETA: assignedETA,\n                    $push: { history: newcallhistory },\n                  },\n                };\n                let employeepayload = {\n                  id: engineer._id,\n                  update: {\n                    $push: {\n                      assignedCalls: {\n                        priority: 99,\n                        callId: selectedprod._id,\n                        date: new Date(),\n                      },\n                    },\n                  },\n                };\n                try {\n                  let response = await axios({\n                    url: `${API}/call/${Emp.getId()}/assignEngg`,\n                    method: \"POST\",\n                    data: payload,\n                  });\n                  let temp = data;\n                  console.log(temp);\n                  temp = temp.filter((c) => {\n                    if (c._id === selectedprod._id) {\n                      c.callStatus = 2;\n                      c.employeeName = engineer.enggName;\n                      c.employeeId = engineer._id;\n                      return c;\n                    }\n                    setData(temp);\n                  });\n                  // updating employee modal\n\n                  await axios({\n                    url: `${API}/admin/${Emp.getId()}/update`,\n                    method: \"POST\",\n                    data: employeepayload,\n                  });\n                  // console.log(response.data);\n                  setaddEnggModalOpen(false);\n                  setAssignedDate(\"\");\n                  setAssignedETA(\"\");\n                } catch (error) {\n                  throw error;\n                }\n              }}\n            >\n              Confirm Assignment\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assign Engineer\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          callStatus: callStatus,\n          searchquery: searchquery,\n          fromDate:\"\",\n          toDate:\"\"\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        // console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh,callStatus,searchquery]);\n\n  // console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <EngineerListModal\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEngineer={setEngineer}\n        nextModal={setaddEnggModalOpen}\n      />\n      <AddEnggModal />\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* <div className=\"flex items-center\">\n          <PageTitle>Assets Management</PageTitle>\n          <div>\n            <Button\n              className=\"mx-3\"\n              onClick={() => {\n                setFloatBox(!floatbox);\n              }}\n              icon={HeartIcon}\n              layout=\"link\"\n              aria-label=\"Like\"\n            />\n          </div>\n        </div> */}\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={callStatus}\n                onChange={(e) => {\n                  setCallStatus(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Call Status\n                </option>\n                <option value=\"\">All</option>\n                <option selected value=\"0\">Pending For Allocation</option>\n                {/* <option value=\"-1\">Allocated</option> */}\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search by Call No.\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Assigned Employee</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((call, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == call._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(call._id);\n                    setBBarOpen(1);\n                    // console.log(\"the id is \" + call._id);\n                    setSelectedProd(call);\n                    if (call.assetId) setAssetDetails(call.assetId);\n                    else setAssetDetails({});\n                    console.log(call.assetId);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{call.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(call.date).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    {call.callStatus == 0 ? (\n                      <span className=\"text-sm\">Not Allocated</span>\n                    ) : null}\n                    {call.callStatus == 1 ? (\n                      <span className=\"text-sm\">\n                        Pending for Percall Approval\n                      </span>\n                    ) : null}\n                    {call.callStatus == 2 ? (\n                      <span className=\"text-sm\">Pending for Response</span>\n                    ) : null}\n                    {call.callStatus == 3 ? (\n                      <span className=\"text-sm\">Pending for OEM Response</span>\n                    ) : null}\n                    {call.callStatus == 4 ? (\n                      <span className=\"text-sm\">Pending for 2nd Response</span>\n                    ) : null}\n                    {call.callStatus == 5 ? (\n                      <span className=\"text-sm\">Pending for Customer</span>\n                    ) : null}\n                    {call.callStatus == 6 ? (\n                      <span className=\"text-sm\">Under Observation</span>\n                    ) : null}\n                    {call.callStatus == 7 ? (\n                      <span className=\"text-sm\">Pending for Others</span>\n                    ) : null}\n                    {call.callStatus == 8 ? (\n                      <span className=\"text-sm\">Pending for Spare</span>\n                    ) : null}\n                    {call.callStatus == 9 ? (\n                      <span className=\"text-sm\">Spare in Transit</span>\n                    ) : null}\n                    {call.callStatus == 10 ? (\n                      <span className=\"text-sm\">Cancelled Calls</span>\n                    ) : null}\n                    {call.callStatus == 11 ? (\n                      <span className=\"text-sm\">Closed Calls</span>\n                    ) : null}\n                  </TableCell>\n                  <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        <div className=\"px-4 py-2 dark:border-purple-400 border-purple-600 dark:bg-gray-700 bg-purple-100 inline-block rounded-lg dark:text-purple-400 text-purple-700\">\n                          {call.employeeName}\n                          <Button\n                            layout=\"link\"\n                            size=\"icon\"\n                            aria-label=\"Edit\"\n                            onClick={() => {\n                              setIsEnggModalOpen(true);\n                              setAssignedETA(call.assignedETA);\n                              setAssignedDate(call.assignedDate);\n                            }}\n                            className=\"rounded-full mx-2 \"\n                          >\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                          </Button>\n                        </div>\n                      </>\n                    ) : (\n                      <Button onClick={() => setIsEnggModalOpen(true)}>\n                        Assign Now\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default AssignEng;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nexport default function EngineerListModal({\n  isModalOpen,\n  setIsModalOpen,\n  setEngineer,\n  nextModal,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    console.log(\"HERERRE\");\n    Axios.post(`${API}/admin/${Emp.getId()}/getAll`)\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Name</TableCell>\n              <TableCell>Email</TableCell>\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-blue-300 dark:hover:bg-gray-100 bg-opacity-25 \"\n                onClick={() => {\n                  setEngineer({\n                    _id: user._id,\n                    enggName: user.employeeName,\n                  });\n                  setIsModalOpen(false);\n                  nextModal(true);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.employeeName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.email}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Assign Engineer</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}