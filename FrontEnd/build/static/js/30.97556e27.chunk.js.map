{"version":3,"sources":["pages/Notifications/Notifications.js","components/Modal/AssetFilters/CustomerSelection.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["Notifications","useState","activerowid","setActiveRowId","useContext","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","refresh","setRefresh","status","location","setLocation","ToLocation","setToLocation","condition","setCondition","selectedprod","searchquery","setSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","messageModal","setMessageModal","modalMessage","setModalMessage","useEffect","loc","EmpProfile","getLocation","a","console","log","payload","pages","limit","filters","from","to","axios","url","API","Emp","getId","method","response","out","total","updateInventory","i","j","items","lstItem","invItem","invItems","todaydate","moment","format","newhistory","histtype","date","callId","assetId","note","update","vendorName","id","_id","sno","$push","history","flag","map","item","name","updatelst","className","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","onClick","user","key","LSTNo","length","layout","aria-label","size","aria-hidden","num","type","tempdata","temp","filter","x","invnumber","InvTable","resultsPerPage","label","p","isOpen","onClose","CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","customerName","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/30.97556e27.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n// import { Page, Text, View, Document, StyleSheet,PDFDownloadLink } from '@react-pdf/renderer';\n// import ReactPDF from '@react-pdf/renderer';\n// import { PDFViewer } from '@react-pdf/renderer';\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n// import PrintLST from \"./PrintLST\";\n\nfunction Notifications() {\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [status, setstatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Notifications\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    let loc = EmpProfile.getLocation();\n    // console.log(\"Location\",loc);\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          // type: type,\n          from: location,\n          to: ToLocation,\n          status: \"In Transit\",\n          // searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      if (loc != \"All\") payload.filters.to = loc;\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/lst/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation, condition, status, refresh]);\n\n  console.log(selectedprod);\n\n  const updateInventory = async (i, j) => {\n    let items = data;\n    let lstItem = data[i];\n    let invItem = lstItem.invItems[j];\n    console.log(lstItem, invItem);\n\n    let todaydate = moment().format();\n\n    // ----history ---\n    let newhistory = {\n      histtype: \"lst\",\n      date: todaydate,\n      location: lstItem.to,\n      callId: \"Nil\",\n      assetId: \"Nil\",\n      status: invItem.condition,\n      note: `Item received at ${lstItem.to}`,\n    };\n    let update = {};\n    if (lstItem.to == \"Vendor\") {\n      newhistory.note = `Item received from ${lstItem.vendorName} back to ${lstItem.from}`;\n      update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.from,\n          sno: invItem.sno,\n          condition: invItem.condition,\n          $push: { history: newhistory },\n        },\n      };\n    } else {\n      update = {\n        id: invItem._id,\n        update: {\n          location: lstItem.to,\n          $push: { history: newhistory },\n        },\n      };\n    }\n    console.log(\"PAYLOAD\", update);\n    try {\n      await axios({\n        url: `${API}/inventory/${Emp.getId()}/invupdate`,\n        method: \"POST\",\n        data: update,\n      });\n      items[i].invItems[j].location = lstItem.to;\n      setData(items);\n      setActiveRowID(-1);\n      setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n    let flag = false;\n    items[i].invItems.map((item) => {\n      if (item.location == \"In Transit\") flag = true;\n    });\n\n    if (flag == true) {\n      setModalMessage(`${invItem.name} Recieved`);\n      setMessageModal(true);\n      return;\n    }\n    const updatelst = {\n      id: lstItem._id,\n      update: {\n        status: \"Received\",\n      },\n    };\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: updatelst,\n      });\n      // items[i].invItems[j].location=lstItem.to;\n      // setData(items);\n      // setActiveRowID(-1);\n      // setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      setModalMessage(\n        `${invItem.name} Recieved.\\n All Items Received from LST`\n      );\n      setMessageModal(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const InvTable = (num, to) => {\n    let items = data[num].invItems;\n    console.log(\"TO\", items.to);\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3\">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Category</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Inv Number</TableCell>\n                  <TableCell>Condition</TableCell>\n                  <TableCell>Receive</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {data[num].invItems.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.type}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      {data[num].to == \"Vendor\" &&\n                      user.location == \"In Transit\" ? (\n                        <span className=\"text-sm\">\n                          <input\n                            value={user.sno}\n                            onChange={(e) => {\n                              let tempdata = data;\n                              let temp = data[num].invItems;\n                              temp = temp.filter((x) => {\n                                if (x._id != user._id) return x;\n                                else {\n                                  console.log(\"here\", e.target.value, x.name);\n                                  x.sno = e.target.value;\n                                  return x;\n                                }\n                              });\n                              // tempnum.invItems=temp;\n                              tempdata[num].invItems = temp;\n                              console.log(tempdata);\n                              // tempdata[num].from=\"TETS\"\n                              setData([...tempdata]);\n                            }}\n                            placeholder=\"Cse Id.\"\n                            class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                          />\n                        </span>\n                      ) : (\n                        user.sno\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      {data[num].to == \"Vendor\" &&\n                      user.location == \"In Transit\" ? (\n                        <Select\n                          value={user.condition}\n                          className=\"mt-1\"\n                          onChange={(e) => {\n                            let tempdata = data;\n                            let temp = data[num].invItems;\n                            temp = temp.filter((x) => {\n                              if (x._id != user._id) return x;\n                              else {\n                                console.log(\"here\", e.target.value, x.name);\n                                x.condition = e.target.value;\n                                return x;\n                              }\n                            });\n                            // tempnum.invItems=temp;\n                            tempdata[num].invItems = temp;\n                            console.log(tempdata);\n                            // tempdata[num].from=\"TETS\"\n                            setData([...tempdata]);\n                          }}\n                        >\n                          <option value=\"Good\"> Good</option>\n                          <option value=\"Defective\">Defective</option>\n                          <option value=\"DOA\">DOA</option>z\n                          <option value=\"Damaged\">Damaged</option>\n                        </Select>\n                      ) : (\n                        <Badge\n                          type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                        >\n                          {user.condition}\n                        </Badge>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        layout=\"outline\"\n                        className=\"dark:border-green-700 border-green-400\"\n                        onClick={() => {\n                          if (user.location == \"In Transit\")\n                            updateInventory(num, i);\n                          else {\n                            setModalMessage(\"Already Received\");\n                            setMessageModal(true);\n                          }\n                        }}\n                      >\n                        {user.location == \"In Transit\" ? (\n                          <>Receive</>\n                        ) : (\n                          <>Received</>\n                        )}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        <div className=\" font-bold text-xl mt-10 dark:text-white\">\n          LSTs In Transit\n        </div>\n\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  From Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            {EmpProfile.getLocation == \"All\" ? (\n              <>\n                <div class=\"relative mx-1 \">\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={ToLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      To Location\n                    </option>\n                    <option value=\"\">All</option>\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                  </select>\n\n                  <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                    <svg\n                      class=\"fill-current h-4 w-4\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                    </svg>\n                  </div>\n                </div>\n              </>\n            ) : null}\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search LST Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr className=\"flex flex-row justify-between\">\n                <TableCell>LST.No</TableCell>\n                <TableCell>From</TableCell>\n                <TableCell>To</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>No.</TableCell>\n                {/* <TableCell>Status</TableCell> */}\n                <TableCell> Report</TableCell>\n                <TableCell>\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => setActiveRowID(-1)}\n                  >\n                    Items\n                  </span>\n                </TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <div className=\"flex flex-col justify-around\">\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(i);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.LSTNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.from}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {user.to == \"Vendor\" ? user.vendorName : user.to}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {\" \"}\n                        {moment(user.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invItems.length}</span>\n                    </TableCell>\n                    {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n                    <TableCell className=\"text-center \">\n                      <Button\n                        layout=\"outline\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(\"dwlod\");\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        Download\n                      </Button>\n                    </TableCell>\n                    <TableCell className=\"text-center \">\n                      <Button\n                        // layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(activerowid);\n                          // if(activerowid==i){\n\n                          // setActiveRowID(-1);\n                          // }\n                          // else\n                          setActiveRowID(i);\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        <DropdownIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n\n                  {activeRowID == i ? InvTable(i, user.to) : null}\n                </div>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default Notifications;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}