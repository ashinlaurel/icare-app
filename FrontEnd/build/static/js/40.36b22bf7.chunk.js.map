{"version":3,"sources":["pages/Inventory/UpdateInventory.js","components/Modal/CustomerCreateModal.js","helpers/unitHelper.js","components/Modal/AddUnitModal.js"],"names":["UpdateInventory","id","useParams","movehistory","useHistory","setTopHeading","useContext","TopBarContext","useState","calculate","setCalculate","datecalculate","setDateCalculate","calnum","setCalnum","purchtype","vendor","invnumber","invdate","location","invtype","gstno","panno","aadharno","purchlocation","totalInvoice","basevalues","setBaseValues","type","name","sno","condition","taxcategory","taxperc","rate","igst","cgst","sgst","nettax","amount","tcs","invamount","wty","expirydate","brand","model","systype","stocktype","caseId","values","setValues","err","setErr","useEffect","thegetter","a","data","Axios","url","API","Emp","getId","method","res","console","log","submitItems","newitems","map","item","payload","update","then","push","catch","newlist","parseInt","parseFloat","moment","format","newbaseval","add","handleBaseChange","e","target","value","className","onChange","i","num","selected","disabled","capitalize","toLowerCase","valid","readOnly","theperc","slice","onClick","aria-label","aria-haspopup","CustomerCreateModal","isModalOpen","setIsModalOpen","setCustomer","customer","customers","setCustomers","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","preventDefault","role","axios","response","pickCustomer","_id","customerName","isOpen","onClose","selectedIndex","onSelect","ind","onSubmit","placeholder","key","unitCreate","newunit","post","unit","error","status","errors","AddUnitModal","account","setAccount","accounts","setAccounts","accountName","customerId","accs","pickAccount"],"mappings":"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","file":"static/js/40.36b22bf7.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport moment from \"moment\";\nimport { Card, CardBody } from \"@windmill/react-ui\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport {\n  Input,\n  HelperText,\n  Label,\n  Button,\n  Badge,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport { signup, signin, authenticate } from \"../../helpers/auth\";\nimport CustomerCreateModal from \"../../components/Modal/CustomerCreateModal\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport { resetIdCounter } from \"react-tabs\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { unitCreate } from \"../../helpers/unitHelper\";\nimport AddUnitModal from \"../../components/Modal/AddUnitModal\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n/////////////----------------->>>>>> bug <<<<<------------customerList refresh--------------------------\n\nfunction UpdateInventory() {\n  const { id } = useParams();\n  let movehistory = useHistory();\n\n  const { setTopHeading } = useContext(TopBarContext);\n  const [flow, setFlow] = useState(\"basic\");\n  const [calculate, setCalculate] = useState(false);\n  const [datecalculate, setDateCalculate] = useState(false);\n  const [calnum, setCalnum] = useState(-1);\n\n  const thebval = {\n    purchtype: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: \"\",\n    location: \"\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"Local\",\n    totalInvoice: \"0\",\n  };\n  const [basevalues, setBaseValues] = useState(thebval);\n\n  const invdetails = {\n    type: \"\",\n    name: \"\",\n    // assetsIdHistory: \"\",\n    // assetId: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    taxcategory: \"\",\n    taxperc: \"\",\n    rate: \"\",\n    igst: \"0\",\n    cgst: \"0\",\n    sgst: \"0\",\n    nettax: \"0\",\n    amount: \"0\",\n    tcs: \"0\",\n    invamount: \"0\",\n    wty: \"\",\n    expirydate: \"\",\n    //-------------------------\n    purchtype: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: \"\",\n    location: \"\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"\",\n\n    brand: \"\",\n    model: \"\",\n    systype: \"\",\n    stocktype: \"\",\n\n    //-------\n    caseId: \"\",\n  };\n  const [values, setValues] = useState([invdetails]);\n\n  const [err, setErr] = useState({\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"\",\n    location: \"\",\n    invnumber: \"\",\n  });\n\n  useEffect(() => {\n    thegetter();\n  }, []);\n\n  const thegetter = async () => {\n    let data = { id: id };\n    // console.log(API);\n    try {\n      let res = await Axios({\n        url: `${API}/inventory/${Emp.getId()}/getById`,\n        method: \"POST\",\n        data: data,\n      });\n\n      setValues([res.data]);\n      setBaseValues(res.data);\n      setBaseValues({\n        purchtype: res.data.purchtype,\n        vendor: res.data.vendor,\n        invnumber: res.data.invnumber,\n        invdate: res.data.invdate,\n        location: res.data.location,\n        invtype: res.data.invtype,\n        gstno: res.data.gstno,\n        panno: res.data.panno,\n        aadharno: res.data.aadharno,\n        purchlocation: res.data.purchlocation,\n        totalInvoice: res.data.totalInvoice,\n      });\n\n      console.log(\"Done\", res.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const submitItems = async () => {\n    if (values.name === \"\" || values.sno === \"\" || values.invnumber === \"\") {\n      //   setIsReqFieldModal(true);\n      console.log(\"missing inputs\");\n      return;\n    }\n    let ids = [];\n    console.log(\"Submission Start\");\n    const newitems = [...values];\n    newitems.map((item) => {\n      item.purchtype = basevalues.purchtype;\n      item.vendor = basevalues.vendor;\n      item.invnumber = basevalues.invnumber;\n      item.invdate = basevalues.invdate;\n      item.location = basevalues.location;\n      item.invtype = basevalues.invtype;\n      item.gstno = basevalues.gstno;\n      item.panno = basevalues.panno;\n      item.aadharno = basevalues.aadharno;\n      item.purchlocation = basevalues.purchtype;\n    });\n    let payload = {\n      id: id,\n      update: newitems[0],\n    };\n    console.log(newitems);\n    await Axios({\n      url: `${API}/inventory/${Emp.getId()}/invupdate`,\n      method: \"POST\",\n      data: payload,\n    })\n      .then((data) => {\n        console.log(\"Updated\", data);\n        movehistory.push(\"/app/inventory\");\n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        setErr({ ...err });\n      });\n  };\n\n  // ----------------------Heading Use Effect-------------\n\n  useEffect(() => {\n    setTopHeading(\"Update Inventory\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // ------------------- Calculations----------------------------------\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (basevalues.purchlocation == \"Local\" && calnum != -1) {\n      newlist[calnum].sgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].cgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].nettax =\n        parseInt(newlist[calnum].sgst) + parseInt(newlist[calnum].cgst);\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    } else if (calnum != -1) {\n      newlist[calnum].igst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 100);\n      newlist[calnum].nettax = newlist[calnum].igst;\n\n      newlist[calnum].sgst = 0;\n      newlist[calnum].cgst = 0;\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    }\n\n    if (calnum != -1) {\n      newlist[calnum].tcs = parseFloat(newlist[calnum].amount) * 0.001;\n      newlist[calnum].invamount =\n        parseFloat(newlist[calnum].amount) + parseFloat(newlist[calnum].tcs);\n      newlist[calnum].expirydate = moment().format(\"DD-MM-YYYY\");\n      console.log(basevalues.totalInvoice, newlist[calnum].invamount);\n      console.log(\n        parseFloat(basevalues.totalInvoice) +\n          parseFloat(newlist[calnum].invamount)\n      );\n\n      let newbaseval = basevalues;\n      newbaseval.totalInvoice = parseFloat(\n        parseFloat(basevalues.totalInvoice) +\n          parseFloat(newlist[calnum].invamount)\n      );\n      setBaseValues(newbaseval);\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [calculate]);\n\n  //   const handleChange = (name) => (e) => {\n  //     setValues({ ...values, [name]: e.target.value });\n  //   };\n\n  // ---------Date Calculations ------------\n\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (calnum != -1) {\n      switch (newlist[calnum].wty) {\n        case \"0D\":\n          newlist[calnum].expirydate = moment(basevalues.invdate).format(\n            \"DD-MM-YYYY\"\n          );\n          break;\n        case \"3M\":\n          newlist[calnum].expirydate = moment()\n            .add(3, \"M\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"6M\":\n          newlist[calnum].expirydate = moment()\n            .add(6, \"M\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"1Y\":\n          newlist[calnum].expirydate = moment()\n            .add(1, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"2Y\":\n          newlist[calnum].expirydate = moment()\n            .add(2, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"3Y\":\n          newlist[calnum].expirydate = moment()\n            .add(3, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"4Y\":\n          newlist[calnum].expirydate = moment()\n            .add(4, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"5Y\":\n          newlist[calnum].expirydate = moment()\n            .add(5, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [datecalculate]);\n\n  const handleBaseChange = (name) => (e) => {\n    setBaseValues({ ...basevalues, [name]: e.target.value });\n  };\n\n  //   const ReviewSubmit = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReviewModalOpen}\n  //           onClose={() => setIsReviewModalOpen(false)}\n  //         >\n  //           <ModalHeader>Information updated Successfully!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               // onClick={() => setIsReviewModalOpen(false)}\n  //               onClick={() => setIsReviewModalOpen(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  //   const ReqFieldErrModal = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReqFieldModal}\n  //           onClose={() => setIsReqFieldModal(false)}\n  //         >\n  //           <ModalHeader>Required fields are not filled!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               onClick={() => setIsReqFieldModal(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  //   Basic Form\n\n  const BasicForm = () => {\n    return (\n      <div className=\"px-4 py-3 mt-4 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>\n            Purchase Information Total Invoice Amount{basevalues.totalInvoice}\n          </span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* -----Row 1 --------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Type*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.purchtype}\n                onChange={handleBaseChange(\"purchtype\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Vendor Name*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.vendor}\n                onChange={handleBaseChange(\"vendor\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invnumber}\n                onChange={handleBaseChange(\"invnumber\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Date*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"date\"\n                value={basevalues.invdate}\n                onChange={handleBaseChange(\"invdate\")}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* ------------------------Row 2-------------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, location: e.target.value });\n                }}\n              >\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n                <option value=\"In Transit\">In Transit</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Type*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invtype}\n                onChange={handleBaseChange(\"invtype\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>GST Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.gstno}\n                onChange={handleBaseChange(\"gstno\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Pan No*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.panno}\n                onChange={handleBaseChange(\"panno\")}\n              />\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------------------ROw 3-------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Aadhar No*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.aadharno}\n                onChange={handleBaseChange(\"aadharno\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({\n                    ...basevalues,\n                    purchlocation: e.target.value,\n                  });\n\n                  let newlist = [...values];\n                  newlist.map((item, i) => {\n                    item.taxcategory = \"\";\n                    item.taxperc = \"\";\n                  });\n                  // console.log(\"ohhhh\");\n                  // setValues([invdetails]);\n                }}\n              >\n                <option value=\"Local\">Local</option>\n                <option value=\"IGST\">IGST</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const ItemForm = (num) => {\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span>{\" \"}\n          <span className=\"ml-10\">\n            {\" \"}\n            Net Tax:{values[num].nettax} ,Invoice Amount:{\" \"}\n            {values[num].invamount}{\" \"}\n          </span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                value={values[num].systype}\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].systype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Type\n                </option>\n                <option value=\"item\">Item</option>\n                <option value=\"full system\">Full System</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Category*</span>\n              <Select\n                value={capitalize(values[num].type)}\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].type = e.target.value;\n                  newlist[num].type = newlist[num].type.toLowerCase();\n\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Type\n                </option>\n                {values[num].systype == \"item\" ? (\n                  <>\n                    <option value=\"Mouse\">Mouse</option>\n                    <option value=\"Keyboard\">Keyboard</option>\n                    <option value=\"Monitor\">Monitor</option>\n                    <option value=\"Cpu\">Cpu</option>\n                    <option value=\"Ram\">Ram</option>\n                    <option value=\"Fan\">Fan</option>\n                    <option value=\"Motherboard\">Motherboard</option>\n                    <option value=\"Smps\">SMPS</option>\n                    <option value=\"Hdd\">HDD</option>\n                    <option value=\"Gcard\">Gcard</option>\n                    <option value=\"Enetcard\">Enet Card</option>\n                    <option value=\"Serialcard\">Serial Card</option>\n                    <option value=\"Paralellcard\">Paralell Card</option>\n                    <option value=\"Opticalsrive\">Optical Drive</option>\n                    <option value=\"Others\">Others</option>\n                  </>\n                ) : (\n                  <>\n                    <option value=\"console\">Console</option>\n                    <option value=\"DMP\">DMP</option>\n                    <option value=\"inkjet\">Inkjet</option>\n                    <option value=\"KVM\">KVM</option>\n                    <option value=\"laptop\">Laptop</option>\n                    <option value=\"laser\">Laser</option>\n                    <option value=\"LMP\">LMP</option>\n                    <option value=\"module\">Module</option>\n                    <option value=\"router\">Router</option>\n                    <option value=\"scanner\">Scanner</option>\n                    <option value=\"server\">Server</option>\n                    <option value=\"desktop\">Desktop</option>\n                    <option value=\"storage\">Storage</option>\n                    <option value=\"switch\">Switch</option>\n                    <option value=\"UPS\">UPS</option>\n                    <option value=\"others\">Others</option>\n                  </>\n                )}\n              </Select>\n            </Label>\n          </div>\n\n          {values[num].systype == \"item\" ? (\n            <>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Product Name*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    value={values[num].name}\n                    onChange={(e) => {\n                      let newlist = [...values];\n                      newlist[num].name = e.target.value;\n                      setValues(newlist);\n                    }}\n                  />\n                </Label>\n                <HelperText valid={false}>{err.name}</HelperText>\n              </div>\n            </>\n          ) : (\n            <>\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Brand*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"text\"\n                      value={values.brand}\n                      onChange={(e) => {\n                        let newlist = [...values];\n                        newlist[num].brand = e.target.value;\n                        setValues(newlist);\n                      }}\n                    />\n                  </Label>\n                  <HelperText valid={false}>{err.brand}</HelperText>\n                </div>\n              </>\n\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Model*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"text\"\n                      value={values.model}\n                      onChange={(e) => {\n                        let newlist = [...values];\n                        newlist[num].model = e.target.value;\n                        setValues(newlist);\n                      }}\n                    />\n                  </Label>\n                  <HelperText valid={false}>{err.name}</HelperText>\n                </div>\n              </>\n            </>\n          )}\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].sno}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].sno = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n            <HelperText valid={false}>{err.sno}</HelperText>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                value={values[num].condition}\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].condition = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Bad\">Bad</option>\n                <option value=\"Used\">Used</option>\n                <option value=\"DOA\">DOA</option>\n                <option value=\"Scrap\">Scrap</option>\n                <option value=\"ScrapSold\">Scrap Sold</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Stock Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].stocktype}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].stocktype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Stock Type\n                </option>\n                <option value=\"Purchased\">Purchased</option>\n                <option value=\"Serviced\">Serviced</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].wty}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].wty = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setDateCalculate(!datecalculate);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"0D\">0 days</option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Year</option>\n                <option value=\"3Y\">3 Year</option>\n                <option value=\"4Y\">4 Year</option>\n                <option value=\"5Y\">5 Year</option>\n              </Select>\n            </Label>\n          </div>\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Expiry Date</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values[num].expirydate}\n                  readOnly={true}\n                />\n              </Label>\n              <HelperText valid={false}>{err.name}</HelperText>\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Category*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].taxcategory}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  let thestring = e.target.value;\n                  let theperc = thestring.slice(-3, -1);\n                  newlist[num].taxcategory = e.target.value;\n                  newlist[num].taxperc = theperc;\n                  setValues(newlist);\n                  // calculate trigger\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              >\n                {basevalues.purchlocation == \"Local\" ? (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"GST 18%\">GST 18%</option>\n                    <option value=\"GST 28%\">GST 28%</option>\n                  </>\n                ) : (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"IGST 18%\">IGST 18%</option>\n                    <option value=\"IGST 28%\">IGST 28%</option>\n                  </>\n                )}\n              </Select>\n            </Label>\n          </div>\n          {/* <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Percentage*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                readOnly=\"true\"\n                value={values[num].taxperc}\n              />\n            </Label>\n            <HelperText valid={false}>{err.invnumber}</HelperText>\n          </div> */}\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Rate*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].rate}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].rate = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* --------Row 4 ------------- */}\n        {/* <div className=\"flex-row flex space-x-3 my-2\">\n          {basevalues.purchlocation == \"Local\" ? (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>CGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].cgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>SGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].sgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          ) : (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>IGST</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].igst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          )}\n        </div> */}\n        {/* ----row 4------ */}\n        {/* <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].amount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>TCS</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].tcs}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].invamount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].invamount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div> */}\n\n        {/* <Label className=\"font-bold mt-5 mb-2\">\n    <span>Additional Information</span>\n  </Label> */}\n        {/* <hr /> */}\n      </div>\n    );\n  };\n\n  const BottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap\">\n            <Button\n              onClick={submitItems}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              // layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Submit\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      {BasicForm()}\n      {values.map((item, i) => {\n        return ItemForm(i);\n      })}\n      {BottomCard()}\n    </>\n  );\n}\n\nexport default UpdateInventory;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport { API } from \"../../backendapi\";\n\nexport default function CustomerCreateModal({\n  isModalOpen,\n  setIsModalOpen,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  // const [accounts, setAccounts] = useState([]);\n  // const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n  const [tempbadgeView, setTempBadgeView] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setIsModalOpen(false);\n    // setTempBadgeView(customer.customerName);\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Select Customer</ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          {/* <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {tempbadgeView}\n          </Badge> */}\n          {/* <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge> */}\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import Axios from \"axios\";\nimport { API } from \"../backendapi\";\nimport Emp from \"../helpers/auth/EmpProfile\";\n\nexport const unitCreate = (newunit) => {\n  return Axios.post(`${API}/unit/${Emp.getId()}/create`, newunit)\n    .then((unit) => {\n      console.log(\"h\", unit.data);\n      return unit.data;\n    })\n    .catch((error) => {\n      console.log(\"ERRRROs\");\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        throw error.response.data.errors;\n      }\n    });\n};\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\nimport { API } from \"../../backendapi\";\n\nexport default function AddUnitModal({\n  isModalOpen,\n  setIsModalOpen,\n\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  // const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select {tabIndex == 0 ? <>Customer</> : <>Account</>}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              // setRefresh(!refresh);\n\n              setAccounts([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}