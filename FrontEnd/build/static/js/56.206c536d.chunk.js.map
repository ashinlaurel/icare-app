{"version":3,"sources":["pages/Calls/EnggPriorityList.js","../../src/FileSaver.js"],"names":["EnggPriorityList","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","TopBarContext","setTopHeading","topheading","isDwnldModalOpen","setIsDwnldModalOpen","setPage","data","setData","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","totalResults","setTotalResults","useEffect","a","payload","pages","page","limit","filters","callStatus","searchquery","fromDate","toDate","employeeId","_id","console","log","axios","url","API","Emp","getId","method","response","out","total","downloadAssets","csv","map","call","i","callNo","moment","date","format","time","unitName","phone","assetId","producttype","product","serialno","problem","getCallStatusAsString","employeeName","assignedDate","assignedETA","csvData","Blob","type","saveAs","downloadAllCalls","temp","search","users","user","push","finaldata","length","payloadtwo","j","capitalize","isModalOpen","setIsModalOpen","setEmployee","isOpen","onClose","className","layout","onClick","item","key","resultsPerPage","label","onChange","p","status","MouseEvent","document","window","self","global","test","navigator","HTMLAnchorElement","b","name","location","setTimeout","f","autoBom","open","module"],"mappings":"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","file":"static/js/56.206c536d.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\n// import {\n//   ChatIcon,\n//   CartIcon,x\n//   MoneyIcon,\n//   PeopleIcon,\n//   ButtonsIcon,\n//   HeartIcon,\n//   EditIcon,\n//   TrashIcon,\n// } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport SelectEmployeeModal from \"../../components/Modal/SelectEmployeeModal\";\nimport SelectEmployeeModalForCalls from \"../../components/Modal/SelectEmployeeModalForCalls\";\nimport {\n  capitalize,\n  getCallStatusAsString,\n} from \"../../helpers/toolfuctions/toolfunctions\";\nimport { saveAs } from \"file-saver\";\n\nfunction EnggPriorityList() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n  //download\n  const [isDwnldModalOpen, setIsDwnldModalOpen] = useState(false);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  /////// engineer\n  const [engineer, setEngineer] = useState(null);\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 100;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  useEffect(() => {\n    (async () => {\n      if (engineer) {\n        let payload = {\n          pages: {\n            page: 1,\n            limit: 100000,\n          },\n          filters: {\n            callStatus: \"\",\n            searchquery: \"\",\n            fromDate: \"\",\n            toDate: \"\",\n            employeeId: engineer._id,\n            // servicelocation:\"Trivandrum\"\n          },\n        };\n        console.log(\"HERE\", payload);\n        try {\n          let response = await axios({\n            url: `${API}/call/${Emp.getId()}/getall`,\n            method: \"POST\",\n            data: payload,\n          });\n          console.log(response.data.out);\n          setTotalResults(response.data.total);\n          setData(response.data.out);\n          // const { total, data } = response.data;\n          // console.log(data + \"Now\");\n\n          setData(response.data.out);\n        } catch (error) {\n          throw error;\n        }\n        // console.log(engineer)\n      }\n    })();\n  }, [engineer]);\n\n  const DwnldModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isDwnldModalOpen}\n          onClose={() => setIsDwnldModalOpen(false)}\n          className=\" sdark:bg-gray-800 p-5 my-6 mx-10 px-5  bg-gray-50 text-gray-900 dark:text-white text-center  rounded-lg \"\n        >\n          <ModalHeader className=\"flex flex-row justify-between text-xl mx-10 px-10\">\n            <div className=\"text-lg\">Download Call Data?</div>\n          </ModalHeader>\n          <ModalBody>\n            <Button\n              layout=\"outline\"\n              onClick={() => {\n                downloadAssets();\n              }}\n            >\n              Download Current Engineer\n            </Button>\n          </ModalBody>\n          {/* <ModalFooter></ModalFooter> */}\n        </Modal>\n      </>\n    );\n  };\n\n  const downloadAssets = async () => {\n    let csv = `CallNo,Date,Time,Unit,Phone,Product,SerialNumber,Problem,CallStatus,AssignedTo,AssignedDate,ETA,Priority\\n`;\n\n    data.map((call, i) => {\n      csv =\n        csv +\n        `\"${call.callNo}\",\"${moment(call.date).format(\"DD-MM-YYYY\")}\",\"${moment(\n          `${\"2018-04-02\"}T${call.time}`\n        ).format(\"h:mm a\")}\",\"${call.unitName}\",\"${call.phone}\",\"${\n          call.assetId.producttype\n        }\",\"${call.assetId.product.serialno}\",\"${\n          call.problem\n        }\",\"${getCallStatusAsString(call.callStatus)}\",\"${\n          call.employeeName ? call.employeeName : \"Not Assigned\"\n        }\",\"${moment(call.assignedDate).format(\"DD-MM-YYYY\")}\",\"${\n          call.assignedETA\n        }\",\"${i + 1}\",\\n`;\n    });\n    // console.log(csv); //product.\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    saveAs(csvData, \"CallsExport.csv\");\n  };\n\n  // download funciton to get all engineers' calls\n  const downloadAllCalls = async () => {\n    let temp = [];\n\n    let payload = {\n      search: \"\",\n      limit: 1000000,\n    };\n    // here we are just getting all the employees not their calls\n    try {\n      let users = await axios({\n        url: `${API}/admin/${Emp.getId()}/getAllEmpCalls`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(users.data);\n\n      users.data.map((user) => {\n        temp.push(user);\n      });\n      // console.log(temp);\n      // setValues(temp);\n    } catch (error) {\n      throw error;\n    }\n    // console.log(temp);\n\n    // getting data of each employee\n\n    let finaldata = [];\n    for (let i = 0; i < temp.length; i++) {\n      let payloadtwo = {\n        pages: {\n          page: 1,\n          limit: 100000,\n        },\n        filters: {\n          callStatus: \"\",\n          searchquery: \"\",\n          fromDate: \"\",\n          toDate: \"\",\n          employeeId: temp[i]._id,\n          // servicelocation:\"Trivandrum\"\n        },\n      };\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payloadtwo,\n        });\n        console.log(response.data.out);\n        finaldata.push(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    // console.log(finaldata);\n    let csv = `CallNo,Date,Time,Unit,Phone,Product,SerialNumber,Problem,CallStatus,AssignedTo,AssignedDate,ETA,Priority,\\n`;\n\n    for (let j = 0; j < finaldata.length; j++) {\n      if (finaldata[j][0]) {\n        csv = csv + `${capitalize(finaldata[j][0].employeeName)},\\n`;\n      }\n\n      finaldata[j].map((call, i) => {\n        csv =\n          csv +\n          `\"${call.callNo}\",\"${moment(call.date).format(\n            \"DD-MM-YYYY\"\n          )}\",\"${moment(`${\"2018-04-02\"}T${call.time}`).format(\"h:mm a\")}\",\"${\n            call.unitName\n          }\",\"${call.phone}\",\"${call.assetId.producttype}\",\"${\n            call.assetId.product.serialno\n          }\",\"${call.problem}\",\"${getCallStatusAsString(call.callStatus)}\",\"${\n            call.employeeName ? call.employeeName : \"Not Assigned\"\n          }\",\"${moment(call.assignedDate).format(\"DD-MM-YYYY\")}\",\"${\n            call.assignedETA\n          }\",\"${i + 1}\",\\n`;\n      });\n    }\n    // console.log(csv); //product.\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    saveAs(csvData, \"CallsExport.csv\");\n  };\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Engineer Call Priority\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SelectEmployeeModalForCalls\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEmployee={setEngineer}\n      />\n      {DwnldModal()}\n      <SelectEmployeeModalForCalls />\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"flex flex-row items-center justify-start space-x-2\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <Button layout=\"outline\" onClick={() => setIsEnggModalOpen(true)}>\n            Select Engineer\n          </Button>\n          <div className=\"mx-4\">\n            <Button\n              className=\"px-12 py-2\"\n              layout=\"outline\"\n              onClick={() => {\n                setIsDwnldModalOpen(true);\n              }}\n            >\n              Export\n            </Button>\n          </div>\n          <div className=\"mx-4\">\n            <Button\n              className=\"px-12 py-2\"\n              layout=\"outline\"\n              onClick={() => {\n                // setIsDwnldModalOpen(true);\n                downloadAllCalls();\n              }}\n            >\n              Export All\n            </Button>\n          </div>\n          {/* <Button onClick={() => submitCustomer(true)}>Submit</Button> */}\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <TableCell>Call No</TableCell>\n              <TableCell>Date</TableCell>\n\n              <TableCell>Unit Name</TableCell>\n              <TableCell>Product</TableCell>\n              <TableCell>Problem</TableCell>\n\n              <TableCell>Call Status</TableCell>\n              <TableCell className=\"text-xs\">Assig. Date</TableCell>\n              {/* <TableCell>Assigned ETA</TableCell> */}\n              <TableCell>Priority</TableCell>\n              {/* <TableCell>Edit </TableCell> */}\n            </TableHeader>\n            <TableBody>\n              {engineer &&\n                data.map((item, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == item._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowId(callId._id);\n                      // setBBarOpen(1);\n                      // // console.log(\"the id is \" + call._id);\n                      // setSelectedProd(callId);\n                      // if (callId.assetId) setAssetDetails(callId.assetId);\n                      // else setAssetDetails({});\n                      // console.log(callId.assetId);\n                      // console.log(call.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{item.callNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {moment(item.date).format(\"DD/MM/YYYY\")}\n                        </span>\n                        <span className=\"text-sm\">\n                          {moment(`${\"2018-04-02\"}T${item.time}`).format(\n                            \"h:mm a\"\n                          )}\n                        </span>\n                      </div>\n                    </TableCell>\n\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">{item.unitName}</span>\n                        <span className=\"text-sm\">Ph: {item.phone}</span>\n                      </div>\n                    </TableCell>\n\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {item.assetId.producttype}\n                        </span>\n                        <span className=\"text-xs \">\n                          SL:{item.assetId.product.serialno}\n                        </span>\n                      </div>\n                    </TableCell>\n\n                    <TableCell className=\"flex flex-row \">\n                      <div className=\"flex items-center justify-center \">\n                        <div className=\"flex flex-col items-start overflow-auto text-sm w-40 \">\n                          <span className=\" \">{item.problem}</span>\n                          {item.employeeId ? (\n                            <span>Engineer: {item.employeeName}</span>\n                          ) : (\n                            <span>Engineer Not Assigned</span>\n                          )}\n                        </div>\n                      </div>\n                      {/* <span>Engineer: {call.engineer}</span> */}\n                    </TableCell>\n\n                    <TableCell className=\"text-xs  \">\n                      <div className=\" w-32 overflow-auto \">\n                        {item.callStatus == 0 ? (\n                          <span className=\" \">Pending For Allocation</span>\n                        ) : null}\n                        {item.callStatus == 1 ? (\n                          <span className=\"\">Pending for Percall Approval</span>\n                        ) : null}\n                        {item.callStatus == 2 ? (\n                          <span className=\"\">Pending for Response</span>\n                        ) : null}\n                        {item.callStatus == 3 ? (\n                          <span className=\"\">Pending for OEM Response</span>\n                        ) : null}\n                        {item.callStatus == 4 ? (\n                          <span className=\"\">Pending for 2nd Response</span>\n                        ) : null}\n                        {item.callStatus == 5 ? (\n                          <span className=\"\">Pending for Customer</span>\n                        ) : null}\n                        {item.callStatus == 6 ? (\n                          <span className=\"\">Under Observation</span>\n                        ) : null}\n                        {item.callStatus == 7 ? (\n                          <span className=\"\">Pending for Others</span>\n                        ) : null}\n                        {item.callStatus == 8 ? (\n                          <span className=\"\">Pending for Spare</span>\n                        ) : null}\n                        {item.callStatus == 9 ? (\n                          <span className=\"\">Spare in Transit</span>\n                        ) : null}\n                        {item.callStatus == 10 ? (\n                          <span className=\"\">Cancelled Calls</span>\n                        ) : null}\n                        {item.callStatus == 11 ? (\n                          <span className=\"\">Closed Calls</span>\n                        ) : null}\n                        {item.callStatus == 12 ? (\n                          <span className=\"\">Spare Taken CMRR</span>\n                        ) : null}\n                        {item.callStatus == 13 ? (\n                          <span className=\" \">\n                            Pending For Spare Collection\n                          </span>\n                        ) : null}\n                        {item.callStatus == 14 ? (\n                          <span className=\"\">Standby Given</span>\n                        ) : null}\n                        {item.callStatus == 15 ? (\n                          <Badge>Pending For Verification</Badge>\n                        ) : null}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {moment(item.assignedDate).format(\"DD-MM-YYYY\")}\n                        </span>\n                        <span className=\"text-xs\">\n                          {\" \"}\n                          Time: {item.assignedETA}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>{i + 1}</TableCell>\n                    {/* <TableCell>\n                    \n                      \n                        <div className=\"px-2 py-2 dark:border-purple-400 border-purple-600 dark:bg-gray-700 bg-purple-100 inline-block rounded-full dark:text-purple-400 text-purple-700\">\n                          \n                          <Button\n                            layout=\"link\"\n                            size=\"icon\"\n                            aria-label=\"Edit\"\n                            onClick={() => {\n                              setIsEnggModalOpen(true);\n                              setAssignedETA(item.assignedETA);\n                              setAssignedDate(item.assignedDate);\n                            }}\n                            className=\"rounded-full mx-2 \"\n                          >\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                          </Button>\n                        </div>\n                      \n                  </TableCell> */}\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default EnggPriorityList;\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"sourceRoot":""}