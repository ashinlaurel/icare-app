{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/Inventory/UpdateInventory.js","components/Modal/CustomerCreateModal.js","helpers/unitHelper.js","components/Modal/AddUnitModal.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","UpdateInventory","id","useParams","setTopHeading","useContext","TopBarContext","useState","calculate","setCalculate","datecalculate","setDateCalculate","calnum","setCalnum","purchtype","vendor","invnumber","invdate","location","invtype","gstno","panno","aadharno","purchlocation","totalInvoice","basevalues","setBaseValues","invdetails","type","name","sno","condition","taxcategory","taxperc","rate","igst","cgst","sgst","nettax","amount","tcs","invamount","wty","expirydate","brand","model","systype","stocktype","caseId","values","setValues","err","setErr","useEffect","thegetter","a","data","Axios","url","API","Emp","getId","method","res","console","log","submitItems","newitems","map","item","payload","update","then","catch","newlist","parseInt","parseFloat","moment","format","newbaseval","add","handleBaseChange","e","target","value","className","onChange","i","num","selected","disabled","toLowerCase","valid","readOnly","theperc","slice","onClick","aria-label","aria-haspopup","CustomerCreatetModal","isModalOpen","setIsModalOpen","setCustomer","getCustomers","post","search","role","users","temp","user","push","isOpen","onClose","key","_id","customerName","layout","unitCreate","newunit","unit","error","response","status","errors","AddUnitModal","account","setAccount","customer","customers","setCustomers","accounts","setAccounts","tabIndex","setTabIndex","pickCustomer","customerId","accs","pickAccount","accountName","selectedIndex","onSelect","ind"],"mappings":"uMAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,wOIi+B/EC,UAx8Bf,WAA4B,IAClBC,EAAOC,cAAPD,GAGAE,EAAkBC,qBAAWC,KAA7BF,cAJiB,EAKDG,mBAAS,SALR,gCAMSA,oBAAS,IANlB,mBAMlBC,EANkB,KAMPC,EANO,OAOiBF,oBAAS,GAP1B,mBAOlBG,EAPkB,KAOHC,EAPG,OAQGJ,oBAAU,GARb,mBAQlBK,EARkB,KAQVC,EARU,OAuBWN,mBAbpB,CACdO,UAAW,GACXC,OAAQ,GACRC,UAAW,GACXC,QAAS,GACTC,SAAU,aACVC,QAAS,GACTC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,cAAe,QACfC,aAAc,MArBS,mBAuBlBC,EAvBkB,KAuBNC,EAvBM,KAyBnBC,EAAa,CACjBC,KAAM,GACNC,KAAM,GAGNC,IAAK,GACLC,UAAW,OACXC,YAAa,GACbC,QAAS,GACTC,KAAM,GACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,IAAK,IACLC,UAAW,IACXC,IAAK,GACLC,WAAY,GAEZ7B,UAAW,GACXC,OAAQ,GACRC,UAAW,GACXC,QAAS,GACTC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,cAAe,GAEfqB,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,UAAW,GAGXC,OAAQ,IA9De,EAgEGzC,mBAAS,CAACoB,IAhEb,mBAgElBsB,EAhEkB,KAgEVC,EAhEU,OAkEH3C,mBAAS,CAC7BqB,KAAM,GACNC,KAAM,GACNC,IAAK,GACLC,UAAW,GACXb,SAAU,GACVF,UAAW,KAxEY,mBAkElBmC,EAlEkB,KAkEbC,EAlEa,KA2EzBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAS,uCAAG,8BAAAC,EAAA,6DACZC,EAAO,CAAEtD,GAAIA,GADD,kBAIEuD,IAAM,CACpBC,IAAI,GAAD,OAAKC,IAAL,sBAAsBC,IAAIC,QAA1B,YACHC,OAAQ,OACRN,KAAMA,IAPM,OAIVO,EAJU,OAUdb,EAAU,CAACa,EAAIP,OACf9B,EAAcqC,EAAIP,MAClB9B,EAAc,CACZZ,UAAWiD,EAAIP,KAAK1C,UACpBC,OAAQgD,EAAIP,KAAKzC,OACjBC,UAAW+C,EAAIP,KAAKxC,UACpBC,QAAS8C,EAAIP,KAAKvC,QAClBC,SAAU6C,EAAIP,KAAKtC,SACnBC,QAAS4C,EAAIP,KAAKrC,QAClBC,MAAO2C,EAAIP,KAAKpC,MAChBC,MAAO0C,EAAIP,KAAKnC,MAChBC,SAAUyC,EAAIP,KAAKlC,SACnBC,cAAewC,EAAIP,KAAKjC,cACxBC,aAAcuC,EAAIP,KAAKhC,eAGzBwC,QAAQC,IAAI,OAAQF,EAAIP,MA1BV,uHAAH,qDAgCTU,EAAW,uCAAG,8BAAAX,EAAA,yDACE,KAAhBN,EAAOpB,MAA8B,KAAfoB,EAAOnB,KAAmC,KAArBmB,EAAOjC,UADpC,uBAGhBgD,QAAQC,IAAI,kBAHI,gCAMR,GACVD,QAAQC,IAAI,qBACNE,EARY,YAQGlB,IACZmB,KAAI,SAACC,GACZA,EAAKvD,UAAYW,EAAWX,UAC5BuD,EAAKtD,OAASU,EAAWV,OACzBsD,EAAKrD,UAAYS,EAAWT,UAC5BqD,EAAKpD,QAAUQ,EAAWR,QAC1BoD,EAAKnD,SAAWO,EAAWP,SAC3BmD,EAAKlD,QAAUM,EAAWN,QAC1BkD,EAAKjD,MAAQK,EAAWL,MACxBiD,EAAKhD,MAAQI,EAAWJ,MACxBgD,EAAK/C,SAAWG,EAAWH,SAC3B+C,EAAK9C,cAAgBE,EAAWX,aAE9BwD,EAAQ,CACVpE,GAAGA,EACHqE,OAAOJ,EAAS,IAElBH,QAAQC,IAAIE,GAzBM,UA0BZV,IAAM,CACVC,IAAI,GAAD,OAAKC,IAAL,sBAAsBC,IAAIC,QAA1B,cACHC,OAAQ,OACRN,KAAMc,IAELE,MAAK,SAAChB,GACLQ,QAAQC,IAAI,UAAWT,MAKxBiB,OAAM,SAACtB,GACNa,QAAQC,IAAI,MAAOd,GACnBC,EAAO,eAAKD,OAvCE,4CAAH,qDA6CjBE,qBAAU,WAER,OADAjD,EAAc,oBACP,WACLA,EAAc,OAEf,IAEHiD,qBAAU,WAGR,IAAIqB,EAAO,YAAOzB,GA6BlB,GA3BgC,SAA5BxB,EAAWF,gBAAuC,GAAXX,GACzC8D,EAAQ9D,GAAQyB,KACdsC,SAASD,EAAQ9D,GAAQsB,OACxByC,SAASD,EAAQ9D,GAAQqB,SAAW,KACvCyC,EAAQ9D,GAAQwB,KACduC,SAASD,EAAQ9D,GAAQsB,OACxByC,SAASD,EAAQ9D,GAAQqB,SAAW,KACvCyC,EAAQ9D,GAAQ0B,OACdqC,SAASD,EAAQ9D,GAAQyB,MAAQsC,SAASD,EAAQ9D,GAAQwB,MAC5DsC,EAAQ9D,GAAQ2B,OACdqC,WAAWF,EAAQ9D,GAAQsB,MAAQ0C,WAAWF,EAAQ9D,GAAQ0B,UAG5C,GAAX1B,IACT8D,EAAQ9D,GAAQuB,KACdwC,SAASD,EAAQ9D,GAAQsB,OACxByC,SAASD,EAAQ9D,GAAQqB,SAAW,KACvCyC,EAAQ9D,GAAQ0B,OAASoC,EAAQ9D,GAAQuB,KAEzCuC,EAAQ9D,GAAQyB,KAAO,EACvBqC,EAAQ9D,GAAQwB,KAAO,EACvBsC,EAAQ9D,GAAQ2B,OACdqC,WAAWF,EAAQ9D,GAAQsB,MAAQ0C,WAAWF,EAAQ9D,GAAQ0B,UAKnD,GAAX1B,EAAc,CAChB8D,EAAQ9D,GAAQ4B,IAA2C,KAArCoC,WAAWF,EAAQ9D,GAAQ2B,QACjDmC,EAAQ9D,GAAQ6B,UACdmC,WAAWF,EAAQ9D,GAAQ2B,QAAUqC,WAAWF,EAAQ9D,GAAQ4B,KAClEkC,EAAQ9D,GAAQ+B,WAAakC,MAASC,OAAO,cAC7Cd,QAAQC,IAAIxC,EAAWD,aAAckD,EAAQ9D,GAAQ6B,WACrDuB,QAAQC,IACNW,WAAWnD,EAAWD,cACpBoD,WAAWF,EAAQ9D,GAAQ6B,YAG/B,IAAIsC,EAAatD,EACjBsD,EAAWvD,aAAeoD,WACxBA,WAAWnD,EAAWD,cACpBoD,WAAWF,EAAQ9D,GAAQ6B,YAE/Bf,EAAcqD,GAKhB,OAFA7B,EAAUwB,GAEH,WACLV,QAAQC,IAAI,yBAEb,CAACzD,IAQJ6C,qBAAU,WAGR,IAAIqB,EAAO,YAAOzB,GAElB,IAAe,GAAXrC,EACF,OAAQ8D,EAAQ9D,GAAQ8B,KACtB,IAAK,KACHgC,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAEV,MACF,IAAK,KACHJ,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAEV,MACF,IAAK,KACHJ,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAEV,MACF,IAAK,KACHJ,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAEV,MACF,IAAK,KACHJ,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAEV,MACF,IAAK,KACHJ,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAEV,MACF,IAAK,KACHJ,EAAQ9D,GAAQ+B,WAAakC,MAC1BG,IAAI,EAAG,KACPF,OAAO,cAWhB,OAFA5B,EAAUwB,GAEH,WACLV,QAAQC,IAAI,yBAEb,CAACvD,IAEJ,IAAMuE,EAAmB,SAACpD,GAAD,OAAU,SAACqD,GAClCxD,EAAc,2BAAKD,GAAN,kBAAmBI,EAAOqD,EAAEC,OAAOC,WA2pBlD,OACE,oCAxmBE,yBAAKC,UAAU,sEACb,kBAAC,QAAD,CAAOA,UAAU,aACf,0EAC4C5D,EAAWD,eAGzD,wBAAI6D,UAAU,cAEd,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,gDACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWX,UAClBwE,SAAUL,EAAiB,iBAIjC,yBAAKI,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,8CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWV,OAClBuE,SAAUL,EAAiB,cAIjC,yBAAKI,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,iDACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWT,UAClBsE,SAAUL,EAAiB,iBAIjC,yBAAKI,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,+CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWR,QAClBqE,SAAUL,EAAiB,gBAMnC,yBAAKI,UAAU,4BACb,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,2CACA,kBAAC,SAAD,CACEA,UAAU,OACVC,SAAU,SAACJ,GACTxD,EAAc,2BAAKD,GAAN,IAAkBP,SAAUgE,EAAEC,OAAOC,WAGpD,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,aAAd,gBAIN,yBAAKC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,+CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWN,QAClBmE,SAAUL,EAAiB,eAIjC,yBAAKI,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,6CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWL,MAClBkE,SAAUL,EAAiB,aAIjC,yBAAKI,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,yCACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWJ,MAClBiE,SAAUL,EAAiB,cAOnC,yBAAKI,UAAU,4BACb,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,4CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAO3D,EAAWH,SAClBgE,SAAUL,EAAiB,gBAIjC,yBAAKI,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,oDACA,kBAAC,SAAD,CACEA,UAAU,OACVC,SAAU,SAACJ,GACTxD,EAAc,2BACTD,GADQ,IAEXF,cAAe2D,EAAEC,OAAOC,SAGf,YAAOnC,GACVmB,KAAI,SAACC,EAAMkB,GACjBlB,EAAKrC,YAAc,GACnBqC,EAAKpC,QAAU,MAEjBiB,EAAU,CAACvB,MAGb,4BAAQyD,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,aA+dTnC,EAAOmB,KAAI,SAACC,EAAMkB,GACjB,OAvdYC,EAudID,EArdlB,yBAAKF,UAAU,iEACb,kBAAC,QAAD,CAAOA,UAAU,2CACf,+CAAqBG,EAAM,GAD7B,IACuC,0BAAMH,UAAU,SAAhB,YAAkCpC,EAAOuC,GAAKlD,OAA9C,qBAAwEW,EAAOuC,GAAK/C,UAApF,MAGvC,wBAAI4C,UAAU,cAEd,yBAAKA,UAAU,2BACb,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,8CACA,kBAAC,SAAD,CACEA,UAAU,OACVC,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK1C,QAAUoC,EAAEC,OAAOC,MAChClC,EAAUwB,KAGZ,4BAAQU,MAAM,GAAGK,UAAQ,EAACC,UAAQ,GAAlC,eAGA,4BAAQN,MAAM,QAAd,QACA,4BAAQA,MAAM,eAAd,kBAKN,yBAAKC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,kDACA,kBAAC,SAAD,CACEA,UAAU,OACVC,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK5D,KAAOsD,EAAEC,OAAOC,MAC7BV,EAAQc,GAAK5D,KAAO8C,EAAQc,GAAK5D,KAAK+D,cAEtCzC,EAAUwB,KAGZ,4BAAQU,MAAM,GAAGK,UAAQ,EAACC,UAAQ,GAAlC,eAGwB,QAAvBzC,EAAOuC,GAAK1C,QACX,oCACE,4BAAQsC,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,eAAd,eACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,YAAd,aACA,4BAAQA,MAAM,cAAd,eACA,4BAAQA,MAAM,gBAAd,iBACA,4BAAQA,MAAM,gBAAd,iBACA,4BAAQA,MAAM,UAAd,WAGF,oCACE,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,UAAd,cAOc,QAAvBnC,EAAOuC,GAAK1C,QACX,oCACE,yBAAKuC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,+CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAOnC,EAAOuC,GAAK3D,KACnByD,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK3D,KAAOqD,EAAEC,OAAOC,MAC7BlC,EAAUwB,OAIhB,kBAAC,aAAD,CAAYkB,OAAO,GAAQzC,EAAItB,QAInC,oCACE,oCACE,yBAAKwD,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,wCACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAOnC,EAAOL,MACd0C,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK5C,MAAQsC,EAAEC,OAAOC,MAC9BlC,EAAUwB,OAIhB,kBAAC,aAAD,CAAYkB,OAAO,GAAQzC,EAAIP,SAInC,oCACE,yBAAKyC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,wCACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAOnC,EAAOJ,MACdyC,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK3C,MAAQqC,EAAEC,OAAOC,MAC9BlC,EAAUwB,OAIhB,kBAAC,aAAD,CAAYkB,OAAO,GAAQzC,EAAItB,SAMvC,yBAAKwD,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,gDACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAOnC,EAAOuC,GAAK1D,IACnBwD,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK1D,IAAMoD,EAAEC,OAAOC,MAC5BlC,EAAUwB,OAIhB,kBAAC,aAAD,CAAYkB,OAAO,GAAQzC,EAAIrB,MAGjC,yBAAKuD,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,mDACA,kBAAC,SAAD,CACEA,UAAU,OACVC,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAKzD,UAAYmD,EAAEC,OAAOC,MAClClC,EAAUwB,KAGZ,4BAAQU,MAAM,OAAOK,UAAQ,GAA7B,QAGA,4BAAQL,MAAM,OAAd,WAOR,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,6CACA,kBAAC,SAAD,CACEA,UAAU,OACVD,MAAOnC,EAAOuC,GAAKzC,UACnBuC,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAKzC,UAAYmC,EAAEC,OAAOC,MAClClC,EAAUwB,KAGZ,4BAAQU,MAAM,GAAGK,UAAQ,EAACC,UAAQ,GAAlC,qBAGA,4BAAQN,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,eAIN,yBAAKC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,2CACA,kBAAC,SAAD,CACEA,UAAU,OACVD,MAAOnC,EAAOuC,GAAK9C,IACnB4C,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAK9C,IAAMwC,EAAEC,OAAOC,MAC5BlC,EAAUwB,GACV7D,EAAU2E,GACV7E,GAAkBD,KAGpB,4BAAQ0E,MAAM,GAAGK,UAAQ,EAACC,UAAQ,GAAlC,mBAGA,4BAAQN,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,aAKN,oCACE,yBAAKC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,6CACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAOnC,EAAOuC,GAAK7C,WACnBkD,UAAU,KAGd,kBAAC,aAAD,CAAYD,OAAO,GAAQzC,EAAItB,QAInC,yBAAKwD,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,+CACA,kBAAC,SAAD,CACEA,UAAU,OACVD,MAAOnC,EAAOuC,GAAKxD,YACnBsD,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAEd6C,EADYZ,EAAEC,OAAOC,MACDW,OAAO,GAAI,GACnCrB,EAAQc,GAAKxD,YAAckD,EAAEC,OAAOC,MACpCV,EAAQc,GAAKvD,QAAU6D,EACvB5C,EAAUwB,GAEV7D,EAAU2E,GACV/E,GAAcD,KAGa,SAA5BiB,EAAWF,cACV,oCACE,4BAAQ6D,MAAM,GAAGK,UAAQ,EAACC,UAAQ,GAAlC,uBAGA,4BAAQN,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,YAGF,oCACE,4BAAQA,MAAM,GAAGK,UAAQ,EAACC,UAAQ,GAAlC,uBAGA,4BAAQN,MAAM,YAAd,YACA,4BAAQA,MAAM,YAAd,gBAkBV,yBAAKC,UAAU,wBACb,kBAAC,QAAD,CAAOA,UAAU,UACf,uCACA,kBAAC,QAAD,CACEA,UAAU,OACVzD,KAAK,OACLwD,MAAOnC,EAAOuC,GAAKtD,KACnBoD,SAAU,SAACJ,GACT,IAAIR,EAAO,YAAOzB,GAClByB,EAAQc,GAAKtD,KAAOgD,EAAEC,OAAOC,MAC7BlC,EAAUwB,GACV7D,EAAU2E,GACV/E,GAAcD,UAzTb,IAACgF,KA6bd,kBAAC,OAAD,CAAMH,UAAU,mBACd,kBAAC,WAAD,KACE,yBAAKA,UAAU,2BAKb,kBAAC,SAAD,CACEW,QAAS9B,EACT+B,aAAW,gBACXC,gBAAc,OAEdb,UAAU,UALZ,gB,iJCv7BG,SAASc,EAAT,GAIX,IAHFC,EAGC,EAHDA,YACAC,EAEC,EAFDA,eACAC,EACC,EADDA,YACC,EAC2B/F,mBAAS,IADpC,mBACM0C,EADN,KACcC,EADd,KAEDG,qBAAU,WACRkD,MACC,IAEH,IAAMA,EAAe,WACnB9C,IAAM+C,KAAN,UAAc7C,IAAd,uBAAwC,CAAE8C,OAAQ,GAAIC,KAAM,IACzDlC,MAAK,SAACmC,GACL3C,QAAQC,IAAI0C,EAAMnD,MAClB,IAAIoD,EAAO,GACXD,EAAMnD,KAAKY,KAAI,SAACyC,GACdD,EAAKE,KAAKD,MAEZ3D,EAAU0D,MAEXnC,OAAM,SAACtB,GACNa,QAAQC,IAAI,WAAYd,OA6D9B,OACE,oCAIE,kBAAC,QAAD,CAAO4D,OAAQX,EAAaY,QAAS,kBAAMX,GAAe,KACxD,kBAAC,cAAD,qBACA,kBAAC,YAAD,KA9DF,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,mBAMJ,kBAAC,YAAD,KACGpD,EAAOmB,KAAI,SAACyC,EAAMtB,GAAP,OACV,kBAAC,WAAD,CACE0B,IAAK1B,EACLF,UAAU,uBACVW,QAAS,WACPM,EAAY,CACVY,IAAKL,EAAKK,IACVC,aAAcN,EAAKhF,OAErBwE,GAAe,KAGjB,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGhB,UAAU,iBAAiBwB,EAAKhF,eAiBjD,kBAAC,cAAD,QAoBA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEwD,UAAU,mBACV+B,OAAO,UACPpB,QAAS,kBAAMK,GAAe,KAHhC,UAOA,kBAAC,SAAD,CAAQhB,UAAU,oBAAlB,e,gCCvHV,sEAIagC,EAAa,SAACC,GACzB,OAAO7D,IAAM+C,KAAN,UAAc7C,IAAd,iBAA0BC,IAAIC,QAA9B,WAAgDyD,GACpD9C,MAAK,SAAC+C,GAEL,OADAvD,QAAQC,IAAI,IAAKsD,EAAK/D,MACf+D,EAAK/D,QAEbiB,OAAM,SAAC+C,GAEN,GADAxD,QAAQC,IAAI,WACRuD,EAAMC,SAGR,MAFAzD,QAAQC,IAAIuD,EAAMC,SAASjE,MAC3BQ,QAAQC,IAAIuD,EAAMC,SAASC,QACrBF,EAAMC,SAASjE,KAAKmE,Y,mKCSnB,SAASC,EAAT,GAOX,IANFxB,EAMC,EANDA,YACAC,EAKC,EALDA,eACAwB,EAIC,EAJDA,QACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACAzB,EACC,EADDA,YACC,EACiC/F,mBAAS,IAD1C,mBACMyH,EADN,KACiBC,EADjB,OAE+B1H,mBAAS,IAFxC,mBAEM2H,EAFN,KAEgBC,EAFhB,OAGyB5H,mBAAS,IAHlC,gCAI+BA,mBAAS,IAJxC,mBAIM6H,EAJN,KAIgBC,EAJhB,KAKDhF,qBAAU,WACRI,IAAM+C,KAAN,UAAc7C,IAAd,uBAAwC,CAAE8C,OAAQ,GAAIC,KAAM,IACzDlC,MAAK,SAACmC,GACL3C,QAAQC,IAAI0C,EAAMnD,MAClB,IAAIoD,EAAO,GACXD,EAAMnD,KAAKY,KAAI,SAACyC,GACdD,EAAKE,KAAKD,MAEZoB,EAAarB,MAEdnC,OAAM,SAACtB,GACNa,QAAQC,IAAI,WAAYd,QAE3B,IAEH,IAAMmF,EAAY,uCAAG,WAAOP,GAAP,eAAAxE,EAAA,6DAEnB+C,EAAY,CACVY,IAAKa,EAASb,IACdC,aAAcY,EAASlG,OAJN,kBAOE4B,IAAM+C,KAAN,UAAc7C,IAAd,sBAAuC,CACxD4E,WAAYR,EAASb,MARN,OAOXsB,EAPW,OAUjBxE,QAAQC,IAAIuE,EAAKhF,MAKjB2E,EAAYK,EAAKhF,MACjB6E,EAAY,GAhBK,kDAkBjBrE,QAAQC,IAAI,WAAZ,MAlBiB,0DAAH,sDAsBZwE,EAAW,uCAAG,WAAOZ,GAAP,SAAAtE,EAAA,sDAClBS,QAAQC,IAAI4D,GACZC,EAAW,CACTZ,IAAKW,EAAQX,IACbwB,YAAab,EAAQhG,OAJL,2CAAH,sDA8EjB,OACE,oCAIE,kBAAC,QAAD,CAAOkF,OAAQX,EAAaY,QAAS,kBAAMX,GAAe,KACxD,kBAAC,cAAD,eACsB,GAAZ+B,EAAgB,gDAAgB,gDAE1C,kBAAC,YAAD,KACE,kBAAC,IAAD,CAAMO,cAAeP,EAAUQ,SAAU,SAACC,GAAD,OAASR,EAAYQ,KAC5D,kBAAC,IAAD,KACE,kBAAC,IAAD,iBACA,kBAAC,IAAD,iBAEF,kBAAC,IAAD,KAnFN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,mBAMJ,kBAAC,YAAD,KACGb,EAAU5D,KAAI,SAAC2D,EAAUxC,GAAX,OACb,kBAAC,WAAD,CACE0B,IAAK1B,EACLF,UAAU,qCACVW,QAAS,kBAAMsC,EAAaP,KAE5B,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAG1C,UAAU,iBAAiB0C,EAASlG,eAQrD,kBAAC,cAAD,QAwDI,kBAAC,IAAD,KAjDN,kBAAC,iBAAD,KACE,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,kBAMJ,kBAAC,YAAD,KACGqG,EAAS9D,KAAI,SAACyD,EAAStC,GAAV,OACZ,kBAAC,WAAD,CACE0B,IAAK1B,EACLF,UAAU,qCACVW,QAAS,kBAAMyC,EAAYZ,KAE3B,kBAAC,YAAD,KACE,6BACE,6BACE,uBAAGxC,UAAU,iBAAiBwC,EAAQhG,eAQpD,kBAAC,cAAD,SAuBE,kBAAC,QAAD,CAAOwD,UAAU,eAAezD,KAAK,WAArC,aACamG,EAASZ,cAEtB,kBAAC,QAAD,CAAO9B,UAAU,eAAezD,KAAK,WAArC,aACaiG,EAAQa,cAGvB,kBAAC,cAAD,KACE,kBAAC,SAAD,CACErD,UAAU,mBAEVW,QAAS,kBAAMK,GAAe,KAHhC","file":"static/js/15.38b0444c.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport moment from \"moment\";\nimport { Card, CardBody } from \"@windmill/react-ui\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport {\n  Input,\n  HelperText,\n  Label,\n  Button,\n  Badge,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport { signup, signin, authenticate } from \"../../helpers/auth\";\nimport CustomerCreateModal from \"../../components/Modal/CustomerCreateModal\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport { resetIdCounter } from \"react-tabs\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { unitCreate } from \"../../helpers/unitHelper\";\nimport AddUnitModal from \"../../components/Modal/AddUnitModal\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Axios from \"axios\";\n/////////////----------------->>>>>> bug <<<<<------------customerList refresh--------------------------\n\nfunction UpdateInventory() {\n  const { id } = useParams();\n  \n\n  const { setTopHeading } = useContext(TopBarContext);\n  const [flow, setFlow] = useState(\"basic\");\n  const [calculate, setCalculate] = useState(false);\n  const [datecalculate, setDateCalculate] = useState(false);\n  const [calnum, setCalnum] = useState(-1);\n\n  const thebval = {\n    purchtype: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: \"\",\n    location: \"Trivandrum\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"Local\",\n    totalInvoice: \"0\",\n  };\n  const [basevalues, setBaseValues] = useState(thebval);\n\n  const invdetails = {\n    type: \"\",\n    name: \"\",\n    // assetsIdHistory: \"\",\n    // assetId: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    taxcategory: \"\",\n    taxperc: \"\",\n    rate: \"\",\n    igst: \"0\",\n    cgst: \"0\",\n    sgst: \"0\",\n    nettax: \"0\",\n    amount: \"0\",\n    tcs: \"0\",\n    invamount: \"0\",\n    wty: \"\",\n    expirydate: \"\",\n    //-------------------------\n    purchtype: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: \"\",\n    location: \"\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"\",\n\n    brand: \"\",\n    model: \"\",\n    systype: \"\",\n    stocktype: \"\",\n\n    //-------\n    caseId: \"\",\n  };\n  const [values, setValues] = useState([invdetails]);\n\n  const [err, setErr] = useState({\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"\",\n    location: \"\",\n    invnumber: \"\",\n  });\n\n  useEffect(() => {\n    thegetter();\n  }, [])\n\n  const thegetter = async () => {\n    let data = { id: id };\n    // console.log(API);\n    try {\n      let res = await Axios({\n        url: `${API}/inventory/${Emp.getId()}/getById`,\n        method: \"POST\",\n        data: data,\n      });\n\n      setValues([res.data]);\n      setBaseValues(res.data);\n      setBaseValues({\n        purchtype: res.data.purchtype,\n        vendor: res.data.vendor,\n        invnumber: res.data.invnumber,\n        invdate: res.data.invdate,\n        location: res.data.location,\n        invtype: res.data.invtype,\n        gstno: res.data.gstno,\n        panno: res.data.panno,\n        aadharno: res.data.aadharno,\n        purchlocation: res.data.purchlocation,\n        totalInvoice: res.data.totalInvoice,\n      })\n\n      console.log(\"Done\", res.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const submitItems = async () => {\n    if (values.name === \"\" || values.sno === \"\" || values.invnumber === \"\") {\n      //   setIsReqFieldModal(true);\n      console.log(\"missing inputs\");\n      return;\n    }\n    let ids = [];\n    console.log(\"Submission Start\");\n    const newitems = [...values];\n    newitems.map((item) => {\n      item.purchtype = basevalues.purchtype;\n      item.vendor = basevalues.vendor;\n      item.invnumber = basevalues.invnumber;\n      item.invdate = basevalues.invdate;\n      item.location = basevalues.location;\n      item.invtype = basevalues.invtype;\n      item.gstno = basevalues.gstno;\n      item.panno = basevalues.panno;\n      item.aadharno = basevalues.aadharno;\n      item.purchlocation = basevalues.purchtype;\n    });\n    let payload={\n      id:id,\n      update:newitems[0]\n    }\n    console.log(newitems);\n    await Axios({\n      url: `${API}/inventory/${Emp.getId()}/invupdate`,\n      method: \"POST\",\n      data: payload,\n    })\n      .then((data) => {\n        console.log(\"Updated\", data);\n        \n\n       \n      })\n      .catch((err) => {\n        console.log(\"err\", err);\n        setErr({ ...err });\n      });\n  };\n\n  // ----------------------Heading Use Effect-------------\n\n  useEffect(() => {\n    setTopHeading(\"Update Inventory\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // ------------------- Calculations----------------------------------\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (basevalues.purchlocation == \"Local\" && calnum != -1) {\n      newlist[calnum].sgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].cgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].nettax =\n        parseInt(newlist[calnum].sgst) + parseInt(newlist[calnum].cgst);\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    } else if (calnum != -1) {\n      newlist[calnum].igst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 100);\n      newlist[calnum].nettax = newlist[calnum].igst;\n\n      newlist[calnum].sgst = 0;\n      newlist[calnum].cgst = 0;\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    }\n\n    if (calnum != -1) {\n      newlist[calnum].tcs = parseFloat(newlist[calnum].amount) * 0.001;\n      newlist[calnum].invamount =\n        parseFloat(newlist[calnum].amount) + parseFloat(newlist[calnum].tcs);\n      newlist[calnum].expirydate = moment().format(\"DD-MM-YYYY\");\n      console.log(basevalues.totalInvoice, newlist[calnum].invamount);\n      console.log(\n        parseFloat(basevalues.totalInvoice) +\n          parseFloat(newlist[calnum].invamount)\n      );\n\n      let newbaseval = basevalues;\n      newbaseval.totalInvoice = parseFloat(\n        parseFloat(basevalues.totalInvoice) +\n          parseFloat(newlist[calnum].invamount)\n      );\n      setBaseValues(newbaseval);\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [calculate]);\n\n  //   const handleChange = (name) => (e) => {\n  //     setValues({ ...values, [name]: e.target.value });\n  //   };\n\n  // ---------Date Calculations ------------\n\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (calnum != -1) {\n      switch (newlist[calnum].wty) {\n        case \"3M\":\n          newlist[calnum].expirydate = moment()\n            .add(3, \"M\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"6M\":\n          newlist[calnum].expirydate = moment()\n            .add(6, \"M\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"1Y\":\n          newlist[calnum].expirydate = moment()\n            .add(1, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"2Y\":\n          newlist[calnum].expirydate = moment()\n            .add(2, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"3Y\":\n          newlist[calnum].expirydate = moment()\n            .add(3, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"4Y\":\n          newlist[calnum].expirydate = moment()\n            .add(4, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"5Y\":\n          newlist[calnum].expirydate = moment()\n            .add(5, \"Y\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [datecalculate]);\n\n  const handleBaseChange = (name) => (e) => {\n    setBaseValues({ ...basevalues, [name]: e.target.value });\n  };\n\n  //   const ReviewSubmit = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReviewModalOpen}\n  //           onClose={() => setIsReviewModalOpen(false)}\n  //         >\n  //           <ModalHeader>Information updated Successfully!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               // onClick={() => setIsReviewModalOpen(false)}\n  //               onClick={() => setIsReviewModalOpen(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  //   const ReqFieldErrModal = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReqFieldModal}\n  //           onClose={() => setIsReqFieldModal(false)}\n  //         >\n  //           <ModalHeader>Required fields are not filled!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               onClick={() => setIsReqFieldModal(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  //   Basic Form\n\n  const BasicForm = () => {\n    return (\n      <div className=\"px-4 py-3 mt-4 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>\n            Purchase Information Total Invoice Amount{basevalues.totalInvoice}\n          </span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* -----Row 1 --------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Type*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.purchtype}\n                onChange={handleBaseChange(\"purchtype\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Vendor Name*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.vendor}\n                onChange={handleBaseChange(\"vendor\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invnumber}\n                onChange={handleBaseChange(\"invnumber\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Date*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"date\"\n                value={basevalues.invdate}\n                onChange={handleBaseChange(\"invdate\")}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* ------------------------Row 2-------------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, location: e.target.value });\n                }}\n              >\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Type*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invtype}\n                onChange={handleBaseChange(\"invtype\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>GST Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.gstno}\n                onChange={handleBaseChange(\"gstno\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Pan No*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.panno}\n                onChange={handleBaseChange(\"panno\")}\n              />\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------------------ROw 3-------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Aadhar No*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.aadharno}\n                onChange={handleBaseChange(\"aadharno\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({\n                    ...basevalues,\n                    purchlocation: e.target.value,\n                  });\n\n                  let newlist = [...values];\n                  newlist.map((item, i) => {\n                    item.taxcategory = \"\";\n                    item.taxperc = \"\";\n                  });\n                  setValues([invdetails]);\n                }}\n              >\n                <option value=\"Local\">Local</option>\n                <option value=\"IGST\">IGST</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const ItemForm = (num) => {\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span> <span className=\"ml-10\"> Net Tax:{values[num].nettax} ,Invoice Amount: {values[num].invamount} </span>\n          \n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].systype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Type\n                </option>\n                <option value=\"item\">Item</option>\n                <option value=\"full system\">Full System</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Category*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].type = e.target.value;\n                  newlist[num].type = newlist[num].type.toLowerCase();\n\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Type\n                </option>\n                {values[num].systype == \"item\" ? (\n                  <>\n                    <option value=\"Mouse\">Mouse</option>\n                    <option value=\"Keyboard\">Keyboard</option>\n                    <option value=\"Monitor\">Monitor</option>\n                    <option value=\"Cpu\">Cpu</option>\n                    <option value=\"Ram\">Ram</option>\n                    <option value=\"Fan\">Fan</option>\n                    <option value=\"Motherboard\">Motherboard</option>\n                    <option value=\"SMPS\">SMPS</option>\n                    <option value=\"HDD\">HDD</option>\n                    <option value=\"GCard\">Gcard</option>\n                    <option value=\"EnetCard\">Enet Card</option>\n                    <option value=\"SerialCard\">Serial Card</option>\n                    <option value=\"ParalellCard\">Paralell Card</option>\n                    <option value=\"OpticalDrive\">Optical Drive</option>\n                    <option value=\"Others\">Others</option>\n                  </>\n                ) : (\n                  <>\n                    <option value=\"console\">Console</option>\n                    <option value=\"DMP\">DMP</option>\n                    <option value=\"inkjet\">Inkjet</option>\n                    <option value=\"KVM\">KVM</option>\n                    <option value=\"laptop\">Laptop</option>\n                    <option value=\"laser\">Laser</option>\n                    <option value=\"LMP\">LMP</option>\n                    <option value=\"module\">Module</option>\n                    <option value=\"router\">Router</option>\n                    <option value=\"scanner\">Scanner</option>\n                    <option value=\"server\">Server</option>\n                    <option value=\"desktop\">Desktop</option>\n                    <option value=\"storage\">Storage</option>\n                    <option value=\"switch\">Switch</option>\n                    <option value=\"UPS\">UPS</option>\n                    <option value=\"others\">Others</option>\n                  </>\n                )}\n              </Select>\n            </Label>\n          </div>\n\n          {values[num].systype == \"item\" ? (\n            <>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Product Name*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    value={values[num].name}\n                    onChange={(e) => {\n                      let newlist = [...values];\n                      newlist[num].name = e.target.value;\n                      setValues(newlist);\n                    }}\n                  />\n                </Label>\n                <HelperText valid={false}>{err.name}</HelperText>\n              </div>\n            </>\n          ) : (\n            <>\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Brand*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"text\"\n                      value={values.brand}\n                      onChange={(e) => {\n                        let newlist = [...values];\n                        newlist[num].brand = e.target.value;\n                        setValues(newlist);\n                      }}\n                    />\n                  </Label>\n                  <HelperText valid={false}>{err.brand}</HelperText>\n                </div>\n              </>\n\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Model*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"text\"\n                      value={values.model}\n                      onChange={(e) => {\n                        let newlist = [...values];\n                        newlist[num].model = e.target.value;\n                        setValues(newlist);\n                      }}\n                    />\n                  </Label>\n                  <HelperText valid={false}>{err.name}</HelperText>\n                </div>\n              </>\n            </>\n          )}\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].sno}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].sno = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n            <HelperText valid={false}>{err.sno}</HelperText>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].condition = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Bad\">Bad</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Stock Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].stocktype}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].stocktype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Stock Type\n                </option>\n                <option value=\"Purchased\">Purchased</option>\n                <option value=\"Serviced\">Serviced</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].wty}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].wty = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setDateCalculate(!datecalculate);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Year</option>\n                <option value=\"3Y\">3 Year</option>\n                <option value=\"4Y\">4 Year</option>\n                <option value=\"5Y\">5 Year</option>\n              </Select>\n            </Label>\n          </div>\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Expiry Date</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values[num].expirydate}\n                  readOnly={true}\n                />\n              </Label>\n              <HelperText valid={false}>{err.name}</HelperText>\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Category*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].taxcategory}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  let thestring = e.target.value;\n                  let theperc = thestring.slice(-3, -1);\n                  newlist[num].taxcategory = e.target.value;\n                  newlist[num].taxperc = theperc;\n                  setValues(newlist);\n                  // calculate trigger\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              >\n                {basevalues.purchlocation == \"Local\" ? (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"GST 18%\">GST 18%</option>\n                    <option value=\"GST 28%\">GST 28%</option>\n                  </>\n                ) : (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"IGST 18%\">IGST 18%</option>\n                    <option value=\"IGST 28%\">IGST 28%</option>\n                  </>\n                )}\n              </Select>\n            </Label>\n          </div>\n          {/* <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Percentage*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                readOnly=\"true\"\n                value={values[num].taxperc}\n              />\n            </Label>\n            <HelperText valid={false}>{err.invnumber}</HelperText>\n          </div> */}\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Rate*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].rate}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].rate = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* --------Row 4 ------------- */}\n        {/* <div className=\"flex-row flex space-x-3 my-2\">\n          {basevalues.purchlocation == \"Local\" ? (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>CGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].cgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>SGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].sgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          ) : (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>IGST</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].igst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          )}\n        </div> */}\n        {/* ----row 4------ */}\n        {/* <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].amount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>TCS</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].tcs}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].invamount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].invamount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div> */}\n\n        {/* <Label className=\"font-bold mt-5 mb-2\">\n    <span>Additional Information</span>\n  </Label> */}\n        {/* <hr /> */}\n      </div>\n    );\n  };\n\n  const BottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap\">\n           \n\n\n\n            <Button\n              onClick={submitItems}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              // layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Submit\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      {BasicForm()}\n      {values.map((item, i) => {\n        return ItemForm(i);\n      })}\n      {BottomCard()}\n    </>\n  );\n}\n\nexport default UpdateInventory;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\n\nexport default function CustomerCreatetModal({\n  isModalOpen,\n  setIsModalOpen,\n  setCustomer,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    getCustomers();\n  }, []);\n\n  const getCustomers = () => {\n    Axios.post(`${API}/customer/customers`, { search: \"\", role: 1 })\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  };\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-900 \"\n                onClick={() => {\n                  setCustomer({\n                    _id: user._id,\n                    customerName: user.name,\n                  });\n                  setIsModalOpen(false);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                {/* <TableCell>\n                    <span className=\"text-sm\">$ {user.email}</span>\n                  </TableCell> */}\n                {/* <TableCell>\n                    <Badge type={user.status}>{user.status}</Badge>\n                  </TableCell> */}\n                {/* <TableCell>\n                  <span className=\"text-sm\">{user.infoId.unit}</span>\n                </TableCell> */}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Modal header</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import Axios from \"axios\";\nimport { API } from \"../backendapi\";\nimport Emp from \"../helpers/auth/EmpProfile\";\n\nexport const unitCreate = (newunit) => {\n  return Axios.post(`${API}/unit/${Emp.getId()}/create`, newunit)\n    .then((unit) => {\n      console.log(\"h\", unit.data);\n      return unit.data;\n    })\n    .catch((error) => {\n      console.log(\"ERRRROs\");\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        throw error.response.data.errors;\n      }\n    });\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function AddUnitModal({\n  isModalOpen,\n  setIsModalOpen,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  useEffect(() => {\n    Axios.post(`${API}/customer/customers`, { search: \"\", role: 1 })\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setCustomers(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select {tabIndex == 0 ? <>Customer</> : <>Account</>}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}