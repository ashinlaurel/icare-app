{"version":3,"sources":["helpers/toolfuctions/toolfunctions.js","pages/LST/LST.js","components/Modal/AssetFilters/CustomerSelection.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["exports","capitalize","s","charAt","toUpperCase","slice","LST","useState","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","SelectedItems","setSelectedItems","refresh","setRefresh","LSTtype","setLSTtype","type","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","moment","format","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","isVendorModalopen","setIsVendorModalopen","vendors","setVendors","defVendor","_id","name","aadharNo","PANNo","GSTNo","selectedVendor","setselectedVendor","isVendor","setIsVendor","CMRRinvdetails","sno","invnumber","caseId","CMRRvalues","setCMRRValues","a","payload","filters","axios","url","API","Emp","getId","method","response","console","log","out","useEffect","getVendorList","totalResults","setTotalResults","onPageChange","p","LSTNumberSetter","from","thecallcount","locstr","year","callnumber","thegetter","pages","limit","total","updateInventory","MakeCMRR","length","invIds","map","item","push","newhistory","histtype","callId","assetId","status","note","id","update","$push","history","lst","to","invItems","vendorId","vendorName","CMRRItems","className","class","value","onChange","e","target","default","selected","xmlns","viewBox","d","disabled","layout","onClick","placeholder","user","i","key","temp","filter","x","t","defaultValue","invList","fill","aria-hidden","onSubmit","preventDefault","stocktype","expirydate","added","initList","resultsPerPage","label","isOpen","onClose","num","newitem","newlist","toLowerCase","wty","add","aria-label","aria-haspopup","CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","customerName","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/26.aedc5a0b.chunk.js","sourcesContent":["exports.capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, Remove } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Input,\n  HelperText,\n  Label,\n  Select,\n  Card,\n  CardBody\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\nimport { CloseIcon } from \"../../icons\";\n\nfunction LST() {\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [LSTtype, setLSTtype] = useState(\"Normal\");\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  const [date, setDate] = useState(moment().format());\n  const [condition, setCondition] = useState(\"Available\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  //vendors\n  const [isVendorModalopen, setIsVendorModalopen] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const defVendor={\n    _id: \"\",\n    name: \"\",\n    aadharNo: \"\",\n    PANNo: \"\",\n    GSTNo: \"\",\n  }\n  const [selectedVendor, setselectedVendor] = useState(defVendor);\n\n  const [isVendor, setIsVendor] = useState(false);\n  // CMRR\n\n  const CMRRinvdetails = {\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    invnumber: \"\",\n    location: \"\",\n    //-------\n    caseId: \"imprest\",\n  };\n  const [CMRRvalues, setCMRRValues] = useState([CMRRinvdetails]);\n\n\n\n  async function getVendorList() {\n    let payload = {\n      filters: {\n        searchquery: \"\",\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/vendor/${Emp.getId()}/getAll`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setVendors(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n  useEffect(() => {\n    getVendorList();\n  }, []);\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // LST NUM\n  const LSTNumberSetter = async (date, from) => {\n    console.log(date, from);\n    if (from == \"\" || date == \"\") return;\n    let payload = {\n      from: from,\n      date: date,\n    };\n    let thecallcount = 0;\n    try {\n      thecallcount = await axios({\n        url: `${API}/lst/${Emp.getId()}/lstbydate`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    let locstr;\n    from == \"Trivandrum\"\n      ? (locstr = \"TVM\")\n      : from == \"Kottayam\"\n      ? (locstr = \"KTM\")\n      : (locstr = \"CLT\");\n\n    let year = moment(date).format(\"YY\");\n    let month = moment(date).format(\"MM\");\n    let day = moment(date).format(\"DD\");\n    let callnumber = thecallcount.data + 1;\n    if (callnumber < 10) {\n      callnumber = \"00\" + callnumber;\n    } else if (callnumber < 100) {\n      callnumber = \"0\" + callnumber;\n    }\n    console.log(thecallcount.data);\n\n    let thestring = \"ICS\" + locstr + year + callnumber;\n    setLSTNo(thestring);\n    // setValues({ ...values, callNo: thestring, date: date });\n    // // ------history management\n    // let temp = callhistory;\n    // temp[0].date = date;\n    // setCallHistory(temp);\n\n    // console.log(thestring);\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  //   useEffect(() => {\n  //     setBBarOpen(1);\n  //     return () => {\n  //       setBBarOpen(0);\n  //       setAssetDetails({});\n  //     };\n  //   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory = async () => {\n    if(LSTtype==\"CMRR\"){\n      console.log(CMRRvalues)\n      MakeCMRR();\n    }\n    if (LSTNo == \"\") {\n      setModalMessage(\"LST Number necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (date == \"\") {\n      setModalMessage(\"Date Necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (location == toLocation) {\n      setModalMessage(\"From and to Location is same!\");\n      setMessageModal(true);\n      return;\n    }\n    if (location == \"\") {\n      setModalMessage(\"From location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (toLocation == \"\") {\n      setModalMessage(\"To location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (SelectedItems.length == 0) {\n      setModalMessage(\"No items selected\");\n      setMessageModal(true);\n      return;\n    }\n    let invIds = [];\n\n    SelectedItems.map(async (item) => {\n      invIds.push(item._id);\n      // ----history ---\n      let newhistory = {\n        histtype: \"lst\",\n        date: date,\n        location: \"In Transit\",\n        callId: \"Nil\",\n        assetId: \"Nil\",\n        status: item.condition,\n        note: `Item sent from ${location} to ${toLocation}`,\n      };\n      const data = {\n        id: item._id,\n        update: {\n          location: \"In Transit\",\n          caseId: item.caseId,\n          $push: { history: newhistory },\n        },\n      };\n      console.log(\"PAYLOAD\", data);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: data,\n        });\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    });\n\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: invIds,\n      status: \"In Transit\",\n      LSTtype:LSTtype\n    };\n    if (selectedVendor._id != \"\") {\n      console.log(\"here\");\n      lst.vendorId = selectedVendor._id;\n      lst.vendorName = selectedVendor.name;\n    }\n    console.log(\"LST\", lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\")\n      setDate(\"\")\n      setselectedVendor(defVendor)\n      // setData([]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const MakeCMRR = async ()=>{\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: [],\n      status: \"In Transit\",\n      LSTtype:LSTtype,\n      CMRRItems:CMRRvalues\n    };\n   \n    console.log(\"LST\", lst);\n     try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\")\n      setDate(\"\")\n      setselectedVendor(defVendor)\n      // setData([]);\n      setCMRRValues([CMRRinvdetails])\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n\n  }\n\n  const VendorModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isVendorModalopen}\n          onClose={() => setIsVendorModalopen(false)}\n        >\n          <ModalHeader>Pink Vendor</ModalHeader>\n          <ModalBody>\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Customer</TableCell>\n                    {/* <TableCell>Unit</TableCell> */}\n                    {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n                  </tr>\n                </TableHeader>\n                <TableBody>\n                  {vendors.map((user, i) => (\n                    <TableRow\n                      key={i}\n                      className=\"hover:bg-purple-900 \"\n                      onClick={() => {\n                        console.log(user);\n                        setselectedVendor(user);\n                        setIsVendorModalopen(false);\n                      }}\n                    >\n                      <TableCell>\n                        <div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsVendorModalopen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const invTable = () => {\n    return (\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"mouse\">Mouse</option>\n                <option value=\"keyboard\">Keyboard</option>\n                <option value=\"monitor\">Monitor</option>\n                <option value=\"cpu\">Cpu</option>\n                <option value=\"ram\">Ram</option>\n                <option value=\"fan\">Fan</option>\n                <option value=\"motherboard\">Motherboard</option>\n                <option value=\"smps\">SMPS</option>\n                <option value=\"hdd\">HDD</option>\n                {/* <option value=\"SMPS\">SMPS</option> */}\n                <option value=\"gcard\">Gcard</option>\n                <option value=\"enetcard\">Enet Card</option>\n                <option value=\"serialcard\">Serial Card</option>\n                <option value=\"paralellcard\">Paralell Card</option>\n                <option value=\"opticaldrive\">Optical Drive</option>\n                <option value=\"others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n                <option value=\"Used\">Used</option>\n                <option value=\"Available\" selected>\n                  Available\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"Damaged\">Damaged</option>\n                <option value=\"DOA\">DOA</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Category</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Stock Type</TableCell>\n                <TableCell>Wty.</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Add</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{capitalize(user.type)}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.stocktype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.expirydate}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      layout=\"outline\"\n                      className=\"dark:border-green-700 border-green-400\"\n                      onClick={() => {\n                        let added = false;\n                        let initList = data;\n                        initList = initList.filter((i) => i._id != user._id);\n                        console.log(initList);\n                        setData(initList);\n                        SelectedItems.map((i) => {\n                          if (i._id == user._id) {\n                            console.log(i._id, user._id);\n                            setModalMessage(\"Product already Added!\");\n                            setMessageModal(true);\n                            added = true;\n                          }\n                        });\n                        if (added) return;\n                        user.caseId = \"imprest\";\n                        let temp = [...SelectedItems, user];\n                        setSelectedItems(temp);\n                        // setShowInvTable(false);\n                        // setModalMessage(\"Product  Added!\");\n                        // setMessageModal(true);\n                      }}\n                    >\n                      Add\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n    );\n  };\n\n  const SelectedInv = () => {\n    return (\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            {selectedVendor.name!==\"\"?(<> Vendor:{selectedVendor.name}</>):null}\n          </div>\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            Selected Items\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Case Id</TableCell>\n                <TableCell>Remove</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  <TableCell>\n                    <input\n                      value={user.caseId}\n                      onChange={(e) => {\n                        let temp = SelectedItems;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != user._id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.caseId = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setSelectedItems(temp);\n                      }}\n                      defaultValue=\"Imprest\"\n                      placeholder=\"Cse Id.\"\n                      class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                    />\n                  </TableCell>\n\n                  <TableCell>\n                    <div\n                      className=\" py-1\"\n                      onClick={() => {\n                        let invList = [...data, user];\n                        setData(invList);\n                        let temp = SelectedItems;\n                        temp = temp.filter((i) => i._id != user._id);\n\n                        setSelectedItems(temp);\n                      }}\n                    >\n                      <TrashIcon\n                        className=\"w-5 h-5 cursor-pointer m-2 text-2xl\"\n                        fill=\"maroon\"\n                        aria-hidden=\"true\"\n                      />\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const CMRRMenu = (num) => {\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span>{\" \"}\n          <div\n            layout=\"outline\"\n            onClick={() => {\n              let newitem = [...CMRRvalues];\n              newitem = newitem.filter((item, i) => {\n                if (i != num) return item;\n              });\n              setCMRRValues(newitem);\n            }}\n            className=\"border-gray-100 rounded-full cursor pointer\"\n          >\n            <CloseIcon\n              fill=\"lightgray\"\n              className=\"w-5 h-5 cursor-pointer \"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          \n         \n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value.toLowerCase();\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"mouse\">Mouse</option>\n                  <option value=\"keyboard\">Keyboard</option>\n                  <option value=\"monitor\">Monitor</option>\n                  <option value=\"cpu\">Cpu</option>\n                  <option value=\"ram\">Ram</option>\n                  <option value=\"fan\">Fan</option>\n                  <option value=\"motherboard\">Motherboard</option>\n                  <option value=\"smps\">SMPS</option>\n                  <option value=\"hdd\">HDD</option>\n                  <option value=\"gcard\">Gcard</option>\n                  <option value=\"enetcard\">Enet Card</option>\n                  <option value=\"serialcard\">Serial Card</option>\n                  <option value=\"paralellcard\">Paralell Card</option>\n                  <option value=\"opticaldrive\">Optical Drive</option>\n                  <option value=\"others\">Others</option>\n\n               \n                </Select>\n              </Label>\n            </div>\n          \n\n            <>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Product Name*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    value={CMRRvalues[num].name}\n                    onChange={(e) => {\n                      let newlist = [...CMRRvalues];\n                      newlist[num].name = e.target.value;\n                      setCMRRValues(newlist);\n                    }}\n                  />\n                </Label>\n            \n              </div>\n            </>\n         \n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].sno}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].sno = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].condition = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"DOA\">DOA</option>\n                <option value=\"Damaged\">Damaged</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          \n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].wty}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].wty = e.target.value;\n                  setCMRRValues(newlist);\n                 \n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"0D\">0 days</option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Years</option>\n                <option value=\"3Y\">3 Years</option>\n                <option value=\"4Y\">4 Years</option>\n                <option value=\"5Y\">5 Years</option>\n                <option value=\"20Y\">20 Years</option>\n              </Select>\n            </Label>\n          </div>\n\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Case ID*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].caseId}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].caseId = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n\n\n        </div>\n        \n      </div>\n    );\n  };\n\n  const CMRRBottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap justify-start\">\n            <Button\n              onClick={() => {\n                let newitem = [...CMRRvalues];\n                let add = CMRRinvdetails;\n                newitem.push(add);\n                setCMRRValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Item\n            </Button>\n\n          \n\n           \n\n            \n          \n          </div>\n        </CardBody>\n      </Card>\n    );\n  }\n \n\n  return (\n    <>\n      <div className=\" mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n        <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \"> Type</div>\n            {/* -----------------------------------------CMRR ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={LSTtype}\n                onChange={(e) => {\n                  setLSTtype(e.target.value);\n                }}\n              >\n                \n                {/* <option value=\"\">All</option> */}\n                <option value=\"Normal\" default selected>Normal</option>\n                <option value=\"CMRR\">CMRR</option>\n              \n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \">From</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                  LSTNumberSetter(date, e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1 \">To</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n            {LSTtype==\"Normal\"?(<>\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={toLocation}\n                onChange={(e) => {\n                  setToLocation(e.target.value);\n                  setselectedVendor(defVendor)\n                  if (e.target.value == \"Vendor\") {\n                    setIsVendor(true);\n                  } else setIsVendor(false);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n                <option value=\"Vendor\">Vendor</option>\n              </select>\n              </>):(<>\n                \n                <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={toLocation}\n                onChange={(e) => {\n                  setToLocation(e.target.value);\n                  setselectedVendor(defVendor)\n                  if (e.target.value == \"Vendor\") {\n                    setIsVendor(true);\n                  } else setIsVendor(false);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              \n              </select>\n\n\n              </>)}\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n          {isVendor ? (\n            <div className=\"mx-1\">\n              <Button\n                layout=\"outline\"\n                className=\"w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </div>\n          ) : null}\n\n          {/* -----------------------------------------Location ----------------------- */}\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" my-2 \">Date</div>\n            <div class=\"relative mx-1 \">\n              <input\n                type=\"date\"\n                value={date}\n                onChange={(e) => {\n                  setDate(e.target.value);\n                  LSTNumberSetter(e.target.value, location);\n                }}\n                placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          <div className=\" flex flex-row dark:text-white  \">\n            <div className=\" mx-1 my-1 \">LST No.</div>\n            <div class=\"relative mx-1 \">\n              <input\n                value={LSTNo}\n                disabled\n                onChange={(e) => setLSTNo(e.target.value)}\n                // placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          {/* //submitCustomer */}\n\n          <div className=\"flex flex-row dark:text-white mx-5 \">\n            <Button onClick={updateInventory}>Submit</Button>\n          </div>\n        </div>\n        {LSTtype==\"Normal\"?(<>\n        {SelectedInv()}\n        <div className=\"my-5\">\n          <Button\n            onClick={() => {\n              if (location == \"\" || toLocation == \"\") {\n                setModalMessage(\"Select From and To Locations\");\n                setMessageModal(true);\n                return;\n              }\n              setShowInvTable(true);\n            }}\n          >\n            Add Product from Inventory\n          </Button>\n        </div>\n        {showInvTable ? invTable() : null}\n        </>):null}\n      </div>\n\n      {messageModalComponent()}\n      {VendorModal()}\n      {LSTtype==\"CMRR\"?(<>\n      {CMRRvalues.map((item, i) => {\n        return CMRRMenu(i);\n      })}\n      {CMRRBottomCard()}\n      </>):null}\n      \n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}