{"version":3,"sources":["pages/Inventory/ScrapSoldPage.js","components/Modal/UnitListModal.js"],"names":["ScrapSoldPage","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","TopBarContext","setTopHeading","topheading","page","data","setData","successModal","setSuccessModal","refresh","setRefresh","Business","product","_id","unitName","customerName","accountName","totalResults","setTotalResults","isDwnldModalOpen","setIsDwnldModalOpen","selectedids","setSelectedIds","invoiceNum","setInvoiceNum","saledate","setSaledate","grossvalue","setGrossvalue","gstperc","setGstperc","netvalue","setNetvalue","invsearch","setInvSearch","addedinv","setAddedInv","useEffect","temp","parseFloat","toFixed","useMemo","a","console","log","payload","pages","limit","filters","type","location","condition","searchtype","searchquery","axios","url","API","Emp","getId","method","response","out","total","handleUpdate","alert","length","scrapsaledate","isOpen","onClose","className","layout","onClick","value","onChange","e","target","name","readOnly","map","item","i","key","capitalize","sno","onSubmit","preventDefault","placeholder","filter","user","UnitListModal","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/52.2be44e06.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n\nimport {\n  MenuIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n  CloseIcon,\n} from \"../../icons\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Label,\n  Input,\n  Select,\n} from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  Button,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nfunction ScrapSoldPage() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [successModal, setSuccessModal] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  // search\n\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // pagination setup\n  const resultsPerPage = 5;\n  const [totalResults, setTotalResults] = useState(20);\n\n  //download\n  const [isDwnldModalOpen, setIsDwnldModalOpen] = useState(false);\n\n  //selected array\n\n  const [selectedids, setSelectedIds] = useState([]);\n\n  // final dates\n  const [invoiceNum, setInvoiceNum] = useState(\"\");\n  const [saledate, setSaledate] = useState(\"\");\n  const [grossvalue, setGrossvalue] = useState(\"\");\n  const [gstperc, setGstperc] = useState(\"\");\n  const [netvalue, setNetvalue] = useState(\"\");\n\n  const [invsearch, setInvSearch] = useState(\"\");\n  const [addedinv, setAddedInv] = useState([]);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Sell Scrap\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n\n  useEffect(() => {\n    let temp = (parseFloat(gstperc) * 0.01 + 1) * parseFloat(grossvalue);\n    setNetvalue(temp.toFixed(2));\n    return () => {};\n  }, [gstperc, grossvalue]);\n  // -----------------------------------------------------\n\n  useMemo(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          type: \"\",\n          location: \"\",\n          condition: \"Scrap\",\n          searchtype: \"\",\n          searchquery: invsearch,\n          //   stocktype: stockType,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/inventory/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(location, \"LOCATION!!!\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n\n      console.log(\"totalResults\", totalResults);\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, invsearch, Business, product, refresh]);\n\n  //   useEffect(() => {\n  //     console.log(selectedids);\n  //     console.log(addedinv);\n  //     console.log(data);\n\n  //     return () => {};\n  //   }, [selectedids]);\n\n  const handleUpdate = async () => {\n    console.log(selectedids);\n    if (\n      invoiceNum == \"\" ||\n      saledate == \"\" ||\n      grossvalue == \"\" ||\n      gstperc == \"\"\n    ) {\n      alert(\"Fill Compulsory Fields\");\n      return;\n    }\n    if (selectedids.length == 0) {\n      alert(\"No inventory selected\");\n      return;\n    }\n\n    let payload = {\n      selectedids: selectedids,\n      invoiceNum: invoiceNum,\n      scrapsaledate: saledate,\n      grossvalue: grossvalue,\n      gstperc: gstperc,\n      netvalue: netvalue,\n    };\n    // console.log(\"payload\", payload);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/invscrapsale`,\n        method: \"POST\",\n        data: payload,\n      });\n      setInvoiceNum(\"\");\n      setSaledate(\"\");\n      setGrossvalue(\"\");\n      setGstperc(\"\");\n      setNetvalue(\"\");\n      setInvSearch(\"\");\n      setAddedInv([]);\n      setSelectedIds([]);\n      setSuccessModal(true);\n      setRefresh(!refresh);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const UpdateModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isDwnldModalOpen}\n          onClose={() => setIsDwnldModalOpen(false)}\n          className=\" dark:bg-gray-800 p-5  mx-10  bg-gray-50 text-gray-900 dark:text-white text-center  rounded-lg \"\n        >\n          <ModalHeader className=\" w-87\">\n            <div className=\"text-lg\">\n              Are you sure you want to sell all the selected inventory ?\n            </div>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\" space-x-1\">\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  setIsDwnldModalOpen(false);\n                  handleUpdate();\n                }}\n              >\n                Yes\n              </Button>\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  setIsDwnldModalOpen(false);\n                  //   handleUpdate();\n                }}\n              >\n                No\n              </Button>\n            </div>\n          </ModalBody>\n          {/* <ModalFooter></ModalFooter> */}\n        </Modal>\n      </>\n    );\n  };\n\n  const SucessModal = () => {\n    return (\n      <>\n        <Modal isOpen={successModal} onClose={() => setSuccessModal(true)}>\n          <ModalHeader>Inventory Updated Successfully</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setSuccessModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n  return (\n    <>\n      {/* ---------------------Modals----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      {UpdateModal()}\n      {SucessModal()}\n\n      <div className=\"mb-64 mt-4\">\n        <div className=\"flex flex-row mb-2\">\n          <div className=\"w-3/4 text-lg font-semibold dark:text-white\">\n            Scrap Sale Information\n          </div>\n          <div className=\"w-1/4 flex justify-end \">\n            <Button\n              onClick={() => {\n                // handleUpdate();\n                setIsDwnldModalOpen(true);\n              }}\n            >\n              Sell Scrap\n            </Button>\n          </div>\n        </div>\n\n        <hr className=\"my-2\"></hr>\n\n        <div className=\"flex flex-col lg:flex-row  items-center justify-start lg:space-x-8\">\n          <Label className=\"w-full \">\n            <span>Invoice Number*</span>\n            <Input\n              className=\"mt-1\"\n              type=\"text\"\n              value={invoiceNum}\n              onChange={(e) => {\n                setInvoiceNum(e.target.value);\n              }}\n            />\n          </Label>\n\n          <Label className=\"w-full\">\n            <span>Date*</span>\n            <Input\n              className=\"mt-1\"\n              type=\"date\"\n              value={saledate}\n              onChange={(e) => {\n                setSaledate(e.target.value);\n              }}\n            />\n          </Label>\n          <Label className=\"w-full my-3\">\n            <span>Gross Value*</span>\n            <Input\n              className=\"mt-1\"\n              type=\"text\"\n              value={grossvalue}\n              onChange={(e) => {\n                setGrossvalue(e.target.value);\n              }}\n            />\n          </Label>\n          <Label className=\"w-full my-3\">\n            <span>GST %*</span>\n            <Input\n              type=\"text\"\n              className=\"mt-1\"\n              name=\"brand\"\n              value={gstperc}\n              onChange={(e) => {\n                setGstperc(e.target.value);\n              }}\n            />\n          </Label>\n        </div>\n        <div className=\"flex flex-col lg:flex-row  items-center justify-start lg:space-x-8\">\n          <Label className=\"w-full \">\n            <span>Net Value</span>\n            <Input\n              className=\"mt-1\"\n              type=\"text\"\n              readOnly={true}\n              value={netvalue}\n            />\n          </Label>\n        </div>\n        {/* -------selected inventory table----------- */}\n\n        <TableContainer className=\"mt-4\">\n          <div className=\"dark:text-gray-200 text-black text-sm flex space-x-2 items-center bg-gray-100 dark:bg-gray-800 p-2 rounded-md justify-start  w-full my-2 font-bold\">\n            Selected Items\n          </div>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableCell>Sl No</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Model</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Condition</TableCell>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {addedinv.map((item, i) => (\n                <TableRow\n                  key={i}\n                  className={`hover:shadow-lg hover:bg-blue-200 dark:hover:bg-gray-600`}\n                >\n                  <TableCell>\n                    <span className=\"text-sm\">{i + 1}</span>\n                  </TableCell>\n\n                  <TableCell className=\"\">\n                    <div>\n                      <p className=\"font-semibold\">{capitalize(item.type)}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{item.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{item.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{item.condition}</span>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            label=\"Table navigation\"\n            onChange={onPageChange}\n          />\n        </TableFooter> */}\n        </TableContainer>\n\n        <div className=\" text-lg font-semibold mt-4 \">Inventory Picker</div>\n\n        {/* ----------------------------------------------Filters----------------------------------------------------- */}\n        <div className=\" w-full mt-2 rounded-lg bg-gray-200 dark:bg-gray-700 p-3 overflow-y-auto\">\n          <form\n            // onSubmit={handlevendorSubmit}\n            onSubmit={(e) => {\n              e.preventDefault();\n            }}\n          >\n            <input\n              className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n              placeholder=\"Enter Serial Number \"\n              value={invsearch}\n              onChange={(e) => {\n                setInvSearch(e.target.value);\n              }}\n            />\n          </form>\n\n          <div className=\" mt-4\">\n            {/* ----------------------------------------------Table----------------------------------------------------- */}\n            <TableContainer className=\"mt-4\">\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Type</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Serial Number</TableCell>\n                    <TableCell>Select</TableCell>\n                  </tr>\n                </TableHeader>\n                <TableBody className=\"\">\n                  {data\n                    .filter((user) => {\n                      for (let i = 0; i < selectedids.length; i++) {\n                        if (user._id == selectedids[i]) return 0;\n                      }\n                      return 1;\n                    })\n                    .map((user, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600  `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowID(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            {/* <Avatar\n                          className=\"hidden ml-2 mr-3 md:block\"\n                          src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                          alt=\"User image\"\n                        /> */}\n                            <div>\n                              <p className=\"font-semibold\">\n                                {capitalize(user.type)}\n                              </p>\n                              {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                            {user.accountName}\n                          </p> */}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"\">\n                          {/* later add celltextoverflow class */}\n                          <div className=\" overflow-auto text-sm\">\n                            {user.name}\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <div className=\"w-64 overflow-auto text-sm\">\n                            {user.sno}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {user.sno != \"\" ? (\n                            <Button\n                              layout=\"outline\"\n                              className=\"dark:border-green-700 border-green-400\"\n                              onClick={() => {\n                                setAddedInv([...addedinv, user]);\n                                setSelectedIds([...selectedids, user._id]);\n                              }}\n                            >\n                              Select\n                            </Button>\n                          ) : null}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n\n            {/* ----------------------------------------------Table----------------------------------------------------- */}\n          </div>\n        </div>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default ScrapSoldPage;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}