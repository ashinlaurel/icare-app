{"version":3,"sources":["pages/Notifications/Notifications.js","components/Modal/AssetFilters/CustomerSelection.js"],"names":["Notifications","useState","activerowid","setActiveRowId","useContext","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","refresh","setRefresh","status","location","setLocation","ToLocation","setToLocation","condition","setCondition","selectedprod","searchquery","setSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","messageModal","setMessageModal","modalMessage","setModalMessage","useEffect","loc","EmpProfile","getLocation","a","console","log","payload","pages","limit","filters","from","to","axios","url","API","Emp","getId","method","response","out","total","updateInventory","i","j","items","lstItem","invItem","invItems","update","id","_id","flag","map","item","name","updatelst","className","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","onClick","user","key","LSTNo","moment","date","format","length","layout","aria-label","size","aria-hidden","num","type","sno","invnumber","resultsPerPage","label","p","isOpen","onClose","CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","customerName","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/43.045de094.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n// import { Page, Text, View, Document, StyleSheet,PDFDownloadLink } from '@react-pdf/renderer';\n// import ReactPDF from '@react-pdf/renderer';\n// import { PDFViewer } from '@react-pdf/renderer';\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\n// import PrintLST from \"./PrintLST\";\n\nfunction Notifications() {\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [status, setstatus] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Notifications\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    let loc = EmpProfile.getLocation();\n    // console.log(\"Location\",loc);\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          // type: type,\n          from: location,\n          to: ToLocation,\n          status: \"In Transit\",\n          // searchtype: searchtype,\n          searchquery: searchquery,\n        },\n      };\n      if (loc != \"All\") payload.filters.to = loc;\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/lst/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation, condition, status, refresh]);\n\n  console.log(selectedprod);\n\n  const updateInventory = async (i, j) => {\n    let items = data;\n    let lstItem = data[i];\n    let invItem = lstItem.invItems[j];\n    console.log(lstItem, invItem);\n\n    const update = {\n      id: invItem._id,\n      update: {\n        location: lstItem.to,\n      },\n    };\n    console.log(\"PAYLOAD\", update);\n    try {\n      await axios({\n        url: `${API}/inventory/${Emp.getId()}/invupdate`,\n        method: \"POST\",\n        data: update,\n      });\n      items[i].invItems[j].location = lstItem.to;\n      setData(items);\n      setActiveRowID(-1);\n      setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n    let flag = false;\n    items[i].invItems.map((item) => {\n      if (item.location == \"In Transit\") flag = true;\n    });\n\n    if (flag == true) {\n      setModalMessage(`${invItem.name} Recieved`);\n      setMessageModal(true);\n      return;\n    }\n    const updatelst = {\n      id: lstItem._id,\n      update: {\n        status: \"Received\",\n      },\n    };\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: updatelst,\n      });\n      // items[i].invItems[j].location=lstItem.to;\n      // setData(items);\n      // setActiveRowID(-1);\n      // setActiveRowID(i);\n      // setIsReviewModalOpen(true);\n      setModalMessage(\n        `${invItem.name} Recieved.\\n All Items Received from LST`\n      );\n      setMessageModal(true);\n      console.log(\"Done\");\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const InvTable = (items, num) => {\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3\">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Type</TableCell>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Inv Number</TableCell>\n                  <TableCell>Condition</TableCell>\n                  <TableCell>Recieve</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {items.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].kbdname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                        <div>\n                          <p className=\"font-semibold\">{user.type}</p>\n                          {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">{user.sno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge\n                        type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                      >\n                        {user.condition}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        layout=\"outline\"\n                        className=\"dark:border-green-700 border-green-400\"\n                        onClick={() => {\n                          if (user.location == \"In Transit\")\n                            updateInventory(num, i);\n                          else {\n                            setModalMessage(\"Already Recieved\");\n                            setMessageModal(true);\n                          }\n                        }}\n                      >\n                        {user.location == \"In Transit\" ? (\n                          <>Receive</>\n                        ) : (\n                          <>Received</>\n                        )}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        <div className=\" font-bold text-xl mt-10 dark:text-white\">\n          LSTs In Transit\n        </div>\n\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  From Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayum\">Kottayum</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            {EmpProfile.getLocation == \"All\" ? (\n              <>\n                <div class=\"relative mx-1 \">\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={ToLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      To Location\n                    </option>\n                    <option value=\"\">All</option>\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayum\">Kottayum</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                  </select>\n\n                  <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                    <svg\n                      class=\"fill-current h-4 w-4\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 20 20\"\n                    >\n                      <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                    </svg>\n                  </div>\n                </div>\n              </>\n            ) : null}\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search LST Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr className=\"flex flex-row justify-between\">\n                <TableCell>LST.No</TableCell>\n                <TableCell>From</TableCell>\n                <TableCell>To</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>No.</TableCell>\n                {/* <TableCell>Status</TableCell> */}\n                <TableCell> Report</TableCell>\n                <TableCell>\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => setActiveRowID(-1)}\n                  >\n                    Items\n                  </span>\n                </TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <div className=\"flex flex-col justify-around\">\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                      activerowid == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(i);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].kbdname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.LSTNo}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.from}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">{user.to}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {\" \"}\n                        {moment(user.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invItems.length}</span>\n                    </TableCell>\n                    {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n                    <TableCell className=\"text-center \">\n                      <Button\n                        layout=\"outline\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(\"dwlod\");\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        Download\n                      </Button>\n                    </TableCell>\n                    <TableCell className=\"text-center \">\n                      <Button\n                        // layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"DropDown\"\n                        onClick={() => {\n                          console.log(activerowid);\n                          // if(activerowid==i){\n\n                          // setActiveRowID(-1);\n                          // }\n                          // else\n                          setActiveRowID(i);\n                        }}\n                        className=\"rounded-lg m-1\"\n                      >\n                        <DropdownIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n\n                  {activeRowID == i ? InvTable(user.invItems, i) : null}\n                </div>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default Notifications;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}