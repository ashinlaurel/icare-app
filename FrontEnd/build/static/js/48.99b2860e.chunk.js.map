{"version":3,"sources":["pages/Calls/ViewCalls.js","components/Modal/AssetFilters/CustomerSelection.js","../../src/FileSaver.js"],"names":["ViewCalls","useState","isReviewModalOpen","setIsReviewModalOpen","historyModalOpen","setHistoryModalOpen","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","viewId","setViewId","isOpen","setIsOpen","isModalOpen","setIsModalOpen","refresh","setRefresh","callStatus","setCallStatus","callType","setCallType","fromDate","setFromDate","toDate","setToDate","Business","setBusiness","product","setProduct","_id","unitName","unit","setUnit","customerName","customer","setCustomer","accountName","account","setAccount","enggName","setSelectedProd","searchquery","setSearchQuery","isHistoryImgViewModal","setIsHistoryImgViewModal","goodSpareHistoryImg","setGoodSpareHistoryImg","defectiveHistoryImg","setDefectiveHistoryImg","ccfrHistoryImg","setCcfrHistoryImg","isDwnldModalOpen","setIsDwnldModalOpen","totalResults","setTotalResults","getCallStatusString","num","downloadAssets","a","csv","payload","pages","limit","filters","axios","url","API","Emp","getId","method","response","array","out","console","log","map","call","i","historylast","history","length","callNo","moment","date","format","time","phone","assetId","producttype","serialno","problem","employeeName","actionTaken","csvData","Blob","type","saveAs","useEffect","business","unitId","customerId","accountId","total","ReviewSubmit","onClose","className","onClick","item","entry","key","capitalize","engineer","callAttendDate","startOfService","endOfService","note","layout","newUrl","existUrl","ccfrImgUrl","HistoryModal","href","target","src","width","height","class","value","onChange","e","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","aria-label","aria-haspopup","filter","to","regtimestamp","employeeId","size","aria-hidden","resultsPerPage","label","p","CustomerSelection","theunitdetails","setTheUnitDetails","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","name","Axios","post","accs","pickAccount","u","pickUnit","contactPerson","contactNo","selectedIndex","onSelect","ind","status","MouseEvent","document","window","self","global","test","navigator","HTMLAnchorElement","b","location","setTimeout","f","autoBom","open","module"],"mappings":"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","file":"static/js/48.99b2860e.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n  MenuIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Label,\n  Select,\n  Pagination,\n  Dropdown,\n  Input,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\n// import EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\nimport { saveAs } from \"file-saver\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\n\nfunction ViewCalls() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [isSetStatusModal, setisSetStatusModal] = useState(false);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [historyModalOpen, setHistoryModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [viewId, setViewId] = useState(\"\");\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n  const [callStatus, setCallStatus] = useState(\"\");\n  const [callType, setCallType] = useState(\"\");\n  const [fromDate, setFromDate] = useState(\"\");\n  const [toDate, setToDate] = useState(\"\");\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Image States\n  const [isHistoryImgViewModal, setIsHistoryImgViewModal] = useState(false);\n  const [goodSpareHistoryImg, setGoodSpareHistoryImg] = useState(\"\");\n  const [defectiveHistoryImg, setDefectiveHistoryImg] = useState(\"\");\n  const [ccfrHistoryImg, setCcfrHistoryImg] = useState(\"\");\n\n  //download\n  const [isDwnldModalOpen, setIsDwnldModalOpen] = useState(false);\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const HistoryImgViewModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isHistoryImgViewModal}\n          onClose={() => {\n            setDefectiveHistoryImg(\"\");\n            setGoodSpareHistoryImg(\"\");\n            setCcfrHistoryImg(\"\");\n            setIsHistoryImgViewModal(false);\n          }}\n          className=\"w-9/12 dark:bg-gray-800 px-5 my-10 bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          // className=\"w-6/12 h-8/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll text-cente items-center justify-center\"\n        >\n          <ModalHeader>Images</ModalHeader>\n          <ModalBody>\n            <div className=\"flex flex-col justify-center \">\n              <hr></hr>\n              <div className=\"flex flex-row justify-evenly flex-wrap items-center \">\n                {defectiveHistoryImg != \"\" ? (\n                  <div>\n                    <div\n                      onClick={() => {\n                        console.log(defectiveHistoryImg);\n                      }}\n                      className=\"text-lg font-semibold my-2 w-full\"\n                    >\n                      Replaced Item\n                    </div>\n\n                    <a href={defectiveHistoryImg} target=\"_blank\">\n                      {/* <figure\n                      onMouseMove={handleMouseMove}\n                      style={{\n                        backgroundImage: `url(${defectiveHistoryImg})`,\n                        backgroundPosition: `${defectiveHistoryImgPos}`,\n                      }}\n                    >\n                      <img src={defectiveHistoryImg} width=\"350\" height=\"350\" />\n                    </figure> */}\n                      <img\n                        src={defectiveHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {goodSpareHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      Replaced by\n                    </div>\n                    <a href={goodSpareHistoryImg} target=\"_blank\">\n                      <img\n                        src={goodSpareHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {ccfrHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      CCFR\n                    </div>\n                    <a href={ccfrHistoryImg} target=\"_blank\">\n                      <img\n                        src={ccfrHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            {/* <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setDefectiveHistoryImg(\"\");\n                setGoodSpareHistoryImg(\"\");\n                setCcfrHistoryImg(\"\");\n                setIsHistoryImgViewModal(false);\n              }}\n            >\n              Okay!\n            </Button> */}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const getCallStatusString = (num) => {\n    let finalstatus = \"\";\n    switch (num) {\n      case 0:\n        return \"Pending For Allocation\";\n        break;\n      case 1:\n        return \"Pending for Percall Approval\";\n        break;\n      case 2:\n        return \"Pending for Response\";\n        break;\n      case 3:\n        return \"Pending for OEM Response\";\n        break;\n      case 4:\n        return \"Pending for 2nd Response\";\n        break;\n      case 5:\n        return \"Pending for Customer\";\n        break;\n      case 6:\n        return \"Under Observation\";\n        break;\n      case 7:\n        return \"Pending for Others\";\n        break;\n      case 8:\n        return \"Pending for Spare\";\n        break;\n      case 9:\n        return \"Spare in Transit\";\n        break;\n      case 10:\n        return \"Cancelled Calls\";\n        break;\n      case 11:\n        return \"Closed Calls\";\n        break;\n      case 12:\n        return \"Spare Taken CMRR\";\n        break;\n      case 13:\n        return \"Pending For Spare Collection\";\n        break;\n      case 14:\n        return \"Standby Given\";\n        break;\n      case 15:\n        return \"Pending For Verification\";\n        break;\n\n      default:\n        return \"Status Number Unknown\";\n        break;\n    }\n  };\n\n  const DwnldModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isDwnldModalOpen}\n          onClose={() => setIsDwnldModalOpen(false)}\n          className=\" sdark:bg-gray-800 p-5 my-6 mx-10 px-5  bg-gray-50 text-gray-900 dark:text-white text-center  rounded-lg \"\n        >\n          <ModalHeader className=\"flex flex-row justify-between text-xl mx-10 px-10\">\n            <div className=\"text-lg\">Download Call Data?</div>\n          </ModalHeader>\n          <ModalBody>\n            <Button\n              layout=\"outline\"\n              onClick={() => {\n                downloadAssets();\n              }}\n            >\n              Download\n            </Button>\n          </ModalBody>\n          {/* <ModalFooter></ModalFooter> */}\n        </Modal>\n      </>\n    );\n  };\n\n  const downloadAssets = async () => {\n    let csv = `SlNo,CallNo,Date,Time,Unit,Phone,Product,SerialNumber,Problem,CallStatus,Engineer,Action Taken\\n`;\n\n    let array;\n    let payload = {\n      pages: {\n        page: page,\n        limit: 10000000,\n      },\n      filters: {\n        callType: callType,\n        callStatus: callStatus,\n        searchquery: searchquery,\n        fromDate: fromDate,\n        toDate: toDate,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/call/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n\n      array = response.data.out;\n    } catch (error) {\n      throw error;\n    }\n\n    console.log(\"download calls call\", array);\n    // let csv = `CallNo,Date,Time,Unit,Phone,Product,SerialNumber,Problem,CallStatus,Engineer\\n`;\n    array.map((call, i) => {\n      let historylast = call.history.length - 1;\n      csv =\n        csv +\n        `\"${i + 1}\",\"${call.callNo}\",\"${moment(call.date).format(\n          \"DD-MM-YYYY\"\n        )}\",\"${moment(`${\"2018-04-02\"}T${call.time}`).format(\"h:mm a\")}\",\"${\n          call.unitName\n        }\",\"${call.phone}\",\"${call.assetId.producttype}\",\"${\n          call.assetId.product.serialno\n        }\",\"${call.problem}\",\"${getCallStatusString(call.callStatus)}\",\"${\n          call.employeeName ? call.employeeName : \"Not Assigned\"\n        }\",\"${call.history[historylast].actionTaken}\"\\n`;\n    });\n    // console.log(csv); //product.\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    saveAs(csvData, \"CallsExport.csv\");\n  };\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"View Calls\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          callType: callType,\n          callStatus: callStatus,\n          searchquery: searchquery,\n          fromDate: fromDate,\n          toDate: toDate,\n          //new filters\n          business: Business,\n          producttype: product,\n          customer: customer,\n          account: account,\n          unitId: unit._id,\n          customerId: customer._id,\n          accountId: account._id,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n\n        console.log(response.data.out);\n\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, refresh, callStatus, searchquery, fromDate, toDate, callType]);\n\n  // console.log(selectedprod);\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>Updated Successfully!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryModal = () => {\n    if (data[viewId]) {\n      let item = data[viewId];\n      let history = data[viewId].history;\n      console.log(history);\n\n      return (\n        <>\n          <Modal\n            isOpen={historyModalOpen}\n            onClose={() => {\n              setBBarOpen(0);\n              setHistoryModalOpen(false);\n            }}\n            className=\"w-9/12  dark:bg-gray-800 p-10 my-3  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              {/* <div>{item.name}</div> */}\n              <div>Call No: {item.callNo}</div>\n            </ModalHeader>\n            <span>Phone: {item.phone}</span>\n            <ModalBody>\n              {/* <div className=\"font-semibold text-xl my-2\">Call History</div> */}\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4 max-h-xl overflow-scroll\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody className=\" max-h-64\">\n                    {history.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                          activerowid == entry._id\n                            ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                            : \"white\"\n                        } `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {entry.callStatus == 0 ? (\n                              <Badge>Pending For Allocation</Badge>\n                            ) : null}\n                            {entry.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {entry.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {entry.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {entry.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {entry.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {entry.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {entry.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {entry.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                            {entry.callStatus == 12 ? (\n                              <Badge>Spare Taken CMRR</Badge>\n                            ) : null}\n                            {entry.callStatus == 13 ? (\n                              <Badge>Pending For Spare Collection</Badge>\n                            ) : null}\n                            {entry.callStatus == 14 ? (\n                              <Badge>Standby Given</Badge>\n                            ) : null}\n                            {entry.callStatus == 15 ? (\n                              <Badge>Pending For Verification</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"flex flex-row max-w-sm\">\n                          <span className=\"w-full overflow-auto\">\n                            {entry.note}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      />\n      {/* <SetStatusModal /> */}\n      <ReviewSubmit />\n      {HistoryModal()}\n      {HistoryImgViewModal()}\n      {DwnldModal()}\n\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-3\">\n            <Label className=\"flex flex-col\">\n              <span>From Date</span>\n              <input\n                className=\"shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 p-2 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500 \"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n              />\n            </Label>\n            <Label className=\"flex flex-col\">\n              <span>To Date</span>\n              <input\n                className=\"shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 p-2  leading-tight focus:outline-none   focus:bg-white focus:border-gray-500 \"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n              />\n            </Label>\n\n            {/*---------- select filters  ---------------*/}\n            <div className=\"flex flex-row items-center justify-center mt-5\">\n              <div class=\"relative mx-1 \">\n                <select\n                  class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                  value={callType}\n                  onChange={(e) => {\n                    setCallType(e.target.value);\n                  }}\n                >\n                  <option value=\"\" disabled selected>\n                    Call Type\n                  </option>\n                  <option value=\"\">All</option>\n                  <option value=\"internal\">Internal</option>\n                  <option value=\"internalinv\">Internal Inv</option>\n                  <option value=\"external\">External</option>\n                </select>\n\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n              <div class=\"relative mx-1 \">\n                <select\n                  class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                  value={callStatus}\n                  onChange={(e) => {\n                    setCallStatus(e.target.value);\n                  }}\n                >\n                  <option value=\"\" disabled selected>\n                    Call Status\n                  </option>\n                  <option value=\"\">All (No Closed And Cancelled)</option>\n                  <option selected value=\"0\">\n                    Pending For Allocation\n                  </option>\n                  <option value=\"1\">Pending for Percall Approval</option>\n                  <option value=\"2\">Pending for Response</option>\n                  <option value=\"3\">Pending for OEM Response</option>\n                  <option value=\"4\">Pending for 2nd Response</option>\n                  <option value=\"5\">Pending for Customer</option>\n                  <option value=\"6\">Under Observation</option>\n                  <option value=\"7\">Pending for Others</option>\n                  <option value=\"8\">Pending for Spare</option>\n                  <option value=\"13\">Pending For Spare Collection</option>\n                  <option value=\"12\">Spare Taken CMRR</option>\n                  <option value=\"14\"> Standby Given</option>\n                  <option value=\"9\">Spare in Transit</option>\n                  <option value=\"10\">Cancelled Calls</option>\n                  <option value=\"15\">Pending For Verification</option>\n                  <option value=\"11\">Closed Calls</option>\n                  {/* <option value=\"-1\">Allocated</option> */}\n                </select>\n\n                <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                  <svg\n                    class=\"fill-current h-4 w-4\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 20 20\"\n                  >\n                    <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                  </svg>\n                </div>\n              </div>\n\n              {/* -----------------Search Bar------------------------------------ */}\n              <div class=\"block relative \">\n                <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                  <svg\n                    viewBox=\"0 0 24 24\"\n                    class=\"h-4 w-4 fill-current text-gray-500\"\n                  >\n                    <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                  </svg>\n                </span>\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                    setRefresh(!refresh);\n                  }}\n                >\n                  <input\n                    value={searchquery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    placeholder=\"Search by Call No.\"\n                    class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                  />\n                </form>\n              </div>\n\n              <div className=\"mx-4\">\n                <Button\n                  className=\"px-12 py-2\"\n                  layout=\"outline\"\n                  onClick={() => {\n                    setIsDwnldModalOpen(true);\n                  }}\n                >\n                  Export\n                </Button>\n              </div>\n            </div>\n          </div>\n          {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            <div class=\"relative  \">\n              <button\n                class=\" shadow-md appearance-none h-full rounded border block w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                onClick={() => {\n                  setIsModalOpen(!isModalOpen);\n                }}\n                // value={sortBy}\n                // onChange={onSortToggle}\n              >\n                Pick Customer\n              </button>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            <div class=\"relative mx-5 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={Business}\n                onChange={(e) => {\n                  setBusiness(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Business Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"AMC\">AMC</option>\n                <option value=\"WTY\">Warranty</option>\n                <option value=\"NOS\">NOS</option>\n                <option value=\"DEAD\">DEAD</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n            {/* ---------------------------Product Drop Down-------------------------------------- */}\n            <div className=\"relative z-40 \">\n              <button\n                onClick={() => {\n                  setIsOpen(!isOpen);\n                }}\n                className=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-4 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                aria-label=\"Notifications\"\n                aria-haspopup=\"true\"\n              >\n                {product ? product : \"Pick Product\"}\n              </button>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n              <Dropdown isOpen={isOpen} onClose={() => setIsOpen(false)}>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"\");\n                  }}\n                >\n                  <span>All</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Console\");\n                  }}\n                >\n                  <span>Console</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"DMP\");\n                  }}\n                >\n                  <span>DMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Inkjet\");\n                  }}\n                >\n                  <span>Inkjet</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"KVM\");\n                  }}\n                >\n                  <span>KVM</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laptop\");\n                  }}\n                >\n                  <span>Laptop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Laser\");\n                  }}\n                >\n                  <span>Laser</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"LMP\");\n                  }}\n                >\n                  <span>LMP</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Module\");\n                  }}\n                >\n                  <span>Module</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Router\");\n                  }}\n                >\n                  <span>Router</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Scanner\");\n                  }}\n                >\n                  <span>Scanner</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Server\");\n                  }}\n                >\n                  <span>Server</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Desktop\");\n                  }}\n                >\n                  <span>Desktop</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Storage\");\n                  }}\n                >\n                  <span>Storage</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Switch\");\n                  }}\n                >\n                  <span>Switch</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"UPS\");\n                  }}\n                >\n                  <span>UPS</span>\n                </DropdownItem>\n                <DropdownItem\n                  onClick={() => {\n                    setIsOpen(false);\n                    setProduct(\"Others\");\n                  }}\n                >\n                  <span>Others</span>\n                </DropdownItem>\n              </Dropdown>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                {/* <TableCell>Phone</TableCell> */}\n                <TableCell>Product</TableCell>\n                <TableCell>Serial</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Problem</TableCell>\n                {/* <TableCell>Assigned Employee</TableCell> */}\n                <TableCell>Actions</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data\n                .filter((call) => {\n                  // console.log(product, call.assetId.producttype);\n                  if (\n                    (Business == \"\" && product == \"\") ||\n                    (Business != \"\" && call.assetId.business == Business) ||\n                    (product != \"\" && call.assetId.producttype == product)\n                  )\n                    return true;\n                  return false;\n                })\n                .map((call, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activerowid == call._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowId(call._id);\n                      setBBarOpen(1);\n                      // console.log(\"the id is \" + call._id);\n                      setSelectedProd(call);\n                      console.log(\"SELECTD\", call);\n                      setAssetDetails(call.assetId);\n                      // console.log(call.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"\">\n                      <div className=\"flex items-center text-sm justify-center\">\n                        <div className=\"flex flex-col items-center \">\n                          <Link\n                            key={call._id}\n                            to={\n                              call.callType == \"internalinv\"\n                                ? `/app/call/updateinvcall/${call._id}/${call.assetId._id}`\n                                : `/app/call/updatecall/${call._id}/${call.assetId._id}`\n                            }\n                          >\n                            <div className=\" cursor-pointer\">\n                              <p className=\"font-semibold py-1 px-12 hover:underline text-white bg-blue-600 rounded-lg mb-1\">\n                                {call.callNo}\n                              </p>\n                            </div>\n                          </Link>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm\">\n                          {moment(call.date).format(\"DD/MM/YYYY\")}\n                        </span>\n                        {call.regtimestamp ? (\n                          <span className=\"text-xs\">\n                            {moment(`${\"2018-04-02\"}T${call.time}`).format(\n                              \"h:mm a\"\n                            )}\n                          </span>\n                        ) : null}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{call.unitName}</span>\n                    </TableCell>\n\n                    {/* <TableCell>\n                    <span className=\"text-sm\">{call.phone}</span>\n                  </TableCell> */}\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {call.assetId.producttype}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm \">\n                        {call.assetId.product.serialno}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\" text-xs\">\n                        {call.callStatus == 0 ? (\n                          <Badge>Pending For Allocation</Badge>\n                        ) : null}\n                        {call.callStatus == 1 ? (\n                          <Badge>Pending for Percall Approval</Badge>\n                        ) : null}\n                        {call.callStatus == 2 ? (\n                          <Badge>Pending for Response</Badge>\n                        ) : null}\n                        {call.callStatus == 3 ? (\n                          <Badge>Pending for OEM Response</Badge>\n                        ) : null}\n                        {call.callStatus == 4 ? (\n                          <Badge>Pending for 2nd Response</Badge>\n                        ) : null}\n                        {call.callStatus == 5 ? (\n                          <Badge>Pending for Customer</Badge>\n                        ) : null}\n                        {call.callStatus == 6 ? (\n                          <Badge>Under Observation</Badge>\n                        ) : null}\n                        {call.callStatus == 7 ? (\n                          <Badge>Pending for Others</Badge>\n                        ) : null}\n                        {call.callStatus == 8 ? (\n                          <Badge>Pending for Spare</Badge>\n                        ) : null}\n                        {call.callStatus == 9 ? (\n                          <Badge>Spare in Transit</Badge>\n                        ) : null}\n                        {call.callStatus == 10 ? (\n                          <Badge>Cancelled Calls</Badge>\n                        ) : null}\n                        {call.callStatus == 11 ? (\n                          <Badge>Closed Calls</Badge>\n                        ) : null}\n                        {call.callStatus == 12 ? (\n                          <Badge>Spare Taken CMRR</Badge>\n                        ) : null}\n                        {call.callStatus == 13 ? (\n                          <Badge>Pending For Spare Collection</Badge>\n                        ) : null}\n                        {call.callStatus == 14 ? (\n                          <Badge>Standby Given</Badge>\n                        ) : null}\n                        {call.callStatus == 15 ? (\n                          <Badge>Pending For Verification</Badge>\n                        ) : null}\n                      </span>\n                    </TableCell>\n\n                    <TableCell className=\"flex flex-row \">\n                      <div className=\"flex items-center justify-center \">\n                        <div className=\"flex flex-col items-start overflow-auto text-sm w-40 \">\n                          <span className=\" \">{call.problem}</span>\n                          {call.employeeId ? (\n                            <span>Engineer: {call.employeeName}</span>\n                          ) : (\n                            <span>Engineer Not Assigned</span>\n                          )}\n                        </div>\n                      </div>\n                      {/* <span>Engineer: {call.engineer}</span> */}\n                    </TableCell>\n\n                    {/* <TableCell> */}\n                    {/* <div className=\"flex \">\n                      {/* <Label className=\"w-full\"> */}\n                    {/* <Select\n                        className=\"inline\"\n                        onChange={(e) => {\n                          // setAccType(parseInt(e.target.value));\n                          let temp = data;\n                          console.log(temp);\n                          temp = temp.filter((c) => {\n                            if (c._id === call._id) {\n                              c.callStatus = e.target.value;\n                              return c;\n                            } else return c;\n                          });\n                          setData(temp);\n                        }}\n                        value={call.callStatus}\n                      >\n                        <option value=\"0\">Not Allocated</option>\n                        <option value=\"1\">Pending for Percall Approval</option>\n                        <option value=\"2\"> Pending for Response</option>\n                        <option value=\"3\"> Pending for OEM Response</option>\n                        <option value=\"4\"> Pending for 2nd Response</option>\n                        <option value=\"5\"> Pending for Customer</option>\n                        <option value=\"6\"> Under Observation</option>\n                        <option value=\"7\"> Pending for Others</option>\n                        <option value=\"8\"> Pending for Spare</option>\n                        <option value=\"9\"> Spare in Transit</option>\n                        <option value=\"10\"> Cancelled Calls</option>\n                        <option value=\"11\"> Closed Calls</option>\n                      </Select> */}\n                    {/* </Label> */}\n                    {/* <div\n                        className=\"p-1 m-2 dark:hover:bg-green-700 hover:bg-green-200 rounded-full text-green-400\"\n                        onClick={async () => {\n                          let payload = {\n                            id: call._id,\n                            update: {\n                              callStatus: call.callStatus,\n                            },\n                          };\n                          try {\n                            let response = await axios({\n                              url: `${API}/call/${Emp.getId()}/assignEngg`,\n                              method: \"POST\",\n                              data: payload,\n                            });\n                            console.log(\"updated\");\n                            setIsReviewModalOpen(true);\n                          } catch (error) {\n                            throw error;\n                          }\n                        }}\n                      >\n                        <TickIcon\n                          className=\"w-5 h-5 fill-current\"\n                          aria-hidden=\"true\"\n                        />\n                      </div> */}\n                    {/* </div> */}\n                    {/* </TableCell> */}\n                    {/* <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        {call.employeeName}\n                        {/* <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\" onClick={()=>setIsEnggModalOpen(true)} className=\"rounded-full mx-2 \">\n                       \n                          <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                        \n                      </Button> */}\n                    {/* </> */}\n                    {/* ) : ( */}\n                    <>\n                      {/* <Button onClick={()=>setIsEnggModalOpen(true)}> */}\n                      {/* Not Assigned */}\n                      {/* </Button> */}\n                    </>\n\n                    {/* </TableCell> */}\n                    <TableCell>\n                      <div className=\"flex items-center space-x-4\">\n                        <Link\n                          key={call._id}\n                          to={\n                            call.callType == \"internalinv\"\n                              ? `/app/call/updateinvcall/${call._id}/${call.assetId._id}`\n                              : `/app/call/updatecall/${call._id}/${call.assetId._id}`\n                          }\n                        >\n                          <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\">\n                            {/* <Link\n                          key={user._id}\n                          to={`/app/unit/update/${user._id}`}\n                        > */}\n                            <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                            {/* </Link>{\" \"} */}\n                          </Button>\n                        </Link>\n\n                        <Button\n                          onClick={() => {\n                            setViewId(i);\n                            setHistoryModalOpen(true);\n                          }}\n                          layout=\"link\"\n                          size=\"icon\"\n                          aria-label=\"Edit\"\n                        >\n                          <MenuIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n    </>\n  );\n}\n\nexport default ViewCalls;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async () => {\n    // e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n  useEffect(() => {\n    handleSubmit();\n  }, [search]);\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n\n      setAccounts(accs.data);\n\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer className=\"\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>\n                <form onSubmit={(e) => e.preventDefault()}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"h-64 overflow-auto\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"sourceRoot":""}