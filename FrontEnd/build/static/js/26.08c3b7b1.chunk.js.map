{"version":3,"sources":["components/Modal/AssetFilters/CustomerSelection.js","components/Modal/UnitListModal.js","pages/LST/LST.js","helpers/toolfuctions/toolfunctions.js"],"names":["CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","refresh","setRefresh","theunitdetails","setTheUnitDetails","useState","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","e","target","value","handleSubmit","a","preventDefault","payload","role","axios","url","API","method","data","response","console","log","useEffect","pickCustomer","_id","customerName","name","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","contactPerson","contactNo","isOpen","onClose","className","selectedIndex","onSelect","ind","onSubmit","placeholder","onChange","map","i","key","onClick","type","UnitListModal","LST","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","setData","SelectedItems","setSelectedItems","LSTtype","setLSTtype","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","moment","format","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","isVendorModalopen","setIsVendorModalopen","vendors","setVendors","defVendor","aadharNo","PANNo","GSTNo","selectedVendor","setselectedVendor","isVendor","setIsVendor","isCustomerModalOpen","setIsCustomerModalOpen","CMRRinvdetails","sno","invnumber","caseId","systype","CMRRvalues","setCMRRValues","filters","Emp","getId","out","getVendorList","totalResults","setTotalResults","onPageChange","p","LSTNumberSetter","from","thecallcount","locstr","year","callnumber","thegetter","pages","limit","total","updateInventory","MakeCMRR","length","invIds","item","push","newhistory","histtype","callId","assetId","status","note","id","update","$push","history","LSTCustomer","lst","to","invItems","unitId","vendorId","vendorName","CMRRItems","class","default","selected","xmlns","viewBox","d","disabled","layout","aria-label","aria-haspopup","user","temp","filter","x","t","defaultValue","invList","fill","aria-hidden","capitalize","stocktype","expirydate","added","initList","resultsPerPage","label","num","newitem","newlist","wty","add","exports","s","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/26.08c3b7b1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\"  >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, Remove } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Input,\n  HelperText,\n  Label,\n  Select,\n  Card,\n  CardBody,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\nimport { CloseIcon } from \"../../icons\";\n\nfunction LST() {\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [LSTtype, setLSTtype] = useState(\"Normal\");\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  // const [customer, setCustomer] = useState(\"\");\n  const [date, setDate] = useState(moment().format());\n  const [condition, setCondition] = useState(\"Available\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  //vendors\n  const [isVendorModalopen, setIsVendorModalopen] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const defVendor = {\n    _id: \"\",\n    name: \"\",\n    aadharNo: \"\",\n    PANNo: \"\",\n    GSTNo: \"\",\n  };\n  const [selectedVendor, setselectedVendor] = useState(defVendor);\n\n  const [isVendor, setIsVendor] = useState(false);\n\n  //customer\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n  const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);\n\n  // CMRR\n\n  const CMRRinvdetails = {\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    invnumber: \"\",\n    location: \"In Transit\",\n    //-------\n    caseId: \"imprest\",\n    systype: \"item\",\n  };\n  const [CMRRvalues, setCMRRValues] = useState([CMRRinvdetails]);\n\n  async function getVendorList() {\n    let payload = {\n      filters: {\n        searchquery: \"\",\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/vendor/${Emp.getId()}/getAll`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setVendors(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n  useEffect(() => {\n    getVendorList();\n  }, []);\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // LST NUM\n  const LSTNumberSetter = async (date, from) => {\n    console.log(date, from);\n    if (from == \"\" || date == \"\") return;\n    let payload = {\n      from: from,\n      date: date,\n    };\n    let thecallcount = 0;\n    try {\n      thecallcount = await axios({\n        url: `${API}/lst/${Emp.getId()}/lstbydate`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    let locstr;\n    from == \"Trivandrum\"\n      ? (locstr = \"TVM\")\n      : from == \"Kottayam\"\n      ? (locstr = \"KTM\")\n      : (locstr = \"CLT\");\n\n    let year = moment(date).format(\"YY\");\n    let month = moment(date).format(\"MM\");\n    let day = moment(date).format(\"DD\");\n    let callnumber = thecallcount.data + 1;\n    if (callnumber < 10) {\n      callnumber = \"00\" + callnumber;\n    } else if (callnumber < 100) {\n      callnumber = \"0\" + callnumber;\n    }\n    console.log(thecallcount.data);\n\n    let thestring = \"ICS\" + locstr + year + callnumber;\n    setLSTNo(thestring);\n    // setValues({ ...values, callNo: thestring, date: date });\n    // // ------history management\n    // let temp = callhistory;\n    // temp[0].date = date;\n    // setCallHistory(temp);\n\n    // console.log(thestring);\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  //   useEffect(() => {\n  //     setBBarOpen(1);\n  //     return () => {\n  //       setBBarOpen(0);\n  //       setAssetDetails({});\n  //     };\n  //   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory = async () => {\n    if (LSTNo == \"\") {\n      setModalMessage(\"LST Number necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (date == \"\") {\n      setModalMessage(\"Date Necessary\");\n      setMessageModal(true);\n      return;\n    }\n    // if (location == toLocation) {\n    //   setModalMessage(\"From and to Location is same!\");\n    //   setMessageModal(true);\n    //   return;\n    // }\n    if (location == \"\") {\n      setModalMessage(\"From location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (toLocation == \"\") {\n      setModalMessage(\"To location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (LSTtype == \"CMRR\") {\n      console.log(CMRRvalues);\n      MakeCMRR();\n    }\n    if (SelectedItems.length == 0) {\n      setModalMessage(\"No items selected\");\n      setMessageModal(true);\n      return;\n    }\n    let invIds = [];\n\n    SelectedItems.map(async (item) => {\n      invIds.push(item._id);\n      // ----history ---\n      let newhistory = {\n        histtype: \"lst\",\n        date: date,\n        location: \"In Transit\",\n        callId: \"Nil\",\n        assetId: \"Nil\",\n        status: item.condition,\n        note: `Item sent from ${location} to ${toLocation}`,\n      };\n      const data = {\n        id: item._id,\n        update: {\n          location: \"In Transit\",\n          caseId: item.caseId,\n          $push: { history: newhistory },\n          LSTtype: LSTtype,\n          LSTCustomer: \"\",\n        },\n      };\n      if (LSTtype == \"Customer\") data.update.LSTCustomer = customer;\n      console.log(\"PAYLOAD\", data);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: data,\n        });\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    });\n\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: invIds,\n      status: \"In Transit\",\n      LSTtype: LSTtype,\n    };\n\n    if (LSTtype == \"Customer\") {\n      lst.unitId = unit._id;\n      lst.unitName = unit.unitName;\n      lst.accountId = account._id;\n      lst.accountName = account.accountName;\n      lst.customerId = customer._id;\n      lst.customerName = customer.customerName;\n    }\n\n    if (selectedVendor._id != \"\") {\n      console.log(\"here\");\n      lst.vendorId = selectedVendor._id;\n      lst.vendorName = selectedVendor.name;\n    }\n    console.log(\"LST\", lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\");\n      setDate(\"\");\n      setselectedVendor(defVendor);\n      // setData([]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const MakeCMRR = async () => {\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: [],\n      status: \"In Transit\",\n      LSTtype: LSTtype,\n      CMRRItems: CMRRvalues,\n    };\n\n    console.log(\"LST\", lst);\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\");\n      setDate(\"\");\n      setselectedVendor(defVendor);\n      // setData([]);\n      setCMRRValues([CMRRinvdetails]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const VendorModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isVendorModalopen}\n          onClose={() => setIsVendorModalopen(false)}\n        >\n          <ModalHeader>Pink Vendor</ModalHeader>\n          <ModalBody>\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Customer</TableCell>\n                    {/* <TableCell>Unit</TableCell> */}\n                    {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n                  </tr>\n                </TableHeader>\n                <TableBody>\n                  {vendors.map((user, i) => (\n                    <TableRow\n                      key={i}\n                      className=\"hover:bg-purple-900 \"\n                      onClick={() => {\n                        console.log(user);\n                        setselectedVendor(user);\n                        setIsVendorModalopen(false);\n                      }}\n                    >\n                      <TableCell>\n                        <div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsVendorModalopen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const invTable = () => {\n    return (\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"mouse\">Mouse</option>\n                <option value=\"keyboard\">Keyboard</option>\n                <option value=\"monitor\">Monitor</option>\n                <option value=\"cpu\">Cpu</option>\n                <option value=\"ram\">Ram</option>\n                <option value=\"fan\">Fan</option>\n                <option value=\"motherboard\">Motherboard</option>\n                <option value=\"smps\">SMPS</option>\n                <option value=\"hdd\">HDD</option>\n                {/* <option value=\"SMPS\">SMPS</option> */}\n                <option value=\"gcard\">Gcard</option>\n                <option value=\"enetcard\">Enet Card</option>\n                <option value=\"serialcard\">Serial Card</option>\n                <option value=\"paralellcard\">Paralell Card</option>\n                <option value=\"opticaldrive\">Optical Drive</option>\n                <option value=\"others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n                <option value=\"Used\">Used</option>\n                <option value=\"Available\" selected>\n                  Available\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"Damaged\">Damaged</option>\n                <option value=\"DOA\">DOA</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Category</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Stock Type</TableCell>\n                <TableCell>Wty.</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Add</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{capitalize(user.type)}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.stocktype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.expirydate}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      layout=\"outline\"\n                      className=\"dark:border-green-700 border-green-400\"\n                      onClick={() => {\n                        let added = false;\n                        let initList = data;\n                        initList = initList.filter((i) => i._id != user._id);\n                        console.log(initList);\n                        setData(initList);\n                        SelectedItems.map((i) => {\n                          if (i._id == user._id) {\n                            console.log(i._id, user._id);\n                            setModalMessage(\"Product already Added!\");\n                            setMessageModal(true);\n                            added = true;\n                          }\n                        });\n                        if (added) return;\n                        user.caseId = \"imprest\";\n                        let temp = [...SelectedItems, user];\n                        setSelectedItems(temp);\n                        // setShowInvTable(false);\n                        // setModalMessage(\"Product  Added!\");\n                        // setMessageModal(true);\n                      }}\n                    >\n                      Add\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n    );\n  };\n\n  const SelectedInv = () => {\n    return (\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            {selectedVendor.name !== \"\" ? (\n              <> Vendor:{selectedVendor.name}</>\n            ) : null}\n          </div>\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            Selected Items\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Case Id</TableCell>\n                <TableCell>Remove</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  <TableCell>\n                    <input\n                      value={user.caseId}\n                      onChange={(e) => {\n                        let temp = SelectedItems;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != user._id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.caseId = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setSelectedItems(temp);\n                      }}\n                      defaultValue=\"Imprest\"\n                      placeholder=\"Cse Id.\"\n                      class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                    />\n                  </TableCell>\n\n                  <TableCell>\n                    <div\n                      className=\" py-1\"\n                      onClick={() => {\n                        let invList = [...data, user];\n                        setData(invList);\n                        let temp = SelectedItems;\n                        temp = temp.filter((i) => i._id != user._id);\n\n                        setSelectedItems(temp);\n                      }}\n                    >\n                      <TrashIcon\n                        className=\"w-5 h-5 cursor-pointer m-2 text-2xl\"\n                        fill=\"maroon\"\n                        aria-hidden=\"true\"\n                      />\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const CMRRMenu = (num) => {\n    let itemtype = \"item\";\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span>{\" \"}\n          <div\n            layout=\"outline\"\n            onClick={() => {\n              let newitem = [...CMRRvalues];\n              newitem = newitem.filter((item, i) => {\n                if (i != num) return item;\n              });\n              setCMRRValues(newitem);\n            }}\n            className=\"border-gray-100 rounded-full cursor pointer\"\n          >\n            <CloseIcon\n              fill=\"lightgray\"\n              className=\"w-5 h-5 cursor-pointer \"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].systype}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].systype = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option selected value=\"item\">\n                  Item\n                </option>\n                <option value=\"full system\">Full System</option>\n              </Select>\n            </Label>\n          </div>\n\n          {CMRRvalues[num].systype == \"item\" ? (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value;\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"mouse\">Mouse</option>\n                  <option value=\"keyboard\">Keyboard</option>\n                  <option value=\"monitor\">Monitor</option>\n                  <option value=\"cpu\">Cpu</option>\n                  <option value=\"ram\">Ram</option>\n                  <option value=\"fan\">Fan</option>\n                  <option value=\"motherboard\">Motherboard</option>\n                  <option value=\"smps\">SMPS</option>\n                  <option value=\"hdd\">HDD</option>\n                  <option value=\"gcard\">Gcard</option>\n                  <option value=\"enetcard\">Enet Card</option>\n                  <option value=\"serialcard\">Serial Card</option>\n                  <option value=\"paralellcard\">Paralell Card</option>\n                  <option value=\"opticaldrive\">Optical Drive</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          ) : (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value;\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"console\">Console</option>\n                  <option value=\"DMP\">DMP</option>\n                  <option value=\"inkjet\">Inkjet</option>\n                  <option value=\"KVM\">KVM</option>\n                  <option value=\"laptop\">Laptop</option>\n                  <option value=\"laser\">Laser</option>\n                  <option value=\"LMP\">LMP</option>\n                  <option value=\"module\">Module</option>\n                  <option value=\"router\">Router</option>\n                  <option value=\"scanner\">Scanner</option>\n                  <option value=\"server\">Server</option>\n                  <option value=\"desktop\">Desktop</option>\n                  <option value=\"storage\">Storage</option>\n                  <option value=\"switch\">Switch</option>\n                  <option value=\"UPS\">UPS</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          )}\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Product Name*</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={CMRRvalues[num].name}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    newlist[num].name = e.target.value;\n                    setCMRRValues(newlist);\n                  }}\n                />\n              </Label>\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].sno}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].sno = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].condition = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"DOA\">DOA</option>\n                <option value=\"Damaged\">Damaged</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].wty}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].wty = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"0D\">0 days</option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Years</option>\n                <option value=\"3Y\">3 Years</option>\n                <option value=\"4Y\">4 Years</option>\n                <option value=\"5Y\">5 Years</option>\n                <option value=\"20Y\">20 Years</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Case ID*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].caseId}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].caseId = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const CMRRBottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap justify-start\">\n            <Button\n              onClick={() => {\n                let newitem = [...CMRRvalues];\n                let add = CMRRinvdetails;\n                newitem.push(add);\n                setCMRRValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Item\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <div className=\" mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \"> Type</div>\n            {/* -----------------------------------------CMRR ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={LSTtype}\n                onChange={(e) => {\n                  setLSTtype(e.target.value);\n                }}\n              >\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Normal\" default selected>\n                  Normal\n                </option>\n                <option value=\"CMRR\">CMRR</option>\n                <option value=\"Customer\">Customer</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \">From</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                  LSTNumberSetter(date, e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1 \">To</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              {LSTtype == \"Normal\" || LSTtype == \"Customer\" ? (\n                <>\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={toLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                      setselectedVendor(defVendor);\n                      if (e.target.value == \"Vendor\") {\n                        setIsVendor(true);\n                      } else setIsVendor(false);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      Location\n                    </option>\n                    {/* <option value=\"\">All</option> */}\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                    {LSTtype == \"Normal\" ? (\n                      <>\n                        <option value=\"Vendor\">Vendor</option>\n                      </>\n                    ) : null}\n                  </select>\n                </>\n              ) : (\n                <>\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={toLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                      setselectedVendor(defVendor);\n                      if (e.target.value == \"Vendor\") {\n                        setIsVendor(true);\n                      } else setIsVendor(false);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      Location\n                    </option>\n                    {/* <option value=\"\">All</option> */}\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                  </select>\n                </>\n              )}\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n          {isVendor ? (\n            <div className=\"mx-1\">\n              <Button\n                layout=\"outline\"\n                className=\"w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </div>\n          ) : null}\n\n          {/* -----------------------------------------Location ----------------------- */}\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" my-2 \">Date</div>\n            <div class=\"relative mx-1 \">\n              <input\n                type=\"date\"\n                value={date}\n                onChange={(e) => {\n                  setDate(e.target.value);\n                  LSTNumberSetter(e.target.value, location);\n                }}\n                placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          <div className=\" flex flex-row dark:text-white  \">\n            <div className=\" mx-1 my-1 \">LST No.</div>\n            <div class=\"relative  \">\n              <input\n                value={LSTNo}\n                disabled\n                onChange={(e) => setLSTNo(e.target.value)}\n                // placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          {/* //submitCustomer */}\n\n          <div className=\"flex flex-row dark:text-white mx-5 \">\n            <Button onClick={updateInventory}>Submit</Button>\n          </div>\n        </div>\n        {LSTtype == \"Customer\" ? (\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" flex flex-row dark:text-white mt-2 \">\n              <div className=\"flex items-center  space-x-3 my-3\">\n                <Button\n                  onClick={() => setIsCustomerModalOpen(true)}\n                  aria-label=\"Notifications\"\n                  aria-haspopup=\"true\"\n                >\n                  Pick Customer\n                </Button>\n              </div>\n              {customer._id ? (\n                <>\n                  <div className=\"align-center my-auto mx-4\">\n                    Customer: {customer.customerName} - Account:{\" \"}\n                    {account.accountName} - Unit: {unit.unitName}\n                  </div>\n                </>\n              ) : null}\n            </div>\n          </div>\n        ) : null}\n\n        {LSTtype == \"Normal\" || LSTtype == \"Customer\" ? (\n          <>\n            {SelectedInv()}\n            <div className=\"my-5\">\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  if (location == \"\" || toLocation == \"\") {\n                    setModalMessage(\"Select From and To Locations\");\n                    setMessageModal(true);\n                    return;\n                  }\n                  setShowInvTable(true);\n                }}\n              >\n                Add Product from Inventory\n              </Button>\n            </div>\n            {showInvTable ? invTable() : null}\n          </>\n        ) : null}\n      </div>\n\n      {messageModalComponent()}\n      {VendorModal()}\n      {LSTtype == \"CMRR\" ? (\n        <>\n          {CMRRvalues.map((item, i) => {\n            return CMRRMenu(i);\n          })}\n          {CMRRBottomCard()}\n        </>\n      ) : null}\n\n      <UnitListModal\n        isModalOpen={isCustomerModalOpen}\n        setIsModalOpen={setIsCustomerModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n      />\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n","exports.capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n"],"sourceRoot":""}