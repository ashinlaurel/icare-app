{"version":3,"sources":["pages/Calls/AssignCallPriority.js"],"names":["AssignCallPriority","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","TopBarContext","setTopHeading","topheading","setPage","data","setData","_id","enggName","assignedCalls","engineer","setEngineer","isEnggModalOpen","setIsEnggModalOpen","totalResults","useEffect","submitCustomer","a","console","log","newuser","payload","id","update","axios","url","API","Emp","getId","method","isModalOpen","setIsModalOpen","setEmployee","className","layout","onClick","map","i","callId","priority","key","callNo","moment","date","format","unitName","phone","callStatus","value","onChange","e","temp","filter","x","target","t","resultsPerPage","label","p"],"mappings":"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","file":"static/js/61.c8cdcde3.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Input,\n  HelperText,\n  Label,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport AssetFloat from \"../../components/FloatDetails/AssetFloat\";\nimport { API } from \"../../backendapi\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport SelectEmployeeModal from \"../../components/Modal/SelectEmployeeModal\";\nimport SelectEmployeeModalForCalls from \"../../components/Modal/SelectEmployeeModalForCalls\";\n\nfunction AssignCallPriority() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [addEnggModalOpen, setaddEnggModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({\n    _id: \"\",\n    enggName: \"\",\n    assignedCalls: [],\n  });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Dates of call\n  const [assignedDate, setAssignedDate] = useState(\"\");\n  const [assignedETA, setAssignedETA] = useState(\"\");\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  useEffect(() => {\n    setData(engineer.assignedCalls);\n  }, [engineer]);\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Assign Call Priority\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  const submitCustomer = async () => {\n    console.log(\"DATA\", data);\n    // e.preventDefault();\n    const newuser = {\n      assignedCalls: [...data],\n    };\n    console.log(newuser);\n\n    const payload = {\n      id: engineer._id,\n      update: newuser,\n    };\n    try {\n      await axios({\n        url: `${API}/admin/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: payload,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // console.log(selectedprod);\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SelectEmployeeModalForCalls\n        isModalOpen={isEnggModalOpen}\n        setIsModalOpen={setIsEnggModalOpen}\n        setEmployee={setEngineer}\n      />\n      <SelectEmployeeModalForCalls />\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"flex flex-row items-center justify-start space-x-2\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <Button layout=\"outline\" onClick={() => setIsEnggModalOpen(true)}>\n            Select Engineer\n          </Button>\n          <Button onClick={() => submitCustomer(true)}>Submit</Button>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Priority</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map(({ _id, callId, priority }, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == callId._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    // setActiveRowId(callId._id);\n                    // setBBarOpen(1);\n                    // // console.log(\"the id is \" + call._id);\n                    // setSelectedProd(callId);\n                    // if (callId.assetId) setAssetDetails(callId.assetId);\n                    // else setAssetDetails({});\n                    // console.log(callId.assetId);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{callId.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(callId.date).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    {callId.callStatus == 0 ? (\n                      <span className=\"text-sm\">Pending For Allocation</span>\n                    ) : null}\n                    {callId.callStatus == 1 ? (\n                      <span className=\"text-sm\">\n                        Pending for Percall Approval\n                      </span>\n                    ) : null}\n                    {callId.callStatus == 2 ? (\n                      <span className=\"text-sm\">Pending for Response</span>\n                    ) : null}\n                    {callId.callStatus == 3 ? (\n                      <span className=\"text-sm\">Pending for OEM Response</span>\n                    ) : null}\n                    {callId.callStatus == 4 ? (\n                      <span className=\"text-sm\">Pending for 2nd Response</span>\n                    ) : null}\n                    {callId.callStatus == 5 ? (\n                      <span className=\"text-sm\">Pending for Customer</span>\n                    ) : null}\n                    {callId.callStatus == 6 ? (\n                      <span className=\"text-sm\">Under Observation</span>\n                    ) : null}\n                    {callId.callStatus == 7 ? (\n                      <span className=\"text-sm\">Pending for Others</span>\n                    ) : null}\n                    {callId.callStatus == 8 ? (\n                      <span className=\"text-sm\">Pending for Spare</span>\n                    ) : null}\n                    {callId.callStatus == 9 ? (\n                      <span className=\"text-sm\">Spare in Transit</span>\n                    ) : null}\n                    {callId.callStatus == 10 ? (\n                      <span className=\"text-sm\">Cancelled Calls</span>\n                    ) : null}\n                    {callId.callStatus == 11 ? (\n                      <span className=\"text-sm\">Closed Calls</span>\n                    ) : null}\n                    {callId.callStatus == 12 ? (\n                      <span className=\"text-sm\">Spare Taken CMRR</span>\n                    ) : null}\n                    {callId.callStatus == 13 ? (\n                      <span className=\"text-sm\">\n                        Pending For Spare Collection\n                      </span>\n                    ) : null}\n                    {callId.callStatus == 14 ? (\n                      <span className=\"text-sm\">Standby Given</span>\n                    ) : null}\n                  </TableCell>\n                  <TableCell>\n                    <input\n                      value={priority}\n                      onChange={(e) => {\n                        let temp = data;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != _id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.priority = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setData(temp);\n                      }}\n                    />\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default AssignCallPriority;\n"],"sourceRoot":""}