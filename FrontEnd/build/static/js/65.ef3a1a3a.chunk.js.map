{"version":3,"sources":["pages/Calls/ViewCalls.js"],"names":["ViewCalls","useState","isSetStatusModal","setisSetStatusModal","isReviewModalOpen","setIsReviewModalOpen","historyModalOpen","setHistoryModalOpen","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","viewId","setViewId","refresh","setRefresh","callStatus","setCallStatus","callType","setCallType","fromDate","setFromDate","toDate","setToDate","Business","product","_id","unitName","customerName","accountName","enggName","engineer","selectedprod","setSelectedProd","searchquery","setSearchQuery","isHistoryImgViewModal","setIsHistoryImgViewModal","goodSpareHistoryImg","setGoodSpareHistoryImg","defectiveHistoryImg","setDefectiveHistoryImg","ccfrHistoryImg","setCcfrHistoryImg","totalResults","setTotalResults","SetStatusModal","isOpen","onClose","className","onClick","a","console","log","payload","id","update","employeeId","employeeName","axios","url","API","Emp","getId","method","temp","filter","c","useEffect","pages","limit","filters","response","out","total","ReviewSubmit","item","history","name","callNo","map","entry","i","key","moment","date","format","capitalize","callAttendDate","startOfService","endOfService","note","actionTaken","layout","newUrl","existUrl","ccfrImgUrl","HistoryModal","href","target","src","width","height","class","type","value","onChange","e","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","call","assetId","regtimestamp","time","phone","to","resultsPerPage","label","p"],"mappings":"sTAq6BeA,UAx3Bf,WAAqB,MAI6BC,oBAAS,GAJtC,mBAIZC,EAJY,KAIMC,EAJN,OAK+BF,oBAAS,GALxC,mBAKZG,EALY,KAKOC,EALP,OAM6BJ,oBAAS,GANtC,mBAMZK,EANY,KAMMC,EANN,OASjBC,qBAAWC,KADKC,GARC,EAQXC,SARW,EAQDD,aAAaE,EARZ,EAQYA,gBARZ,KAQ6BC,aAGVZ,mBAAS,IAX5B,mBAWZa,EAXY,KAWCC,EAXD,OAamBP,qBAAWQ,KAA7BC,GAbD,EAaXC,WAbW,EAaCD,eAbD,EAeahB,oBAAS,GAftB,gCAgBKA,mBAAS,IAhBd,mBAgBZkB,EAhBY,KAgBNC,EAhBM,OAiBKnB,mBAAS,IAjBd,mBAiBZoB,EAjBY,KAiBNC,EAjBM,OAkBSrB,mBAAS,IAlBlB,mBAkBZsB,EAlBY,KAkBJC,EAlBI,OAoBSvB,oBAAS,GApBlB,gCAqBeA,oBAAS,IArBxB,gCAsBmBA,oBAAS,IAtB5B,oCAuBWA,oBAAS,IAvBpB,qBAuBZwB,GAvBY,MAuBHC,GAvBG,SAwBazB,oBAAS,GAxBtB,qCAyBiBA,mBAAS,KAzB1B,qBAyBZ0B,GAzBY,MAyBAC,GAzBA,SA0Ba3B,mBAAS,IA1BtB,qBA0BZ4B,GA1BY,MA0BFC,GA1BE,SA2Ba7B,mBAAS,IA3BtB,qBA2BZ8B,GA3BY,MA2BFC,GA3BE,SA4BS/B,mBAAS,IA5BlB,qBA4BZgC,GA5BY,MA4BJC,GA5BI,SA+BajC,mBAAS,IA/BtB,qBA+BZkC,GA/BY,gBAgCWlC,mBAAS,KAhCpB,qBAgCZmC,GAhCY,gBAiCKnC,mBAAS,CAAEoC,IAAK,GAAIC,SAAU,MAjCnC,qCAkCarC,mBAAS,CAAEoC,IAAK,GAAIE,aAAc,MAlC/C,qCAmCWtC,mBAAS,CAAEoC,IAAK,GAAIG,YAAa,MAnC5C,qCAsCavC,mBAAS,CAAEoC,IAAK,GAAII,SAAU,MAtC3C,qBAsCZC,GAtCY,gBAuC2BzC,oBAAS,IAvCpC,qCAyCqBA,mBAAS,KAzC9B,qBAyCZ0C,GAzCY,MAyCEC,GAzCF,SA4CiB3C,mBAAS,IA5C1B,qCA6CmBA,mBAAS,KA7C5B,qCA8CmBA,mBAAS,KA9C5B,qBA8CZ4C,GA9CY,MA8CCC,GA9CD,SAiDuC7C,oBAAS,GAjDhD,qBAiDZ8C,GAjDY,MAiDWC,GAjDX,SAkDmC/C,mBAAS,IAlD5C,qBAkDZgD,GAlDY,MAkDSC,GAlDT,SAmDmCjD,mBAAS,IAnD5C,qBAmDZkD,GAnDY,MAmDSC,GAnDT,SAoDyBnD,mBAAS,IApDlC,qBAoDZoD,GApDY,MAoDIC,GApDJ,SAwDqBrD,mBAAS,IAxD9B,qBAwDZsD,GAxDY,MAwDEC,GAxDF,MA+DbC,GAAiB,WACrB,OACE,oCACE,kBAAC,QAAD,CACEC,OAAQxD,EACRyD,QAAS,kBAAMxD,GAAoB,KAEnC,kBAAC,cAAD,wBACA,kBAAC,YAAD,KACE,yBAAKyD,UAAU,iBACb,yBAAKA,UAAU,2BAAf,mBACA,kBAAC,SAAD,CAAQA,UAAU,WAAlB,cACA,kBAAC,SAAD,CAAQA,UAAU,6BAAlB,0BAGA,kBAAC,SAAD,CAAQA,UAAU,6BAAlB,0BAGA,kBAAC,SAAD,CAAQA,UAAU,6BAAlB,0BAGA,kBAAC,SAAD,CAAQA,UAAU,6BAAlB,4BAKJ,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEA,UAAU,mBACVC,QAAO,sBAAE,8BAAAC,EAAA,6DACPC,QAAQC,IAAI,WAAYrB,IACpBsB,EAAU,CACZC,GAAIvB,GAAaN,IACjB8B,OAAQ,CACNC,WAAY1B,GAASL,IACrBgC,aAAc3B,GAASD,SACvBd,WAAY,IAPT,kBAWgB2C,IAAM,CACzBC,IAAI,GAAD,OAAKC,IAAL,iBAAiBC,IAAIC,QAArB,eACHC,OAAQ,OACRtD,KAAM4C,IAdH,cAgBDW,EAAOvD,EACX0C,QAAQC,IAAIY,GACZA,EAAOA,EAAKC,QAAO,SAACC,GAClB,GAAIA,EAAEzC,MAAQM,GAAaN,IAIzB,OAHAyC,EAAEnD,WAAa,EACfmD,EAAET,aAAe3B,GAASD,SAC1BqC,EAAEV,WAAa1B,GAASL,IACjByC,EAETxD,EAAQsD,MAGVzE,GAAoB,GA5Bf,wHAFX,0BAwJV4E,qBAAU,WAER,OAAO,WACLrE,EAAY,GACZE,EAAgB,OAEjB,IAGHmE,qBAAU,WAER,OADA9D,EAAc,cACP,WACLA,EAAc,OAEf,IAGH8D,qBAAU,YAER,uCAAC,8BAAAjB,EAAA,6DAEKG,EAAU,CACZe,MAAO,CACL7D,KAAMA,EACN8D,MAnNe,IAqNjBC,QAAS,CACPrD,SAAUA,GACVF,WAAYA,GACZkB,YAAaA,GACbd,SAAUA,GACVE,OAAQA,KAZb,kBAkBwBqC,IAAM,CACzBC,IAAI,GAAD,OAAKC,IAAL,iBAAiBC,IAAIC,QAArB,WACHC,OAAQ,OACRtD,KAAM4C,IArBX,OAkBOkB,EAlBP,OAwBGpB,QAAQC,IAAImB,EAAS9D,KAAK+D,KAE1B5B,GAAgB2B,EAAS9D,KAAKgE,OAI9B/D,EAAQ6D,EAAS9D,KAAK+D,KA9BzB,uHAAD,yDAoCC,CACDjE,EACAgB,GACAC,GACAX,GACAE,GACAkB,GACAd,GACAE,GACAJ,KAKF,IAAMyD,GAAe,WACnB,OACE,oCACE,kBAAC,QAAD,CACE5B,OAAQtD,EACRuD,QAAS,kBAAMtD,GAAqB,KAEpC,kBAAC,cAAD,8BACA,kBAAC,YAAD,MACA,kBAAC,cAAD,KACE,kBAAC,SAAD,CACEuD,UAAU,mBACVC,QAAS,kBAAMxD,GAAqB,KAFtC,aA4LV,OACE,oCAcE,kBAACoD,GAAD,MACA,kBAAC6B,GAAD,MAhMiB,WACnB,GAAIjE,EAAKE,GAAS,CAChB,IAAIgE,EAAOlE,EAAKE,GACZiE,EAAUnE,EAAKE,GAAQiE,QAG3B,OAFAzB,QAAQC,IAAIwB,GAGV,oCACE,kBAAC,QAAD,CACE9B,OAAQpD,EACRqD,QAAS,kBAAMpD,GAAoB,IACnCqD,UAAU,4GAEV,kBAAC,cAAD,CAAaA,UAAU,yCACrB,6BAAM2B,EAAKE,MACX,yCACW,kBAAC,QAAD,KAAQF,EAAKG,QAAgB,MAG1C,kBAAC,YAAD,KACE,yBAAK9B,UAAU,8BAAf,gBAEA,kBAAC,iBAAD,CAAgBA,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,aACA,kBAAC,YAAD,iBACA,kBAAC,YAAD,sBACA,kBAAC,YAAD,yBACA,kBAAC,YAAD,uBACA,kBAAC,YAAD,eACA,kBAAC,YAAD,cACA,kBAAC,YAAD,qBACA,kBAAC,YAAD,iBAGJ,kBAAC,YAAD,KACG4B,EAAQG,KAAI,SAACC,EAAOC,GAAR,OACX,kBAAC,WAAD,CACEjC,UAAS,iDACP9C,GAAe8E,EAAMvD,IACjB,yCACA,QAHG,KAKTyD,IAAKD,EACLhC,QAAS,cAQT,kBAAC,YAAD,CAAWD,UAAU,OACnB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBACVmC,IAAOH,EAAMI,MAAMC,OAAO,kBAKnC,kBAAC,YAAD,KACE,0BAAMrC,UAAU,WACbsC,qBAAWN,EAAMlD,YAItB,kBAAC,YAAD,KACE,0BAAMkB,UAAU,WACbgC,EAAMO,iBAGX,kBAAC,YAAD,KACE,0BAAMvC,UAAU,WACbgC,EAAMQ,iBAGX,kBAAC,YAAD,KACE,0BAAMxC,UAAU,WAAWgC,EAAMS,eAEnC,kBAAC,YAAD,KACE,8BACuB,GAApBT,EAAMjE,WACL,kBAAC,QAAD,+BACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,qCACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,6BACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,iCACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,iCACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,6BACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,0BACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,2BACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,0BACE,KACiB,GAApBiE,EAAMjE,WACL,kBAAC,QAAD,yBACE,KACiB,IAApBiE,EAAMjE,WACL,kBAAC,QAAD,wBACE,KACiB,IAApBiE,EAAMjE,WACL,kBAAC,QAAD,qBACE,KACiB,IAApBiE,EAAMjE,WACL,kBAAC,QAAD,yBACE,KACiB,IAApBiE,EAAMjE,WACL,kBAAC,QAAD,qCACE,KACiB,IAApBiE,EAAMjE,WACL,kBAAC,QAAD,sBACE,OAGR,kBAAC,YAAD,CAAWiC,UAAU,0BACnB,0BAAMA,UAAU,wBACbgC,EAAMU,OAGX,kBAAC,YAAD,KACE,0BAAM1C,UAAU,WAAWgC,EAAMW,cAEnC,kBAAC,YAAD,KACE,kBAAC,SAAD,CACEC,OAAO,UACP3C,QAAS,WACH+B,EAAMa,QACRvD,GAAuB0C,EAAMa,QAC3Bb,EAAMc,UACRtD,GAAuBwC,EAAMc,UAC3Bd,EAAMe,YACRrD,GAAkBsC,EAAMe,YAC1B3D,IAAyB,KAT7B,iBA6Bd,kBAAC,cAAD,SAwBL4D,GAtYD,oCACE,kBAAC,QAAD,CACElD,OAAQX,GACRY,QAAS,WACPP,GAAuB,IACvBF,GAAuB,IACvBI,GAAkB,IAClBN,IAAyB,IAE3BY,UAAU,2GAGV,kBAAC,cAAD,eACA,kBAAC,YAAD,KACE,yBAAKA,UAAU,iCACb,6BACA,yBAAKA,UAAU,wDACW,IAAvBT,GACC,6BACE,yBACEU,QAAS,WACPE,QAAQC,IAAIb,KAEdS,UAAU,qCAJZ,iBASA,uBAAGiD,KAAM1D,GAAqB2D,OAAO,UAUnC,yBACEC,IAAK5D,GACLS,UAAU,gBACVoD,MAAM,MACNC,OAAO,UAIX,KAEoB,IAAvBhE,GACC,6BACE,yBAAKW,UAAU,qCACZ,IADH,eAIA,uBAAGiD,KAAM5D,GAAqB6D,OAAO,UACnC,yBACEC,IAAK9D,GACLW,UAAU,gBACVoD,MAAM,MACNC,OAAO,UAIX,KAEe,IAAlB5D,GACC,6BACE,yBAAKO,UAAU,qCACZ,IADH,QAIA,uBAAGiD,KAAMxD,GAAgByD,OAAO,UAC9B,yBACEC,IAAK1D,GACLO,UAAU,gBACVoD,MAAM,MACNC,OAAO,UAIX,QAIV,kBAAC,cAAD,QAwTJ,yBAAKrD,UAAU,cAEb,yBAAKA,UAAU,IAEb,yBAAKsD,MAAM,gGACT,kBAAC,QAAD,CAAOtD,UAAU,IACf,2CACA,2BACEA,UAAU,2BACVuD,KAAK,OACLC,MAAOrF,GACPsF,SAAU,SAACC,GAAD,OAAOtF,GAAYsF,EAAER,OAAOM,WAG1C,kBAAC,QAAD,CAAOxD,UAAU,IACf,yCACA,2BACEA,UAAU,2BACVuD,KAAK,OACLC,MAAOnF,GACPoF,SAAU,SAACC,GAAD,OAAOpF,GAAUoF,EAAER,OAAOM,WAIxC,yBAAKF,MAAM,kBACT,4BACEA,MAAM,8LACNE,MAAOvF,GACPwF,SAAU,SAACC,GACTxF,GAAYwF,EAAER,OAAOM,SAGvB,4BAAQA,MAAM,GAAGG,UAAQ,EAACC,UAAQ,GAAlC,aAGA,4BAAQJ,MAAM,IAAd,OACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,YAAd,aAGF,yBAAKF,MAAM,uFACT,yBACEA,MAAM,uBACNO,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,kFAId,yBAAKT,MAAM,kBACT,4BACEA,MAAM,8LACNE,MAAOzF,GACP0F,SAAU,SAACC,GACT1F,GAAc0F,EAAER,OAAOM,SAGzB,4BAAQA,MAAM,GAAGG,UAAQ,EAACC,UAAQ,GAAlC,eAGA,4BAAQJ,MAAM,IAAd,OACA,4BAAQI,UAAQ,EAACJ,MAAM,KAAvB,0BAGA,4BAAQA,MAAM,KAAd,gCACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,4BACA,4BAAQA,MAAM,KAAd,wBACA,4BAAQA,MAAM,KAAd,qBACA,4BAAQA,MAAM,KAAd,sBACA,4BAAQA,MAAM,KAAd,qBACA,4BAAQA,MAAM,MAAd,gCACA,4BAAQA,MAAM,MAAd,oBACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,KAAd,oBACA,4BAAQA,MAAM,MAAd,mBACA,4BAAQA,MAAM,MAAd,iBAIF,yBAAKF,MAAM,uFACT,yBACEA,MAAM,uBACNO,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,kFAMd,yBAAKT,MAAM,2BACT,0BAAMA,MAAM,2DACV,yBACEQ,QAAQ,YACRR,MAAM,sCAEN,0BAAMS,EAAE,4HAGZ,0BACEC,SAAU,SAACN,GACTA,EAAEO,iBACFnG,IAAYD,MAGd,2BACE2F,MAAOvE,GACPwE,SAAU,SAACC,GAAD,OAAOxE,GAAewE,EAAER,OAAOM,QACzCU,YAAY,qBACZZ,MAAM,gPAQhB,kBAAC,iBAAD,CAAgBtD,UAAU,QACxB,kBAAC,QAAD,KACE,kBAAC,cAAD,KACE,4BACE,kBAAC,YAAD,gBACA,kBAAC,YAAD,aACA,kBAAC,YAAD,kBACA,kBAAC,YAAD,cACA,kBAAC,YAAD,oBACA,kBAAC,YAAD,0BACA,kBAAC,YAAD,2BAGJ,kBAAC,YAAD,KACGvC,EAAKsE,KAAI,SAACoC,EAAMlC,GAAP,OACR,kBAAC,WAAD,CACEjC,UAAS,iDACP9C,GAAeiH,EAAK1F,IAChB,yCACA,QAHG,KAKTyD,IAAKD,EACLhC,QAAS,WACP9C,EAAegH,EAAK1F,KACpB3B,EAAY,GAEZkC,GAAgBmF,GAChBhE,QAAQC,IAAI,UAAW+D,GACvBnH,EAAgBmH,EAAKC,WAIvB,kBAAC,YAAD,CAAWpE,UAAU,OACnB,yBAAKA,UAAU,8BACb,6BACE,uBAAGA,UAAU,iBAAiBmE,EAAKrC,WAIzC,kBAAC,YAAD,KACE,yBAAK9B,UAAU,iBACb,0BAAMA,UAAU,WACbmC,IAAOgC,EAAK/B,MAAMC,OAAO,eAE3B8B,EAAKE,aACJ,0BAAMrE,UAAU,WACbmC,IAAU,aAAJ,WAAoBgC,EAAKG,OAAQjC,OACtC,WAGF,OAGR,kBAAC,YAAD,KACE,0BAAMrC,UAAU,WAAWmE,EAAKzF,WAElC,kBAAC,YAAD,KACE,0BAAMsB,UAAU,WAAWmE,EAAKI,QAElC,kBAAC,YAAD,KACE,8BACsB,GAAnBJ,EAAKpG,WACJ,kBAAC,QAAD,+BACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,qCACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,iCACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,6BACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,0BACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,2BACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,0BACE,KACgB,GAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,yBACE,KACgB,IAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,wBACE,KACgB,IAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,qBACE,KACgB,IAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,yBACE,KACgB,IAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,qCACE,KACgB,IAAnBoG,EAAKpG,WACJ,kBAAC,QAAD,sBACE,OAiER,kBAAC,YAAD,KACGoG,EAAK3D,WACJ,oCACG2D,EAAK1D,cAQR,qDAOJ,kBAAC,YAAD,KACE,yBAAKT,UAAU,6CACb,kBAAC,IAAD,CACEkC,IAAKiC,EAAK1F,IACV+F,GAAE,+BAA0BL,EAAK1F,IAA/B,YAAsC0F,EAAKC,QAAQ3F,MAErD,kBAAC,SAAD,CACEmE,OAAO,UACP3C,QAAS,aACTD,UAAU,KAHZ,WAQF,kBAAC,SAAD,CACEC,QAAS,WACPrC,EAAUqE,GACVtF,GAAoB,IAEtBiG,OAAO,WALT,mBAeZ,kBAAC,cAAD,KACE,kBAAC,aAAD,CACEjD,aAAcA,GACd8E,eAlzBW,GAmzBXC,MAAM,mBACNjB,SAhzBZ,SAAsBkB,GACpBnH,EAAQmH","file":"static/js/65.ef3a1a3a.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Label,\n  Select,\n  Pagination,\n  Dropdown,\n  Input,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\n// import EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n\nfunction ViewCalls() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [isSetStatusModal, setisSetStatusModal] = useState(false);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [historyModalOpen, setHistoryModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [viewId, setViewId] = useState(\"\");\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n  const [callStatus, setCallStatus] = useState(\"\");\n  const [callType, setCallType] = useState(\"\");\n  const [fromDate, setFromDate] = useState(\"\");\n  const [toDate, setToDate] = useState(\"\");\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Image States\n  const [isHistoryImgViewModal, setIsHistoryImgViewModal] = useState(false);\n  const [goodSpareHistoryImg, setGoodSpareHistoryImg] = useState(\"\");\n  const [defectiveHistoryImg, setDefectiveHistoryImg] = useState(\"\");\n  const [ccfrHistoryImg, setCcfrHistoryImg] = useState(\"\");\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const SetStatusModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isSetStatusModal}\n          onClose={() => setisSetStatusModal(false)}\n        >\n          <ModalHeader>Set Call Status</ModalHeader>\n          <ModalBody>\n            <div className=\"flex-col flex\">\n              <div className=\"font-xl dark:text-white\">Current Status:</div>\n              <Button className=\"font-xl\">Set Status</Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(\"SELECTED\", selectedprod);\n                let payload = {\n                  id: selectedprod._id,\n                  update: {\n                    employeeId: engineer._id,\n                    employeeName: engineer.enggName,\n                    callStatus: 1,\n                  },\n                };\n                try {\n                  let response = await axios({\n                    url: `${API}/call/${Emp.getId()}/ViewCallsg`,\n                    method: \"POST\",\n                    data: payload,\n                  });\n                  let temp = data;\n                  console.log(temp);\n                  temp = temp.filter((c) => {\n                    if (c._id === selectedprod._id) {\n                      c.callStatus = 1;\n                      c.employeeName = engineer.enggName;\n                      c.employeeId = engineer._id;\n                      return c;\n                    }\n                    setData(temp);\n                  });\n                  // console.log(response.data);\n                  setisSetStatusModal(false);\n                } catch (error) {\n                  throw error;\n                }\n              }}\n            >\n              Confirm Assignment\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryImgViewModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isHistoryImgViewModal}\n          onClose={() => {\n            setDefectiveHistoryImg(\"\");\n            setGoodSpareHistoryImg(\"\");\n            setCcfrHistoryImg(\"\");\n            setIsHistoryImgViewModal(false);\n          }}\n          className=\"w-9/12 dark:bg-gray-800 px-5 my-10 bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          // className=\"w-6/12 h-8/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll text-cente items-center justify-center\"\n        >\n          <ModalHeader>Images</ModalHeader>\n          <ModalBody>\n            <div className=\"flex flex-col justify-center \">\n              <hr></hr>\n              <div className=\"flex flex-row justify-evenly flex-wrap items-center \">\n                {defectiveHistoryImg != \"\" ? (\n                  <div>\n                    <div\n                      onClick={() => {\n                        console.log(defectiveHistoryImg);\n                      }}\n                      className=\"text-lg font-semibold my-2 w-full\"\n                    >\n                      Replaced Item\n                    </div>\n\n                    <a href={defectiveHistoryImg} target=\"_blank\">\n                      {/* <figure\n                      onMouseMove={handleMouseMove}\n                      style={{\n                        backgroundImage: `url(${defectiveHistoryImg})`,\n                        backgroundPosition: `${defectiveHistoryImgPos}`,\n                      }}\n                    >\n                      <img src={defectiveHistoryImg} width=\"350\" height=\"350\" />\n                    </figure> */}\n                      <img\n                        src={defectiveHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {goodSpareHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      Replaced by\n                    </div>\n                    <a href={goodSpareHistoryImg} target=\"_blank\">\n                      <img\n                        src={goodSpareHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {ccfrHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      CCFR\n                    </div>\n                    <a href={ccfrHistoryImg} target=\"_blank\">\n                      <img\n                        src={ccfrHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            {/* <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setDefectiveHistoryImg(\"\");\n                setGoodSpareHistoryImg(\"\");\n                setCcfrHistoryImg(\"\");\n                setIsHistoryImgViewModal(false);\n              }}\n            >\n              Okay!\n            </Button> */}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"View Calls\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          callType: callType,\n          callStatus: callStatus,\n          searchquery: searchquery,\n          fromDate: fromDate,\n          toDate: toDate,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n\n        console.log(response.data.out);\n\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [\n    page,\n    Business,\n    product,\n    refresh,\n    callStatus,\n    searchquery,\n    fromDate,\n    toDate,\n    callType,\n  ]);\n\n  // console.log(selectedprod);\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>Updated Successfully!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryModal = () => {\n    if (data[viewId]) {\n      let item = data[viewId];\n      let history = data[viewId].history;\n      console.log(history);\n\n      return (\n        <>\n          <Modal\n            isOpen={historyModalOpen}\n            onClose={() => setHistoryModalOpen(false)}\n            className=\"w-9/12  dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              <div>{item.name}</div>\n              <div>\n                Call No: <Badge>{item.callNo}</Badge>{\" \"}\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"font-semibold text-xl my-2\">Call History</div>\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody>\n                    {history.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                          activerowid == entry._id\n                            ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                            : \"white\"\n                        } `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {entry.callStatus == 0 ? (\n                              <Badge>Pending For Allocation</Badge>\n                            ) : null}\n                            {entry.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {entry.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {entry.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {entry.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {entry.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {entry.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {entry.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {entry.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                            {entry.callStatus == 12 ? (\n                              <Badge>Spare Taken CMRR</Badge>\n                            ) : null}\n                            {entry.callStatus == 13 ? (\n                              <Badge>Pending For Spare Collection</Badge>\n                            ) : null}\n                            {entry.callStatus == 14 ? (\n                              <Badge>Standby Given</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"flex flex-row max-w-sm\">\n                          <span className=\"w-full overflow-auto\">\n                            {entry.note}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SetStatusModal />\n      <ReviewSubmit />\n      {HistoryModal()}\n      {HistoryImgViewModal()}\n\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            <Label className=\"\">\n              <span>From Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1\"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n              />\n            </Label>\n            <Label className=\"\">\n              <span>To Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1\"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n              />\n            </Label>\n\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={callType}\n                onChange={(e) => {\n                  setCallType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Call Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"internal\">Internal</option>\n                <option value=\"external\">External</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={callStatus}\n                onChange={(e) => {\n                  setCallStatus(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Call Status\n                </option>\n                <option value=\"\">All</option>\n                <option selected value=\"0\">\n                  Pending For Allocation\n                </option>\n                <option value=\"1\">Pending for Percall Approval</option>\n                <option value=\"2\">Pending for Response</option>\n                <option value=\"3\">Pending for OEM Response</option>\n                <option value=\"4\">Pending for 2nd Response</option>\n                <option value=\"5\">Pending for Customer</option>\n                <option value=\"6\">Under Observation</option>\n                <option value=\"7\">Pending for Others</option>\n                <option value=\"8\">Pending for Spare</option>\n                <option value=\"13\">Pending For Spare Collection</option>\n                <option value=\"12\">Spare Taken CMRR</option>\n                <option value=\"14\"> Standby Given</option>\n                <option value=\"9\">Spare in Transit</option>\n                <option value=\"10\">Cancelled Calls</option>\n                <option value=\"11\">Closed Calls</option>\n                {/* <option value=\"-1\">Allocated</option> */}\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search by Call No.\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n          {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Assigned Employee</TableCell>\n                <TableCell>Update / History</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((call, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == call._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(call._id);\n                    setBBarOpen(1);\n                    // console.log(\"the id is \" + call._id);\n                    setSelectedProd(call);\n                    console.log(\"SELECTD\", call);\n                    setAssetDetails(call.assetId);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{call.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm\">\n                        {moment(call.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                      {call.regtimestamp ? (\n                        <span className=\"text-xs\">\n                          {moment(`${\"2018-04-02\"}T${call.time}`).format(\n                            \"h:mm a\"\n                          )}\n                        </span>\n                      ) : null}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span>\n                      {call.callStatus == 0 ? (\n                        <Badge>Pending For Allocation</Badge>\n                      ) : null}\n                      {call.callStatus == 1 ? (\n                        <Badge>Pending for Percall Approval</Badge>\n                      ) : null}\n                      {call.callStatus == 2 ? (\n                        <Badge>Pending for Response</Badge>\n                      ) : null}\n                      {call.callStatus == 3 ? (\n                        <Badge>Pending for OEM Response</Badge>\n                      ) : null}\n                      {call.callStatus == 4 ? (\n                        <Badge>Pending for 2nd Response</Badge>\n                      ) : null}\n                      {call.callStatus == 5 ? (\n                        <Badge>Pending for Customer</Badge>\n                      ) : null}\n                      {call.callStatus == 6 ? (\n                        <Badge>Under Observation</Badge>\n                      ) : null}\n                      {call.callStatus == 7 ? (\n                        <Badge>Pending for Others</Badge>\n                      ) : null}\n                      {call.callStatus == 8 ? (\n                        <Badge>Pending for Spare</Badge>\n                      ) : null}\n                      {call.callStatus == 9 ? (\n                        <Badge>Spare in Transit</Badge>\n                      ) : null}\n                      {call.callStatus == 10 ? (\n                        <Badge>Cancelled Calls</Badge>\n                      ) : null}\n                      {call.callStatus == 11 ? (\n                        <Badge>Closed Calls</Badge>\n                      ) : null}\n                      {call.callStatus == 12 ? (\n                        <Badge>Spare Taken CMRR</Badge>\n                      ) : null}\n                      {call.callStatus == 13 ? (\n                        <Badge>Pending For Spare Collection</Badge>\n                      ) : null}\n                      {call.callStatus == 14 ? (\n                        <Badge>Standby Given</Badge>\n                      ) : null}\n                    </span>\n                  </TableCell>\n                  {/* <TableCell> */}\n                  {/* <div className=\"flex \">\n                      {/* <Label className=\"w-full\"> */}\n                  {/* <Select\n                        className=\"inline\"\n                        onChange={(e) => {\n                          // setAccType(parseInt(e.target.value));\n                          let temp = data;\n                          console.log(temp);\n                          temp = temp.filter((c) => {\n                            if (c._id === call._id) {\n                              c.callStatus = e.target.value;\n                              return c;\n                            } else return c;\n                          });\n                          setData(temp);\n                        }}\n                        value={call.callStatus}\n                      >\n                        <option value=\"0\">Not Allocated</option>\n                        <option value=\"1\">Pending for Percall Approval</option>\n                        <option value=\"2\"> Pending for Response</option>\n                        <option value=\"3\"> Pending for OEM Response</option>\n                        <option value=\"4\"> Pending for 2nd Response</option>\n                        <option value=\"5\"> Pending for Customer</option>\n                        <option value=\"6\"> Under Observation</option>\n                        <option value=\"7\"> Pending for Others</option>\n                        <option value=\"8\"> Pending for Spare</option>\n                        <option value=\"9\"> Spare in Transit</option>\n                        <option value=\"10\"> Cancelled Calls</option>\n                        <option value=\"11\"> Closed Calls</option>\n                      </Select> */}\n                  {/* </Label> */}\n                  {/* <div\n                        className=\"p-1 m-2 dark:hover:bg-green-700 hover:bg-green-200 rounded-full text-green-400\"\n                        onClick={async () => {\n                          let payload = {\n                            id: call._id,\n                            update: {\n                              callStatus: call.callStatus,\n                            },\n                          };\n                          try {\n                            let response = await axios({\n                              url: `${API}/call/${Emp.getId()}/assignEngg`,\n                              method: \"POST\",\n                              data: payload,\n                            });\n                            console.log(\"updated\");\n                            setIsReviewModalOpen(true);\n                          } catch (error) {\n                            throw error;\n                          }\n                        }}\n                      >\n                        <TickIcon\n                          className=\"w-5 h-5 fill-current\"\n                          aria-hidden=\"true\"\n                        />\n                      </div> */}\n                  {/* </div> */}\n                  {/* </TableCell> */}\n                  <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        {call.employeeName}\n                        {/* <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\" onClick={()=>setIsEnggModalOpen(true)} className=\"rounded-full mx-2 \">\n                       \n                          <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                        \n                      </Button> */}\n                      </>\n                    ) : (\n                      <>\n                        {/* <Button onClick={()=>setIsEnggModalOpen(true)}> */}\n                        Not Assigned\n                        {/* </Button> */}\n                      </>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex justify-start items-center space-x-2\">\n                      <Link\n                        key={call._id}\n                        to={`/app/call/updatecall/${call._id}/${call.assetId._id}`}\n                      >\n                        <Button\n                          layout=\"outline\"\n                          onClick={() => {}}\n                          className=\" \"\n                        >\n                          Update\n                        </Button>\n                      </Link>\n                      <Button\n                        onClick={() => {\n                          setViewId(i);\n                          setHistoryModalOpen(true);\n                        }}\n                        layout=\"outline\"\n                      >\n                        History\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default ViewCalls;\n"],"sourceRoot":""}