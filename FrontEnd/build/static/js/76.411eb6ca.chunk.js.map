{"version":3,"sources":["pages/Inventory/PurchaseHistory.js"],"names":["PurchaseHistory","useContext","TopBarContext","setTopHeading","topheading","useState","page","setPage","data","setData","refresh","setRefresh","type","setType","stocktype","location","setLocation","ToLocation","condition","selectedprod","currItem","setcurrItem","historyModalOpen","setHistoryModalOpen","searchquery","setSearchQuery","vendorsearchquery","setVendorSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","useEffect","a","console","log","payload","pages","limit","filters","systype","axios","url","API","Emp","getId","method","response","out","total","downloadInv","csv","array","map","invoice","tcount","invnumber","moment","invdate","format","purchlocation","invtype","invItems","i","tt","capitalize","name","sno","wty","expirydate","purchtype","vendor","rate","taxcategory","Number","nettax","toFixed","amount","tcs","invamount","csvData","Blob","saveAs","isOpen","onClose","className","user","_id","key","onClick","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","layout","length","resultsPerPage","label","p"],"mappings":"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","file":"static/js/76.411eb6ca.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n// import PrintLST from \"./PrintLST\";\n\nfunction PurchaseHistory() {\n  // table variable styles\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [stocktype, setStocktype] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n  const [currItem, setcurrItem] = useState([]);\n\n  const [historyModalOpen, setHistoryModalOpen] = useState(false);\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n  const [vendorsearchquery, setVendorSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Purchase History\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          systype: type,\n          location: location,\n          ////////////////\n          searchquery: searchquery,\n          vendorsearchquery: vendorsearchquery,\n          stocktype: stocktype,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/inventory/${Emp.getId()}/getallhistory`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation, condition, type, refresh, stocktype]);\n\n  console.log(selectedprod);\n\n  const downloadInv = async () => {\n    let csv =\n      \"Sl No,Stock Location,Stock Type,Sys-Type,Category,Description,Serial Number,Warranty,WTY Expiry Date,Status,Purc.Type,Purc Location,Inv.Type,Vendor,Inv No,Inv Date,Rate,Tax Category,GST,Amount,TCS,Net Amount\\n\";\n\n    let array;\n    let payload = {\n      pages: {\n        page: 1,\n        limit: 10000000000,\n      },\n      filters: {\n        systype: type,\n        location: location,\n        searchquery: searchquery,\n        vendorsearchquery: vendorsearchquery,\n        stocktype: stocktype,\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getallhistory`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      array = response.data.out;\n      // return response.data;\n    } catch (error) {\n      throw error;\n    }\n    array.map((invoice, tcount) => {\n      csv =\n        csv +\n        `Invoice No: ${invoice.invnumber},Date: ${moment(\n          invoice.invdate\n        ).format(\"DD-MM-YYYY\")},Inv Location: ${\n          invoice.location\n        },Purchase Type: ${invoice.purchlocation},Inv Type: ${\n          invoice.invtype\n        }\\n`;\n\n      // \"Sl No,Stock Location,Stock Type,Sys-Type,Category,Description,Serial Number,Warranty,WTY Expiry Date,Status,\n      // Purc.Type,Purc Location,Inv.Type,Vendor,Inv No,Inv Date,Rate,Tax Category,Net Tax,Amount,TCS,Net Amount\\n\";\n\n      invoice.invItems.map((i, tt) => {\n        csv =\n          csv +\n          `\"${tt + 1}\",\"${i.location}\",\"${capitalize(\n            i.stocktype\n          )}\",\"${capitalize(i.systype)}\",\"${capitalize(i.type)}\",\"${i.name}\",\"${\n            i.sno\n          }\",\"${i.wty}\",\"${i.expirydate}\",\"${i.condition}\",\"${i.purchtype}\",\"${\n            i.purchlocation\n          }\",\"${i.invtype}\",\"${i.vendor}\",\"${invoice.invnumber}\",\"${moment(\n            invoice.invdate\n          ).format(\"DD-MM-YYYY\")}\",\"${i.rate}\",\"${i.taxcategory}\",\"${Number(\n            i.nettax\n          ).toFixed(2)}\",\"${i.amount}\",\"${Number(i.tcs).toFixed(2)}\",\"${Number(\n            i.invamount\n          ).toFixed(2)}\",\\n`;\n      });\n    });\n    // console.log(csv);\n    const csvData = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    saveAs(csvData, \"Inventory.csv\");\n  };\n\n  const InvTable = () => {\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3 \">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Category</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Invoice Number</TableCell>\n                  <TableCell>Inv Date</TableCell>\n                  <TableCell>Wty Expiry</TableCell>\n                  <TableCell>Status</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {currItem.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activeRowID == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowID(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">\n                            {capitalize(user.type)}\n                          </p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">{user.sno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.invdate).format(\"DD/MM/YY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      {/* <span className=\"text-sm\">{moment(user.expirydate).format(\"DD/MM/YY\")}</span> */}\n                      <span className=\"text-sm\">{user.expirydate}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <Badge\n                        type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                      >\n                        {user.condition}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  const InventoryViewModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={historyModalOpen}\n          onClose={() => setHistoryModalOpen(false)}\n          className=\"w-9/12 h-h-159 overflow-y-auto dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg \"\n        >\n          <ModalHeader className=\"flex flex-row justify-between text-xl\">\n            {/* <div>{item.name}</div> */}\n            <div>Inventory Purchased</div>\n          </ModalHeader>\n          <ModalBody>\n            {/* <div className=\"font-semibold text-xl my-2\">Call History</div> */}\n            {/* ------------------------- Table ------------------------------ */}\n            {InvTable()}\n          </ModalBody>\n          <ModalFooter></ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {InventoryViewModal()}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"item\">Item</option>\n                <option value=\"full system\">Full System</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search Invoice Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={vendorsearchquery}\n                  onChange={(e) => setVendorSearchQuery(e.target.value)}\n                  placeholder=\"Search Vendor\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n\n            <div className=\"flex justify-end items-end \">\n              <Button\n                onClick={() => {\n                  downloadInv();\n                  // console.log(\"export\");\n                }}\n                layout=\"outline\"\n              >\n                Export\n              </Button>\n            </div>\n            {/* <div className=\"flex justify-end items-end \">\n              <Button\n                onClick={async () => {\n                  // console.log(\"export\");\n                  let payload = {};\n                  try {\n                    let response = await axios({\n                      url: `${API}/inventory/${Emp.getId()}/fixpurch`,\n                      method: \"POST\",\n                      data: payload,\n                    });\n                    console.log(response.data.out);\n\n                    // return response.data;\n                  } catch (error) {\n                    throw error;\n                  }\n                }}\n                layout=\"outline\"\n              >\n                Fix Inventory\n              </Button>\n            </div> */}\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell> Type</TableCell>\n                <TableCell>Vendor</TableCell>\n                <TableCell>Inventory No.</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>No.Items</TableCell>\n                <TableCell>\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => setActiveRowID(-1)}\n                  >\n                    Items\n                  </span>\n                </TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600   ${\n                    activeRowID == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    // setActiveRowID(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">\n                          {\" \"}\n                          <p className=\"font-semibold\">{user.purchtype}</p>\n                        </p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.vendor}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {\" \"}\n                      {moment(user.invdate).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invItems.length}</span>\n                  </TableCell>\n                  {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n\n                  <TableCell className=\"text-center \">\n                    <Button\n                      onClick={\n                        () => {\n                          console.log(activeRowID);\n                          if (activeRowID == i) {\n                            setActiveRowID(-1);\n                          } else setActiveRowID(i);\n                          setcurrItem(user.invItems);\n                          setHistoryModalOpen(true);\n                        }\n\n                        // console.log(ac)\n                        // {activeRowID == i ? InvTable(user.invItems) : null}\n                      }\n                      className=\"rounded-lg m-1\"\n                    >\n                      View\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default PurchaseHistory;\n"],"sourceRoot":""}