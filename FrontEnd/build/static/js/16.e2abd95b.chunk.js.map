{"version":3,"sources":["components/Modal/AddUnitModal.js","pages/Inventory/PurchaseInventory.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Modal/CustomerCreateModal.js","helpers/unitHelper.js"],"names":["AddUnitModal","isModalOpen","setIsModalOpen","account","setAccount","customer","setCustomer","useState","customers","setCustomers","accounts","setAccounts","tabIndex","setTabIndex","useEffect","Axios","post","API","search","role","then","users","console","log","data","temp","map","user","push","catch","err","pickCustomer","a","_id","customerName","name","customerId","accs","pickAccount","accountName","isOpen","onClose","selectedIndex","onSelect","ind","i","key","className","onClick","type","PurchaseInventory","setTopHeading","useContext","TopBarContext","calculate","setCalculate","datecalculate","setDateCalculate","calnum","setCalnum","isVendorModalopen","setIsVendorModalopen","vendors","setVendors","ismessageModal","setIsmessageModal","modalMessage","setModalMessage","aadharNo","PANNo","GSTNo","selectedVendor","setselectedVendor","thebval","purchtype","vendor","invnumber","invdate","moment","format","location","invtype","gstno","panno","aadharno","purchlocation","totalInvoice","vendorId","basevalues","setBaseValues","histtype","date","callId","assetId","status","note","history","invdetails","sno","condition","taxcategory","taxperc","rate","igst","cgst","sgst","nettax","amount","tcs","invamount","wty","expirydate","brand","model","systype","stocktype","caseId","values","setValues","setErr","submitItems","flag","value","j","ids","newitems","item","url","Emp","getId","method","histdata","invItems","response","message","payload","filters","searchquery","axios","out","getVendorList","newlist","parseInt","parseFloat","add","subtract","onChange","e","target","selected","disabled","layout","BasicForm","num","newitem","filter","fill","aria-hidden","toLowerCase","valid","readOnly","theperc","slice","aria-label","aria-haspopup","length","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","CustomerCreatetModal","getCustomers","unitCreate","newunit","unit","error","errors"],"mappings":"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","file":"static/js/16.e2abd95b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\nexport default function AddUnitModal({\n  isModalOpen,\n  setIsModalOpen,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  useEffect(() => {\n    Axios.post(`${API}/customer/customers`, { search: \"\", role: 1 })\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setCustomers(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select {tabIndex == 0 ? <>Customer</> : <>Account</>}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport axios from \"axios\";\nimport { API } from \"../../backendapi\";\nimport moment from \"moment\";\nimport { Card, CardBody } from \"@windmill/react-ui\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\nimport {\n  Input,\n  HelperText,\n  Label,\n  Button,\n  Badge,\n  Select,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Pagination,\n} from \"@windmill/react-ui\";\n\nimport { signup, signin, authenticate } from \"../../helpers/auth\";\nimport CustomerCreateModal from \"../../components/Modal/CustomerCreateModal\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport { resetIdCounter } from \"react-tabs\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { unitCreate } from \"../../helpers/unitHelper\";\nimport AddUnitModal from \"../../components/Modal/AddUnitModal\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport { CloseIcon } from \"../../icons\";\n\n/////////////----------------->>>>>> bug <<<<<------------customerList refresh--------------------------\n\nfunction PurchaseInventory() {\n  const { setTopHeading } = useContext(TopBarContext);\n  const [flow, setFlow] = useState(\"basic\");\n  const [calculate, setCalculate] = useState(false);\n  const [datecalculate, setDateCalculate] = useState(false);\n  const [calnum, setCalnum] = useState(-1);\n  const [isVendorModalopen, setIsVendorModalopen] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const [ismessageModal, setIsmessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n  const [selectedVendor, setselectedVendor] = useState({\n    _id: \"\",\n    name: \"\",\n    aadharNo: \"\",\n    PANNo: \"\",\n    GSTNo: \"\",\n  });\n\n  const thebval = {\n    purchtype: \"B2B\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: moment().format(),\n    location: \"Trivandrum\",\n    invtype: \"Material\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"Local\",\n    totalInvoice: \"0\",\n    vendorId: \"\",\n  };\n  const [basevalues, setBaseValues] = useState(thebval);\n\n  const [history, setHistory] = useState([\n    {\n      histtype: \"purchase\",\n      date: moment().format(),\n      location: basevalues.location,\n      callId: \"Nil\",\n      assetId: \"Nil\",\n      status: \"Good\",\n      note: \"Inventory Purchased\",\n    },\n  ]);\n\n  const invdetails = {\n    type: \"\",\n    name: \"\",\n    // assetsIdHistory: \"\",\n    // assetId: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    taxcategory: \"GST 18%\",\n    taxperc: \"\",\n    rate: \"\",\n    igst: \"0\",\n    cgst: \"0\",\n    sgst: \"0\",\n    nettax: \"0\",\n    amount: \"0\",\n    tcs: \"0\",\n    invamount: \"0\",\n    wty: \"\",\n    expirydate: \"\",\n    //-------------------------\n    purchtype: \"\",\n    vendorId: \"\",\n    vendor: \"\",\n    invnumber: \"\",\n    invdate: moment().format(),\n    location: \"\",\n    invtype: \"\",\n    gstno: \"\",\n    panno: \"\",\n    aadharno: \"\",\n    purchlocation: \"\",\n\n    brand: \"\",\n    model: \"\",\n    systype: \"item\",\n    stocktype: \"Purchased\",\n\n    //-------\n    caseId: \"imprest\",\n  };\n  const [values, setValues] = useState([invdetails]);\n\n  const [err, setErr] = useState({\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"\",\n    location: \"\",\n    invnumber: \"\",\n  });\n\n  const submitItems = async () => {\n    let flag = false;\n    if (selectedVendor._id == \"\") {\n      setModalMessage(\"Please select vendor\");\n      setIsmessageModal(true);\n      return;\n    }\n    values.map((value) => {\n      if (value.name === \"\" || value.sno === \"\") {\n        //   setIsReqFieldModal(true);\n        setModalMessage(`Required fields not filled!`);\n        setIsmessageModal(true);\n        console.log(\"missing inputs\");\n        flag = true;\n      }\n    });\n\n    values.map((i) => {\n      values.map((j) => {\n        console.log(i.sno, j.sno);\n        if (i != j && i.sno == j.sno) {\n          setModalMessage(`Serial numbers have to be unique!`);\n          setIsmessageModal(true);\n          console.log(\"serial num same\");\n          flag = true;\n        }\n      });\n    });\n    if (flag == true) return;\n    let ids = [];\n    console.log(\"Submission Start\");\n    const newitems = [...values];\n    newitems.map((item) => {\n      item.purchtype = basevalues.purchtype;\n      item.vendorId = selectedVendor._id;\n      item.vendor = selectedVendor.name;\n      item.invnumber = basevalues.invnumber;\n      item.invdate = basevalues.invdate;\n      item.location = basevalues.location;\n      item.invtype = basevalues.invtype;\n      item.gstno = selectedVendor.GSTNo;\n      item.panno = selectedVendor.PANNo;\n      item.aadharno = selectedVendor.aadharNo;\n      item.purchlocation = basevalues.purchtype;\n      item.history = history;\n    });\n    console.log(newitems);\n    await Axios({\n      url: `${API}/inventory/${Emp.getId()}/createitems`,\n      method: \"POST\",\n      data: newitems,\n    })\n      .then((data) => {\n        console.log(\"Added\", data);\n        data.data.map((i) => ids.push(i._id));\n        // setIsReviewModalOpen(true);\n\n        console.log(ids);\n        let histdata = { ...basevalues, invItems: ids };\n\n        Axios({\n          url: `${API}/inventory/${Emp.getId()}/createpurchasehistory`,\n          method: \"POST\",\n          data: histdata,\n        })\n          .then((data) => {\n            console.log(\"hisory added\", data);\n            setValues([invdetails]);\n            setBaseValues(thebval);\n            setErr({\n              type: \"\",\n              name: \"\",\n              sno: \"\",\n              condition: \"\",\n              location: \"\",\n              invnumber: \"\",\n            });\n            setModalMessage(\"Item(s) Added\");\n            setIsmessageModal(true);\n          })\n          .catch((err) => {\n            console.log(\"Purchase Hisry err\", err.response);\n            setErr({ ...err });\n          });\n      })\n      .catch((err) => {\n        console.log(\"INV err\", err.response);\n\n        if (err.response) setModalMessage(err.response.data.message);\n        setIsmessageModal(true);\n        setErr({ ...err });\n      });\n  };\n\n  async function getVendorList() {\n    let payload = {\n      filters: {\n        searchquery: \"\",\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/vendor/${Emp.getId()}/getAll`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setVendors(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n  useEffect(() => {\n    getVendorList();\n  }, []);\n  // ----------------------Heading Use Effect-------------\n\n  useEffect(() => {\n    setTopHeading(\"Purchase Inventory\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // ------------------- Calculations----------------------------------\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(basevalues,values);\n    let newlist = [...values];\n\n    if (basevalues.purchlocation == \"Local\" && calnum != -1) {\n      newlist[calnum].sgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].cgst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 200);\n      newlist[calnum].nettax =\n        parseInt(newlist[calnum].sgst) + parseInt(newlist[calnum].cgst);\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    } else if (calnum != -1) {\n      newlist[calnum].igst =\n        parseInt(newlist[calnum].rate) *\n        (parseInt(newlist[calnum].taxperc) / 100);\n      newlist[calnum].nettax = newlist[calnum].igst;\n\n      newlist[calnum].sgst = 0;\n      newlist[calnum].cgst = 0;\n      newlist[calnum].amount =\n        parseFloat(newlist[calnum].rate) + parseFloat(newlist[calnum].nettax);\n\n      // setValues(newlist);\n    }\n\n    if (calnum != -1) {\n      newlist[calnum].tcs = parseFloat(newlist[calnum].amount) * 0.001;\n\n      newlist[calnum].invamount =\n        parseFloat(newlist[calnum].amount) + parseFloat(newlist[calnum].tcs);\n\n      newlist[calnum].expirydate = moment().format(\"DD-MM-YYYY\");\n      // console.log(basevalues.totalInvoice, newlist[calnum].invamount);\n      // console.log(\n      //   parseFloat(basevalues.totalInvoice) +\n      //     parseFloat(newlist[calnum].invamount)\n      // );\n\n      let newbaseval = basevalues;\n      // newbaseval.totalInvoice=(\n      //   parseFloat(basevalues.totalInvoice) +\n      //     parseFloat(newlist[calnum].invamount)\n      // ).toString();\n\n      // let val =\n      //   parseFloat(basevalues.totalInvoice) +\n      //   parseFloat(newlist[calnum].invamount);\n\n      // console.log(newbaseval)\n      setBaseValues(newbaseval);\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [calculate]);\n\n  //   const handleChange = (name) => (e) => {\n  //     setValues({ ...values, [name]: e.target.value });\n  //   };\n\n  // ---------Date Calculations ------------\n\n  useEffect(() => {\n    // console.log(\"hello\");\n    // console.log(calnum);\n    let newlist = [...values];\n\n    if (calnum != -1) {\n      switch (newlist[calnum].wty) {\n        case \"0D\":\n          newlist[calnum].expirydate = moment(basevalues.invdate).format(\n            \"DD-MM-YYYY\"\n          );\n\n          break;\n        case \"3M\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(3, \"M\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"6M\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(6, \"M\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"1Y\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(1, \"Y\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"2Y\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(2, \"Y\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"3Y\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(3, \"Y\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"4Y\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(4, \"Y\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"5Y\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(5, \"Y\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n        case \"20Y\":\n          newlist[calnum].expirydate = moment(basevalues.invdate)\n            .add(20, \"Y\")\n            .subtract(1, \"days\")\n            .format(\"DD-MM-YYYY\");\n\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    setValues(newlist);\n\n    return () => {\n      console.log(\"Calculations done!\");\n    };\n  }, [datecalculate]);\n\n  const handleBaseChange = (name) => (e) => {\n    setBaseValues({ ...basevalues, [name]: e.target.value });\n  };\n\n  //   const ReviewSubmit = () => {\n  //     return (\n  //       <>\n  //         <Modal\n  //           isOpen={isReviewModalOpen}\n  //           onClose={() => setIsReviewModalOpen(false)}\n  //         >\n  //           <ModalHeader>Information updated Successfully!</ModalHeader>\n  //           <ModalBody></ModalBody>\n  //           <ModalFooter>\n  //             <Button\n  //               className=\"w-full sm:w-auto\"\n  //               // onClick={() => setIsReviewModalOpen(false)}\n  //               onClick={() => setIsReviewModalOpen(false)}\n  //             >\n  //               Okay!\n  //             </Button>\n  //           </ModalFooter>\n  //         </Modal>\n  //       </>\n  //     );\n  //   };\n\n  const MessageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={ismessageModal} onClose={() => setIsmessageModal(false)}>\n          <ModalHeader></ModalHeader>\n          <ModalBody>{modalMessage}</ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsmessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n  // Vendor PICK\n\n  const VendorModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isVendorModalopen}\n          onClose={() => setIsVendorModalopen(false)}\n        >\n          <ModalHeader>Pink Vendor</ModalHeader>\n          <ModalBody>\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Customer</TableCell>\n                    {/* <TableCell>Unit</TableCell> */}\n                    {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n                  </tr>\n                </TableHeader>\n                <TableBody>\n                  {vendors.map((user, i) => (\n                    <TableRow\n                      key={i}\n                      className=\"hover:bg-purple-900 \"\n                      onClick={() => {\n                        console.log(user);\n                        setselectedVendor(user);\n                        setIsVendorModalopen(false);\n                      }}\n                    >\n                      <TableCell>\n                        <div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsVendorModalopen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  //   Basic Form\n\n  const BasicForm = () => {\n    return (\n      <div className=\"px-4 py-3 mt-4 mb-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold\">\n          <span>\n            Purchase Information Total Invoice Amount{basevalues.totalInvoice}\n          </span>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* -----Row 1 --------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={basevalues.purchtype}\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, purchtype: e.target.value });\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Purchase Type\n                </option>\n                <option value=\"B2B\">B2B</option>\n                <option value=\"B2C\">B2C</option>\n              </Select>\n            </Label>\n          </div>\n\n          {/* ---------------- */}\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, location: e.target.value });\n                }}\n              >\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({\n                    ...basevalues,\n                    purchlocation: e.target.value,\n                  });\n\n                  let newlist = [...values];\n                  newlist.map((item, i) => {\n                    item.taxcategory = \"\";\n                    item.taxperc = \"\";\n                  });\n                  setValues([invdetails]);\n                }}\n              >\n                <option value=\"Local\">Local</option>\n                <option value=\"IGST\">IGST</option>\n              </Select>\n            </Label>\n          </div>\n\n          {/* -------------------- */}\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={basevalues.invnumber}\n                onChange={handleBaseChange(\"invnumber\")}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Date*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"date\"\n                value={basevalues.invdate}\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, invdate: e.target.value });\n                  setDateCalculate(!datecalculate);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Type*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, invtype: e.target.value });\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Invoice Type\n                </option>\n                <option value=\"Material\">Material</option>\n                <option value=\"AMC\">AMC</option>\n                <option value=\"Addtl Wty\">Addtl Wty</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full  \">\n            <Label className=\"w-full\">\n              <Button\n                layout=\"outline\"\n                className=\"-mb-10 w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </Label>\n          </div>\n        </div>\n        {/* ------------------------Row 2-------------------------- */}\n        {/* <div className=\"flex-row flex  space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({ ...basevalues, location: e.target.value });\n                }}\n              >\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </Select>\n            </Label>\n          </div>\n          \n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Purchase Location*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  setBaseValues({\n                    ...basevalues,\n                    purchlocation: e.target.value,\n                  });\n\n                  let newlist = [...values];\n                  newlist.map((item, i) => {\n                    item.taxcategory = \"\";\n                    item.taxperc = \"\";\n                  });\n                  setValues([invdetails]);\n                }}\n              >\n                <option value=\"Local\">Local</option>\n                <option value=\"IGST\">IGST</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full  \">\n            <Label className=\"w-full\">\n              <Button\n                layout=\"outline\"\n                className=\"-mb-10 w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </Label>\n          </div>\n          \n         \n          \n        </div> */}\n\n        {/* -------------------------ROw 3-------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <Label className=\" mt-3\">Vendor Name:{selectedVendor.name}</Label>\n          <Label className=\" ml-3 mt-3\">GST No. {selectedVendor.GSTNo}</Label>\n          {/* <Label className=\" ml-3 mt-3\">\n          PAN No. {selectedVendor.PANNo}\n          </Label>\n          <Label className=\" ml-3 mt-3\">\n          Aadhar No. {selectedVendor.aadharNo}\n          </Label> */}\n        </div>\n      </div>\n    );\n  };\n\n  const ItemForm = (num) => {\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span>{\" \"}\n          <div\n            layout=\"outline\"\n            onClick={() => {\n              let newitem = [...values];\n              newitem = newitem.filter((item, i) => {\n                if (i != num) return item;\n              });\n              setValues(newitem);\n            }}\n            className=\"border-gray-100 rounded-full cursor pointer\"\n          >\n            <CloseIcon\n              fill=\"lightgray\"\n              className=\"w-5 h-5 cursor-pointer \"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].systype}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].systype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Type\n                </option>\n                <option value=\"item\">Item</option>\n                <option value=\"full system\">Full System</option>\n              </Select>\n            </Label>\n          </div>\n          {values[num].systype == \"item\" ? (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={values[num].type}\n                  onChange={(e) => {\n                    let newlist = [...values];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value.toLowerCase();\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"mouse\">Mouse</option>\n                  <option value=\"keyboard\">Keyboard</option>\n                  <option value=\"monitor\">Monitor</option>\n                  <option value=\"cpu\">Cpu</option>\n                  <option value=\"ram\">Ram</option>\n                  <option value=\"fan\">Fan</option>\n                  <option value=\"motherboard\">Motherboard</option>\n                  <option value=\"smps\">SMPS</option>\n                  <option value=\"hdd\">HDD</option>\n                  <option value=\"gcard\">Gcard</option>\n                  <option value=\"enetcard\">Enet Card</option>\n                  <option value=\"serialcard\">Serial Card</option>\n                  <option value=\"paralellcard\">Paralell Card</option>\n                  <option value=\"opticaldrive\">Optical Drive</option>\n                  <option value=\"others\">Others</option>\n\n                  {/* <option value=\"Mouse\">Mouse</option>\n                    <option value=\"Keyboard\">Keyboard </option>\n                    <option value=\"Monitor\">Monitor </option>\n                    <option value=\"Cpu\">Cpu</option>\n                    <option value=\"laptop\">Laptop</option>\n                    <option value=\"laser\">Laser</option>\n                    <option value=\"LMP\">LMP</option>\n                    <option value=\"module\">Module</option>\n                    <option value=\"router\">Router</option>\n                    <option value=\"scanner\">Scanner</option>\n                    <option value=\"server\">Server</option>\n                    <option value=\"desktop\">Desktop</option>\n                    <option value=\"storage\">Storage</option>\n                    <option value=\"switch\">Switch</option>\n                    <option value=\"UPS\">UPS</option>\n                    <option value=\"others\">Others</option> */}\n                </Select>\n              </Label>\n            </div>\n          ) : (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={values[num].type}\n                  onChange={(e) => {\n                    let newlist = [...values];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value.toLowerCase();\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"console\">Console</option>\n                  <option value=\"DMP\">DMP</option>\n                  <option value=\"inkjet\">Inkjet</option>\n                  <option value=\"KVM\">KVM</option>\n                  <option value=\"laptop\">Laptop</option>\n                  <option value=\"laser\">Laser</option>\n                  <option value=\"LMP\">LMP</option>\n                  <option value=\"module\">Module</option>\n                  <option value=\"router\">Router</option>\n                  <option value=\"scanner\">Scanner</option>\n                  <option value=\"server\">Server</option>\n                  <option value=\"desktop\">Desktop</option>\n                  <option value=\"storage\">Storage</option>\n                  <option value=\"switch\">Switch</option>\n                  <option value=\"UPS\">UPS</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          )}\n\n          {values[num].systype == \"item\" ? (\n            <>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Product Name*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    value={values[num].name}\n                    onChange={(e) => {\n                      let newlist = [...values];\n                      newlist[num].name = e.target.value;\n                      setValues(newlist);\n                    }}\n                  />\n                </Label>\n                <HelperText valid={false}>{err.name}</HelperText>\n              </div>\n            </>\n          ) : (\n            <>\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Brand*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"text\"\n                      value={values[num].brand}\n                      onChange={(e) => {\n                        let newlist = [...values];\n                        newlist[num].brand = e.target.value;\n                        setValues(newlist);\n                      }}\n                    />\n                  </Label>\n                  <HelperText valid={false}>{err.brand}</HelperText>\n                </div>\n              </>\n\n              <>\n                <div className=\"flex flex-col w-full\">\n                  <Label className=\"w-full\">\n                    <span>Model*</span>\n                    <Input\n                      className=\"mt-1\"\n                      type=\"text\"\n                      value={values[num].model}\n                      onChange={(e) => {\n                        let newlist = [...values];\n                        newlist[num].model = e.target.value;\n                        setValues(newlist);\n                      }}\n                    />\n                  </Label>\n                  <HelperText valid={false}>{err.name}</HelperText>\n                </div>\n              </>\n            </>\n          )}\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].sno}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].sno = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n            <HelperText valid={false}>{err.sno}</HelperText>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].condition = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"DOA\">DOA</option>\n                <option value=\"Damaged\">Damaged</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Stock Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].stocktype}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].stocktype = e.target.value;\n                  setValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Stock Type\n                </option>\n                <option value=\"Purchased\">Purchased</option>\n                <option value=\"Serviced\">Serviced</option>\n              </Select>\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].wty}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].wty = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setDateCalculate(!datecalculate);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"0D\">0 days</option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Years</option>\n                <option value=\"3Y\">3 Years</option>\n                <option value=\"4Y\">4 Years</option>\n                <option value=\"5Y\">5 Years</option>\n                <option value=\"20Y\">20 Years</option>\n              </Select>\n            </Label>\n          </div>\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Expiry Date</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={values[num].expirydate}\n                  readOnly={true}\n                />\n              </Label>\n              <HelperText valid={false}>{err.name}</HelperText>\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Category*</span>\n              <Select\n                className=\"mt-1\"\n                value={values[num].taxcategory}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  let thestring = e.target.value;\n                  let theperc = thestring.slice(-3, -1);\n                  newlist[num].taxcategory = e.target.value;\n                  newlist[num].taxperc = theperc;\n                  setValues(newlist);\n                  // calculate trigger\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              >\n                {basevalues.purchlocation == \"Local\" ? (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"GST 18%\">GST 18%</option>\n                    <option value=\"GST 28%\">GST 28%</option>\n                  </>\n                ) : (\n                  <>\n                    <option value=\"\" selected disabled>\n                      Select Tax Category\n                    </option>\n                    <option value=\"IGST 18%\">IGST 18%</option>\n                    <option value=\"IGST 28%\">IGST 28%</option>\n                  </>\n                )}\n              </Select>\n            </Label>\n          </div>\n          {/* <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Tax Percentage*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                readOnly=\"true\"\n                value={values[num].taxperc}\n              />\n            </Label>\n            <HelperText valid={false}>{err.invnumber}</HelperText>\n          </div> */}\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Rate*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].rate}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].rate = e.target.value;\n                  setValues(newlist);\n                  setCalnum(num);\n                  setCalculate(!calculate);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n        {/* -------------------------ROw 3-------------------- */}\n        <div className=\"flex-row flex  space-x-3\">\n          <Label className=\" mt-3\">\n            Net Tax:{parseFloat(values[num].nettax)}\n          </Label>\n          <Label className=\" ml-5 mt-3\">\n            Invoice Amount:\n            {parseFloat(values[num].invamount)}\n          </Label>\n        </div>\n        {/* --------Row 4 ------------- */}\n        {/* <div className=\"flex-row flex space-x-3 my-2\">\n          {basevalues.purchlocation == \"Local\" ? (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>CGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].cgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>SGST*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].sgst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          ) : (\n            <>\n              {\" \"}\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>IGST</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].igst}\n                  />\n                </Label>\n              </div>\n              <div className=\"flex flex-col w-full\">\n                <Label className=\"w-full\">\n                  <span>Net Tax*</span>\n                  <Input\n                    className=\"mt-1\"\n                    type=\"text\"\n                    readOnly=\"true\"\n                    value={values[num].nettax}\n                  />\n                </Label>\n              </div>\n            </>\n          )}\n        </div> */}\n        {/* ----row 4------ */}\n        {/* <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].amount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>TCS</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].tcs}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].amount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Invoice Amount</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={values[num].invamount}\n                onChange={(e) => {\n                  let newlist = [...values];\n                  newlist[num].invamount = e.target.value;\n                  setValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div> */}\n\n        {/* <Label className=\"font-bold mt-5 mb-2\">\n    <span>Additional Information</span>\n  </Label> */}\n        {/* <hr /> */}\n      </div>\n    );\n  };\n\n  const BottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap justify-around\">\n            <Button\n              onClick={() => {\n                let newitem = [...values];\n                let add = invdetails;\n                newitem.push(add);\n                setValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Item\n            </Button>\n\n            {/* <Button\n              onClick={() => {\n                let newitem = [...values];\n                if (newitem[1]) {\n                  newitem.pop();\n                  setValues(newitem);\n                }\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Remove Item\n            </Button> */}\n\n            <Button\n              onClick={() => {\n                let newitem = [...values];\n                let add = { ...values[values.length - 1] };\n                add.sno = \"\";\n                console.log(add);\n                newitem.push(add);\n                setValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Similar Item\n            </Button>\n\n            <Button\n              onClick={submitItems}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              // layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Submit\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(basevalues);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              // layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Test\n            </Button>\n            <div className=\" dark:text-gray-100 text-black font-bold flex-1 my-auto mx-20\">\n              <span>Invoice Amount: {parseFloat(basevalues.totalInvoice)}</span>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      {BasicForm()}\n      {MessageModalComponent()}\n\n      {values.map((item, i) => {\n        return ItemForm(i);\n      })}\n      {BottomCard()}\n      {VendorModal()}\n    </>\n  );\n}\n\nexport default PurchaseInventory;\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { API } from \"../../backendapi\";\n\nexport default function CustomerCreatetModal({\n  isModalOpen,\n  setIsModalOpen,\n  setCustomer,\n}) {\n  const [values, setValues] = useState([]);\n  useEffect(() => {\n    getCustomers();\n  }, []);\n\n  const getCustomers = () => {\n    Axios.post(`${API}/customer/customers`, { search: \"\", role: 1 })\n      .then((users) => {\n        console.log(users.data);\n        let temp = [];\n        users.data.map((user) => {\n          temp.push(user);\n        });\n        setValues(temp);\n      })\n      .catch((err) => {\n        console.log(\"axiosErr\", err);\n      });\n  };\n\n  const userTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {values.map((user, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-900 \"\n                onClick={() => {\n                  setCustomer({\n                    _id: user._id,\n                    customerName: user.name,\n                  });\n                  setIsModalOpen(false);\n                }}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                {/* <TableCell>\n                    <span className=\"text-sm\">$ {user.email}</span>\n                  </TableCell> */}\n                {/* <TableCell>\n                    <Badge type={user.status}>{user.status}</Badge>\n                  </TableCell> */}\n                {/* <TableCell>\n                  <span className=\"text-sm\">{user.infoId.unit}</span>\n                </TableCell> */}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          {/* <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            /> */}\n        </TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>Modal header</ModalHeader>\n        <ModalBody>{userTable()}</ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Cancel\n          </Button>\n          <Button className=\"w-full sm:w-auto\">Accept</Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import Axios from \"axios\";\nimport { API } from \"../backendapi\";\nimport Emp from \"../helpers/auth/EmpProfile\";\n\nexport const unitCreate = (newunit) => {\n  return Axios.post(`${API}/unit/${Emp.getId()}/create`, newunit)\n    .then((unit) => {\n      console.log(\"h\", unit.data);\n      return unit.data;\n    })\n    .catch((error) => {\n      console.log(\"ERRRROs\");\n      if (error.response) {\n        console.log(error.response.data);\n        console.log(error.response.status);\n        throw error.response.data.errors;\n      }\n    });\n};\n"],"sourceRoot":""}