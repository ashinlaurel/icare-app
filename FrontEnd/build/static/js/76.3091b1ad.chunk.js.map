{"version":3,"sources":["pages/Inventory/PurchaseHistory.js"],"names":["PurchaseHistory","useContext","TopBarContext","setTopHeading","topheading","useState","page","setPage","data","setData","refresh","setRefresh","type","setType","stocktype","location","setLocation","ToLocation","condition","selectedprod","searchquery","setSearchQuery","vendorsearchquery","setVendorSearchQuery","totalResults","setTotalResults","activeRowID","setActiveRowID","useEffect","a","console","log","payload","pages","limit","filters","systype","axios","url","API","Emp","getId","method","response","out","total","className","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","onClick","map","user","i","_id","key","purchtype","vendor","invnumber","moment","invdate","format","invItems","length","size","aria-label","aria-hidden","items","name","sno","expirydate","resultsPerPage","label","p"],"mappings":"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","file":"static/js/76.3091b1ad.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\nimport { saveAs } from \"file-saver\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, DropdownIcon } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n// import PrintLST from \"./PrintLST\";\n\nfunction PurchaseHistory() {\n  // table variable styles\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [stocktype, setStocktype] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [ToLocation, setToLocation] = useState(\"\");\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n  const [vendorsearchquery, setVendorSearchQuery] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  const [activeRowID, setActiveRowID] = useState(-1);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Purchase History\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          systype: type,\n          location: location,\n          ////////////////\n          searchquery: searchquery,\n          vendorsearchquery: vendorsearchquery,\n          stocktype: stocktype,\n        },\n      };\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/inventory/${Emp.getId()}/getallhistory`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, ToLocation, condition, type, refresh, stocktype]);\n\n  console.log(selectedprod);\n\n  // PDF Download Functions\n\n  const createAndDownloadPdf = async (id) => {\n    let payload = {\n      id: id,\n    };\n    let response = await axios({\n      url: `${API}/lst/${Emp.getId()}/downloadpdf`,\n      method: \"POST\",\n      data: payload,\n      responseType: \"blob\",\n    });\n\n    const pdfBlob = new Blob([response.data], { type: \"application/pdf\" });\n\n    saveAs(pdfBlob, \"LST.pdf\");\n  };\n\n  const InvTable = (items) => {\n    return (\n      <div className=\" bg-gray-200 dark:bg-gray-700 p-3 \">\n        <div className=\"mb- mt-4\">\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n          <TableContainer className=\"mt-4\">\n            <Table>\n              <TableHeader>\n                <tr>\n                  <TableCell>Category</TableCell>\n                  <TableCell>Description</TableCell>\n                  <TableCell>Serial Number</TableCell>\n                  <TableCell>Location</TableCell>\n                  <TableCell>Invoice Number</TableCell>\n                  <TableCell>Inv Date</TableCell>\n                  <TableCell>Wty Expiry</TableCell>\n                  <TableCell>Status</TableCell>\n                </tr>\n              </TableHeader>\n              <TableBody>\n                {items.map((user, i) => (\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                      activeRowID == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      setActiveRowID(user._id);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                        <div>\n                          <p className=\"font-semibold\">{user.type}</p>\n                          {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.name}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">{user.sno}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {moment(user.invdate).format(\"DD/MM/YY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      {/* <span className=\"text-sm\">{moment(user.expirydate).format(\"DD/MM/YY\")}</span> */}\n                      <span className=\"text-sm\">{user.expirydate}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <Badge\n                        type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                      >\n                        {user.condition}\n                      </Badge>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n\n          {/* ----------------------------------------------Table----------------------------------------------------- */}\n        </div>\n\n        {/* ------------------------------------Bottom Bar---------------------------------- */}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"item\">Item</option>\n                <option value=\"full system\">Full System</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search Invoice Number\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={vendorsearchquery}\n                  onChange={(e) => setVendorSearchQuery(e.target.value)}\n                  placeholder=\"Search Vendor\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr className=\"flex flex-row justify-between\">\n                <TableCell> Type</TableCell>\n                <TableCell>Vendor</TableCell>\n                <TableCell>Inventory No.</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>No.Items</TableCell>\n\n                <TableCell>\n                  <span\n                    className=\"cursor-pointer\"\n                    onClick={() => setActiveRowID(-1)}\n                  >\n                    Items\n                  </span>\n                </TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <div className=\"flex flex-col justify-around\">\n                  <TableRow\n                    className={`hover:shadow-lg dark:hover:bg-gray-600 flex flex-row justify-between  ${\n                      activeRowID == user._id\n                        ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                        : \"white\"\n                    } `}\n                    key={i}\n                    onClick={() => {\n                      // setActiveRowID(i);\n                      // console.log(\"the id is \" + user._id);\n                      // setSelectedProd(user);\n                      // setAssetDetails(user);\n                      // console.log(user.product.keyboard[0].keyboardname);\n                    }}\n                  >\n                    <TableCell className=\"w-8\">\n                      <div className=\"flex items-center text-sm \">\n                        <div>\n                          <p className=\"font-semibold\">{user.purchtype}</p>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.vendor}</span>\n                    </TableCell>\n\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invnumber}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">\n                        {\" \"}\n                        {moment(user.invdate).format(\"DD/MM/YYYY\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.location}</span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm\">{user.invItems.length}</span>\n                    </TableCell>\n                    {/* <TableCell>\n                    <Badge>\n                      condition\n                    </Badge>\n                  </TableCell> */}\n\n                    <TableCell className=\"text-center \">\n                      <Button\n                        // layout=\"link\"\n                        size=\"icon\"\n                        aria-label=\"DropDown\"\n                        onClick={\n                          () => {\n                            console.log(activeRowID);\n                            if (activeRowID == i) {\n                              setActiveRowID(-1);\n                            } else setActiveRowID(i);\n                          }\n                          // console.log(ac)\n                        }\n                        className=\"rounded-lg m-1\"\n                      >\n                        <DropdownIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n\n                  {activeRowID == i ? InvTable(user.invItems) : null}\n                </div>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default PurchaseHistory;\n"],"sourceRoot":""}