{"version":3,"sources":["components/Cards/CallCard.js","pages/EngineerPages/EnggCalls.js","../node_modules/classnames/index.js","components/RoundIcon.js"],"names":["CallCard","title","value","priority","problem","contactPerson","btnone","btnonelink","btntwo","icon","children","desc","link","unit","assignedDate","assignedETA","product","className","to","layout","size","ViewEngineerCalls","useState","useContext","BottomBarContext","setBBarOpen","bbaropen","setAssetDetails","assetdetails","TopBarContext","setTopHeading","topheading","page","data","setData","refresh","Business","_id","enggName","useEffect","a","payload","pages","limit","filters","callStatus","searchquery","fromDate","toDate","employeeId","EmpProfile","getId","console","log","axios","url","API","Emp","method","response","out","filter","call","map","item","i","assetId","callNo","unitName","producttype","RoundIcon","PeopleIcon","iconColorClass","bgColorClass","hasOwn","hasOwnProperty","classNames","classes","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","join","module","exports","default","Icon","cls"],"mappings":"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","file":"static/js/49.0ea7a9aa.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardBody, Button } from \"@windmill/react-ui\";\nimport { Link } from \"react-router-dom\";\nimport Emp from \"../../helpers/auth/EmpProfile\";\n\nfunction CallCard({\n  title,\n  value,\n  priority,\n  contactPerson,\n  problem,\n  btnone,\n  btntwo,\n  btnonelink,\n  children: icon,\n  link,\n  desc,\n  assignedDate,\n  assignedETA,\n  unit,\n  product,\n}) {\n  return (\n    <Card className=\"cursor-pointer dark:hover:bg-gray-700 hover:bg-gray-100 py-4\">\n      <CardBody className=\"flex items-center \">\n        {icon}\n        <div>\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">\n            Call Id: {value}\n          </p>\n          <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n            Priority:{priority}\n          </p>\n          {/* <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n            Contact Person:{contactPerson}\n          </p> */}\n          <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n            Unit:{unit}\n          </p>\n          <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n            Product :{product}\n          </p>\n          {/* <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n          assigned Date:{assignedDate}\n          </p>\n          <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n          assigned ETA:{assignedETA}\n          </p> */}\n          <p className=\" text-sm text-gray-700 dark:text-gray-200\">\n            Problem:{problem}\n          </p>\n        </div>\n      </CardBody>\n      <div className=\"flex items-center justify-end pr-4 -mt-3\">\n        <div className=\"mx-1\">\n          {btnone ? (\n            <Link to={btnonelink}>\n              <Button layout=\"outline\" size=\"small\">\n                {btnone}\n              </Button>\n            </Link>\n          ) : null}\n          <p className=\"text-md font-semibold text-gray-700 dark:text-gray-200\">\n            {desc}\n          </p>\n        </div>\n        {/* <div className=\"mx-1\">\n          {link ? (\n            <Link to={link}>\n              <Button layout=\"outline\" size=\"small\">\n                Details\n              </Button>\n            </Link>\n          ) : null}\n        </div> */}\n      </div>\n    </Card>\n  );\n}\n\nexport default CallCard;\n","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Label,\n  Select,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\n// import EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport EmpProfile from \"../../helpers/auth/EmpProfile\";\nimport RoundIcon from \"../../components/RoundIcon\";\nimport CallCard from \"../../components/Cards/CallCard\";\n\nfunction ViewEngineerCalls() {\n  // Bottom bar stuff\n  // const [bbaropen, setBBarOpen] = useContext(BottomBarContext);\n  // const [assetdetails, setAssetDetails] = useContext(BottomBarContext);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  // dropdown and modals\n  const [refresh, setRefresh] = useState(true);\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n\n  // Getting data states\n\n  // pagination setup\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  useEffect(() => {\n    // setBBarOpen(1);\n    return () => {\n      setBBarOpen(0);\n      setAssetDetails({});\n    };\n  }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"My Calls\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // // Using an IIFE\n    // (async function thegetter() {\n    //   try {\n    //     let response = await axios({\n    //       url: `${API}/admin/${Emp.getId()}/getCallsByEmpId`,\n    //       method: \"POST\",\n    //       data: { id: EmpProfile.getId() },\n    //     });\n    //     console.log(response.data[0].assignedCalls);\n    //     // setTotalResults(response);\n    //     // const { total, data } = response.data;\n    //     // console.log(data + \"Now\");\n\n    //     setData(response.data[0].assignedCalls);\n    //   } catch (error) {\n    //     throw error;\n    //   }\n    // })();\n\n    (async () => {\n      let payload = {\n        pages: {\n          page: 1,\n          limit: 10000,\n        },\n        filters: {\n          callStatus: \"\",\n          searchquery: \"\",\n          fromDate: \"\",\n          toDate: \"\",\n          employeeId: EmpProfile.getId(),\n        },\n      };\n      console.log(\"HERE\", payload);\n      try {\n        let response = await axios({\n          url: `${API}/call/${Emp.getId()}/getall`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data.out);\n        // setTotalResults(response.data.total);\n        setData(response.data.out);\n        // const { total, data } = response.data;\n        console.log(data + \"Now\");\n\n        setData(response.data.out.filter(call=>call.callStatus==\"2\"||call.callStatus==\"4\"));\n      } catch (error) {\n        throw error;\n      }\n      // console.log(engineer)\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, Business, product, refresh]);\n\n  // console.log(selectedprod);\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>Updated Successfully!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4 mt-5\">\n        {data.map((item, i) => (\n          <Link to={`/app/call/calldetails/${item._id}/${item.assetId._id}`}>\n            <CallCard\n              value={item.callNo}\n              contactPerson={item.contactPerson}\n              problem={item.problem}\n              priority={i + 1}\n              unit={item.unitName}\n              product={item.assetId.producttype}\n              link={`/app/call/calldetails/${item._id}/${item.assetId._id}`}\n              assignedDate={item.assignedDate}\n              assignedETA={item.assignedETA}\n            >\n              <RoundIcon\n                icon={PeopleIcon}\n                // width=\"60\" height=\"60\"\n                iconColorClass=\"text-orange-500 dark:text-orange-100\"\n                bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n                className=\"mr-4\"\n              />\n            </CallCard>\n          </Link>\n        ))}\n      </div>\n\n      {/*       \n      <ReviewSubmit />\n\n      <div className=\"mb-64 mt-4\">\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Priority</TableCell>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Update</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map(({ _id, callId, priority }, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == callId._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n ;\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{priority}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{callId.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">\n                      {moment(callId.date).format(\"DD/MM/YYYY\")}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{callId.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex justify-start items-center space-x-2\">\n                      <Link\n                        key={callId._id}\n                        to={`/app/call/updatecall/${callId._id}/${callId.assetId}`}\n                      >\n                        <Button\n                          layout=\"outline\"\n                          onClick={() => {}}\n                          className=\" \"\n                        >\n                          Update\n                        </Button>\n                      </Link>\n                    \n                    </div>\n                  </TableCell>\n               \n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter></TableFooter>\n        </TableContainer>\n\n      </div> */}\n    </>\n  );\n}\n\nexport default ViewEngineerCalls;\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction RoundIcon({\n  icon: Icon,\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\n  className,\n}) {\n  const baseStyle = 'rounded-full p-5'\n\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\n  return (\n    <div className={cls}>\n      <Icon className=\"w-6 h-6\" />\n    </div>\n  )\n}\n\nexport default RoundIcon\n"],"sourceRoot":""}