{"version":3,"sources":["pages/LST/LSTUpdate.js","components/Modal/AssetFilters/CustomerSelection.js","components/Modal/UnitListModal.js"],"names":["LST","id","useParams","history","useHistory","useState","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","vendorsearch","setVendorsearch","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","SelectedItems","setSelectedItems","initialSelectedItems","setinitialSelectedItems","refresh","setRefresh","LSTtype","setLSTtype","type","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","moment","format","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","isVendorModalopen","setIsVendorModalopen","vendors","setVendors","defVendor","_id","name","aadharNo","PANNo","GSTNo","selectedVendor","setselectedVendor","unitName","unit","setUnit","customerName","customer","setCustomer","accountName","account","setAccount","isCustomerModalOpen","setIsCustomerModalOpen","setCustomerName","setUnitName","setAccountName","getLST","a","axios","post","API","Emp","getId","res","console","log","from","to","invItems","setCMRRValues","CMRRItems","useEffect","CMRRinvdetails","sno","invnumber","caseId","systype","CMRRvalues","payload","filters","url","method","response","out","getVendorList","totalResults","setTotalResults","onPageChange","p","LSTNumberSetter","thecallcount","locstr","year","callnumber","thegetter","pages","limit","total","updateInventory","MakeCMRR","length","invIds","map","item","push","lst","update","newitems","toremove","olditems","filter","some","newitem","toadd","olditem","newhistory","histtype","callId","assetId","status","note","Date","$push","LSTCustomer","setTimeout","className","class","xmlns","viewBox","d","onClick","user","i","key","value","onChange","e","temp","x","target","t","defaultValue","placeholder","invList","fill","aria-hidden","layout","disabled","selected","onSubmit","preventDefault","capitalize","stocktype","expirydate","added","initList","resultsPerPage","label","isOpen","onClose","num","newlist","wty","add","aria-label","aria-haspopup","isModalOpen","setIsModalOpen","CustomerSelection","theunitdetails","setTheUnitDetails","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","Axios","customerId","accs","pickAccount","accountId","u","pickUnit","contactPerson","contactNo","selectedIndex","onSelect","ind","UnitListModal"],"mappings":"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","file":"static/js/47.91336550.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, Remove } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Input,\n  HelperText,\n  Label,\n  Select,\n  Card,\n  CardBody,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\nimport { CloseIcon } from \"../../icons\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nfunction LST() {\n  let { id } = useParams();\n  const history = useHistory();\n  // console.log(id);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  const [vendorsearch, setVendorsearch] = useState(\"\");\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  const [initialSelectedItems, setinitialSelectedItems] = useState([]);\n  // dropdown [] modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [LSTtype, setLSTtype] = useState(\"Normal\");\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  // const [customer, setCustomer] = useState(\"\");\n  const [date, setDate] = useState(moment().format());\n  const [condition, setCondition] = useState(\"Available\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  //vendors\n  const [isVendorModalopen, setIsVendorModalopen] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const defVendor = {\n    _id: \"\",\n    name: \"\",\n    aadharNo: \"\",\n    PANNo: \"\",\n    GSTNo: \"\",\n  };\n  const [selectedVendor, setselectedVendor] = useState(defVendor);\n\n  const [isVendor, setIsVendor] = useState(false);\n\n  //customer\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n  const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);\n\n  const [customerName, setCustomerName] = useState(\"\");\n  const [unitName, setUnitName] = useState(\"\");\n  const [accountName, setAccountName] = useState(\"\");\n\n  //GET LST DEETS\n  const getLST = async () => {\n    try {\n      let res = await axios.post(`${API}/lst/${Emp.getId()}/getbyid`, {\n        id: id,\n      });\n      console.log(\"lst\", res.data);\n      setLSTtype(res.data.LSTtype);\n      setLocation(res.data.from);\n      setToLocation(res.data.to);\n      setLSTNo(res.data.LSTNo);\n      setDate(res.data.date);\n      setSelectedItems(res.data.invItems);\n      setinitialSelectedItems(res.data.invItems);\n      setCMRRValues(res.data.CMRRItems);\n      setCustomerName(res.data.customerName);\n      setAccountName(res.data.accountName);\n      setUnitName(res.data.unitName);\n\n      //asset\n    } catch (err) {\n      console.log(\"assetFind Error\", err);\n    }\n  };\n\n  useEffect(() => {\n    getLST();\n  }, []);\n\n  ////////\n\n  // CMRR\n\n  const CMRRinvdetails = {\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    invnumber: \"\",\n    location: \"In Transit\",\n    //-------\n    caseId: \"imprest\",\n    systype: \"item\",\n  };\n  const [CMRRvalues, setCMRRValues] = useState([CMRRinvdetails]);\n\n  async function getVendorList() {\n    let payload = {\n      filters: {\n        searchquery: vendorsearch,\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/vendor/${Emp.getId()}/getAll`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setVendors(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n  useEffect(() => {\n    getVendorList();\n  }, [vendorsearch]);\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // LST NUM\n  const LSTNumberSetter = async (date, from) => {\n    console.log(date, from);\n    if (from == \"\" || date == \"\") return;\n    let payload = {\n      from: from,\n      date: date,\n    };\n    let thecallcount = 0;\n    try {\n      thecallcount = await axios({\n        url: `${API}/lst/${Emp.getId()}/lstbydate`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    let locstr;\n    from == \"Trivandrum\"\n      ? (locstr = \"TVM\")\n      : from == \"Kottayam\"\n      ? (locstr = \"KTM\")\n      : (locstr = \"CLT\");\n\n    let year = moment(date).format(\"YY\");\n    let month = moment(date).format(\"MM\");\n    let day = moment(date).format(\"DD\");\n    let callnumber = thecallcount.data + 1;\n    if (callnumber < 10) {\n      callnumber = \"00\" + callnumber;\n    } else if (callnumber < 100) {\n      callnumber = \"0\" + callnumber;\n    }\n    console.log(thecallcount.data);\n\n    let thestring = \"ICS\" + locstr + year + callnumber;\n    setLSTNo(thestring);\n    // setValues({ ...values, callNo: thestring, date: date });\n    // // ------history management\n    // let temp = callhistory;\n    // temp[0].date = date;\n    // setCallHistory(temp);\n\n    // console.log(thestring);\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  //   useEffect(() => {\n  //     setBBarOpen(1);\n  //     return () => {\n  //       setBBarOpen(0);\n  //       setAssetDetails({});\n  //     };\n  //   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"Edit LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory = async () => {\n    if (LSTNo == \"\") {\n      setModalMessage(\"LST Number necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (date == \"\") {\n      setModalMessage(\"Date Necessary\");\n      setMessageModal(true);\n      return;\n    }\n    // if (location == toLocation) {\n    //   setModalMessage(\"From and to Location is same!\");\n    //   setMessageModal(true);\n    //   return;\n    // }\n    if (location == \"\") {\n      setModalMessage(\"From location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (toLocation == \"\") {\n      setModalMessage(\"To location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (LSTtype == \"CMRR\") {\n      console.log(CMRRvalues);\n      MakeCMRR();\n      return;\n    }\n    if (SelectedItems.length == 0) {\n      setModalMessage(\"No items selected\");\n      setMessageModal(true);\n      return;\n    }\n    // if (LSTtype == \"Customer\") {\n    //   if (customer._id == \"\") {\n    //     setModalMessage(\"Customer Not Selcted\");\n    //     setMessageModal(true);\n    //     return;\n    //   }\n    //   if (account._id == \"\") {\n    //     setModalMessage(\"Account Not Selcted\");\n    //     setMessageModal(true);\n    //     return;\n    //   }\n    //   if (unit._id == \"\") {\n    //     setModalMessage(\"Unit Not Selcted\");\n    //     setMessageModal(true);\n    //     return;\n    //   }\n    // }\n\n    let invIds = [];\n    SelectedItems.map(async (item) => {\n      invIds.push(item._id);\n    });\n\n    let lst = {\n      invItems: invIds,\n    };\n\n    console.log(\"LST\", lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: { id: id, update: lst },\n      });\n      // setIsReviewModalOpen(true);\n      //////////////////// UPDATE INVENTORY\n      let olditems = initialSelectedItems;\n      let newitems = SelectedItems;\n      // filter out items in newitems not in old items\n      let toremove = olditems.filter((item) => {\n        return !newitems.some((newitem) => newitem._id == item._id);\n      });\n      let toadd = newitems.filter((item) => {\n        return !olditems.some((olditem) => olditem._id == item._id);\n      });\n      console.log(\"toremove\", toremove);\n      console.log(\"toadd\", toadd);\n\n      toadd.map(async (item) => {\n        // invIds.push(item._id);\n        // ----history ---\n        let newhistory = {\n          histtype: \"lst\",\n          date: date,\n          location: \"In Transit\",\n          callId: \"Nil\",\n          assetId: \"Nil\",\n          status: item.condition,\n          note: `Item sent from ${location} to ${toLocation} (LST Edited on ${moment(\n            new Date()\n          ).format(\"DD/MM/YY\")})`,\n        };\n        const data = {\n          id: item._id,\n          update: {\n            location: \"In transit\",\n            caseId: item.caseId,\n            $push: { history: newhistory },\n            LSTtype: LSTtype,\n            // LSTCustomer: \"\",\n          },\n        };\n        // if (LSTtype == \"Customer\") data.update.LSTCustomer = customer;\n        console.log(\"PAYLOAD\", data);\n        try {\n          await axios({\n            url: `${API}/inventory/${Emp.getId()}/invupdate`,\n            method: \"POST\",\n            data: data,\n          });\n          // setIsReviewModalOpen(true);\n          console.log(\"Done\");\n        } catch (error) {\n          console.log(error);\n          throw error;\n        }\n      });\n      toremove.map(async (item) => {\n        // invIds.push(item._id);\n        // ----history ---\n        let newhistory = {\n          histtype: \"lst\",\n          date: date,\n          location: location,\n          callId: \"Nil\",\n          assetId: \"Nil\",\n          status: item.condition,\n          note: `Item Removed from LST (${LSTNo}) (LST Edited on ${moment(\n            new Date()\n          ).format(\"DD/MM/YY\")})`,\n        };\n        const data = {\n          id: item._id,\n          update: {\n            location: location,\n            caseId: \"Nil\",\n            $push: { history: newhistory },\n            LSTtype: LSTtype,\n            LSTCustomer: \"\",\n          },\n        };\n        // if (LSTtype == \"Customer\") data.update.LSTCustomer = customer;\n        console.log(\"PAYLOAD\", data);\n        try {\n          await axios({\n            url: `${API}/inventory/${Emp.getId()}/invupdate`,\n            method: \"POST\",\n            data: data,\n          });\n          // setIsReviewModalOpen(true);\n          console.log(\"Done\");\n          // history.push(\"/lst\");\n        } catch (error) {\n          console.log(error);\n          throw error;\n        }\n      });\n\n      console.log(\"Done\");\n      setModalMessage(\"LST Saved!\");\n      setTimeout(() => history.push(\"/app/lst/history\"), 2000);\n      // setLocation(\"\")\n      setToLocation(\"\");\n      setDate(\"\");\n      setselectedVendor(defVendor);\n      LSTNumberSetter(date, location);\n      // setData([]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const MakeCMRR = async () => {\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: [],\n      status: \"In Transit\",\n      LSTtype: LSTtype,\n      CMRRItems: CMRRvalues,\n    };\n\n    console.log(\"LST\", lst);\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/update`,\n        method: \"POST\",\n        data: { id: id, update: lst },\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\");\n      setDate(\"\");\n      setselectedVendor(defVendor);\n      // setData([]);\n      setCMRRValues([CMRRinvdetails]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const VendorModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isVendorModalopen}\n          onClose={() => setIsVendorModalopen(false)}\n        >\n          <ModalHeader>\n            <tr>\n              <TableCell>Pick Vendor</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                  }}\n                >\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={(e) => {\n                      setVendorsearch(e.target.value);\n                    }}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </ModalHeader>\n          <ModalBody className=\"overflow-y-scroll h-64\">\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Customer</TableCell>\n                    {/* <TableCell>Unit</TableCell> */}\n                    {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n                  </tr>\n                </TableHeader>\n                <TableBody>\n                  {vendors.map((user, i) => (\n                    <TableRow\n                      key={i}\n                      className=\"hover:bg-purple-900 \"\n                      onClick={() => {\n                        console.log(user);\n                        setselectedVendor(user);\n                        setIsVendorModalopen(false);\n                      }}\n                    >\n                      <TableCell>\n                        <div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsVendorModalopen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const invTable = () => {\n    return (\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"mouse\">Mouse</option>\n                <option value=\"keyboard\">Keyboard</option>\n                <option value=\"monitor\">Monitor</option>\n                <option value=\"cpu\">Cpu</option>\n                <option value=\"ram\">Ram</option>\n                <option value=\"fan\">Fan</option>\n                <option value=\"motherboard\">Motherboard</option>\n                <option value=\"smps\">SMPS</option>\n                <option value=\"hdd\">HDD</option>\n                {/* <option value=\"SMPS\">SMPS</option> */}\n                <option value=\"gcard\">Gcard</option>\n                <option value=\"enetcard\">Enet Card</option>\n                <option value=\"serialcard\">Serial Card</option>\n                <option value=\"paralellcard\">Paralell Card</option>\n                <option value=\"opticaldrive\">Optical Drive</option>\n                <option value=\"others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n                <option value=\"Used\">Used</option>\n                <option value=\"Available\" selected>\n                  Available\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"Damaged\">Damaged</option>\n                <option value=\"DOA\">DOA</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Category</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Stock Type</TableCell>\n                <TableCell>Wty.</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Add</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{capitalize(user.type)}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.stocktype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.expirydate}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      layout=\"outline\"\n                      className=\"dark:border-green-700 border-green-400\"\n                      onClick={() => {\n                        let added = false;\n                        let initList = data;\n                        initList = initList.filter((i) => i._id != user._id);\n                        console.log(initList);\n                        setData(initList);\n                        SelectedItems.map((i) => {\n                          if (i._id == user._id) {\n                            console.log(i._id, user._id);\n                            setModalMessage(\"Product already Added!\");\n                            setMessageModal(true);\n                            added = true;\n                          }\n                        });\n                        if (added) return;\n                        user.caseId = \"imprest\";\n                        let temp = [...SelectedItems, user];\n                        setSelectedItems(temp);\n                        // setShowInvTable(false);\n                        // setModalMessage(\"Product  Added!\");\n                        // setMessageModal(true);\n                      }}\n                    >\n                      Add\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n    );\n  };\n\n  const SelectedInv = () => {\n    return (\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            {selectedVendor.name !== \"\" ? (\n              <> Vendor:{selectedVendor.name}</>\n            ) : null}\n          </div>\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            Selected Items\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Case Id</TableCell>\n                <TableCell>Remove</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  <TableCell>\n                    <input\n                      value={user.caseId}\n                      onChange={(e) => {\n                        let temp = SelectedItems;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != user._id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.caseId = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setSelectedItems(temp);\n                      }}\n                      defaultValue=\"Imprest\"\n                      placeholder=\"Cse Id.\"\n                      class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                    />\n                  </TableCell>\n\n                  <TableCell>\n                    <div\n                      className=\" py-1\"\n                      onClick={() => {\n                        let invList = [...data, user];\n                        setData(invList);\n                        let temp = SelectedItems;\n                        temp = temp.filter((i) => i._id != user._id);\n\n                        setSelectedItems(temp);\n                      }}\n                    >\n                      <TrashIcon\n                        className=\"w-5 h-5 cursor-pointer m-2 text-2xl\"\n                        fill=\"maroon\"\n                        aria-hidden=\"true\"\n                      />\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const CMRRMenu = (num) => {\n    let itemtype = \"item\";\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span>{\" \"}\n          <div\n            layout=\"outline\"\n            onClick={() => {\n              let newitem = [...CMRRvalues];\n              newitem = newitem.filter((item, i) => {\n                if (i != num) return item;\n              });\n              setCMRRValues(newitem);\n            }}\n            className=\"border-gray-100 rounded-full cursor pointer\"\n          >\n            <CloseIcon\n              fill=\"lightgray\"\n              className=\"w-5 h-5 cursor-pointer \"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].systype}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].systype = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option selected value=\"item\">\n                  Item\n                </option>\n                <option value=\"full system\">Full System</option>\n              </Select>\n            </Label>\n          </div>\n\n          {CMRRvalues[num].systype == \"item\" ? (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value;\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"mouse\">Mouse</option>\n                  <option value=\"keyboard\">Keyboard</option>\n                  <option value=\"monitor\">Monitor</option>\n                  <option value=\"cpu\">Cpu</option>\n                  <option value=\"ram\">Ram</option>\n                  <option value=\"fan\">Fan</option>\n                  <option value=\"motherboard\">Motherboard</option>\n                  <option value=\"smps\">SMPS</option>\n                  <option value=\"hdd\">HDD</option>\n                  <option value=\"gcard\">Gcard</option>\n                  <option value=\"enetcard\">Enet Card</option>\n                  <option value=\"serialcard\">Serial Card</option>\n                  <option value=\"paralellcard\">Paralell Card</option>\n                  <option value=\"opticaldrive\">Optical Drive</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          ) : (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value;\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"console\">Console</option>\n                  <option value=\"DMP\">DMP</option>\n                  <option value=\"inkjet\">Inkjet</option>\n                  <option value=\"KVM\">KVM</option>\n                  <option value=\"laptop\">Laptop</option>\n                  <option value=\"laser\">Laser</option>\n                  <option value=\"LMP\">LMP</option>\n                  <option value=\"module\">Module</option>\n                  <option value=\"router\">Router</option>\n                  <option value=\"scanner\">Scanner</option>\n                  <option value=\"server\">Server</option>\n                  <option value=\"desktop\">Desktop</option>\n                  <option value=\"storage\">Storage</option>\n                  <option value=\"switch\">Switch</option>\n                  <option value=\"UPS\">UPS</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          )}\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Product Name*</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={CMRRvalues[num].name}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    newlist[num].name = e.target.value;\n                    setCMRRValues(newlist);\n                  }}\n                />\n              </Label>\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].sno}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].sno = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].condition = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"DOA\">DOA</option>\n                <option value=\"Damaged\">Damaged</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].wty}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].wty = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"0D\">0 days</option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Years</option>\n                <option value=\"3Y\">3 Years</option>\n                <option value=\"4Y\">4 Years</option>\n                <option value=\"5Y\">5 Years</option>\n                <option value=\"20Y\">20 Years</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Case ID*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].caseId}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].caseId = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const CMRRBottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap justify-start\">\n            <Button\n              onClick={() => {\n                let newitem = [...CMRRvalues];\n                let add = CMRRinvdetails;\n                newitem.push(add);\n                setCMRRValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Item\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <div className=\" mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \"> Type:</div>\n            {/* -----------------------------------------CMRR ----------------------- */}\n            <p className=\" text-purple-300 font-semibold    my-auto\">\n              {LSTtype}\n            </p>\n          </div>\n\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-auto   \">From:</div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 my-auto \">\n              {\" \"}\n              <p className=\" text-purple-300 font-semibold    my-auto\">\n                {location}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-auto \">To:</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 my-auto \">\n              {\" \"}\n              <p className=\" text-purple-300 font-semibold    my-auto\">\n                {toLocation}\n              </p>\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n          {/* {isVendor ? (\n            <div className=\"mx-1\">\n              <Button\n                layout=\"outline\"\n                className=\"w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </div>\n          ) : null} */}\n\n          {/* -----------------------------------------Location ----------------------- */}\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" my-auto \">Date: </div>\n            <div class=\"relative mx-1  my-auto \">\n              {/* <input\n                type=\"date\"\n                value={date}\n                onChange={(e) => {\n                  setDate(e.target.value);\n                  LSTNumberSetter(e.target.value, location);\n                }}\n                placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              /> */}\n              <p className=\" text-purple-300 font-semibold my-auto \">\n                {moment(date).format(\"DD/MM/YY\")}\n              </p>\n            </div>\n          </div>\n          <div className=\" flex flex-row dark:text-white   \">\n            <div className=\" mx-1  my-auto \">LST No.</div>\n            <p className=\" text-purple-300 font-semibold   my-auto\">{LSTNo}</p>\n          </div>\n          {/* //submitCustomer */}\n\n          <div className=\"flex flex-row dark:text-white ml-auto  \">\n            <Button onClick={updateInventory} className=\"px-10\">\n              Save\n            </Button>\n          </div>\n        </div>\n        {LSTtype == \"Customer\" ? (\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" flex flex-row dark:text-white mt-2 \">\n              Customer:{\" \"}\n              <span className=\"text-purple-300 font-semibold\">\n                {\" \"}\n                {customerName}\n              </span>\n              , Account:{\" \"}\n              <span className=\"text-purple-300 font-semibold\">\n                {accountName}\n              </span>\n              , Unit:{\" \"}\n              <span className=\"text-purple-300 font-semibold\">{unitName}</span>\n            </div>\n          </div>\n        ) : null}\n\n        {LSTtype == \"Normal\" || LSTtype == \"Customer\" ? (\n          <>\n            {SelectedInv()}\n            <div className=\"my-5\">\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  if (location == \"\" || toLocation == \"\") {\n                    setModalMessage(\"Select From and To Locations\");\n                    setMessageModal(true);\n                    return;\n                  }\n                  setShowInvTable(true);\n                }}\n              >\n                Add Product from Inventory\n              </Button>\n            </div>\n            {showInvTable ? invTable() : null}\n          </>\n        ) : null}\n      </div>\n\n      {messageModalComponent()}\n      {VendorModal()}\n      {LSTtype == \"CMRR\" ? (\n        <>\n          {CMRRvalues.map((item, i) => {\n            return CMRRMenu(i);\n          })}\n          {CMRRBottomCard()}\n        </>\n      ) : null}\n\n      <UnitListModal\n        isModalOpen={isCustomerModalOpen}\n        setIsModalOpen={setIsCustomerModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n      />\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async () => {\n    // e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n  useEffect(() => {\n    handleSubmit();\n  }, [search]);\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n\n      setAccounts(accs.data);\n\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer className=\"\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>\n                <form onSubmit={(e) => e.preventDefault()}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"h-64 overflow-auto\">\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n        </ModalBody>\n        <ModalFooter>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}