{"version":3,"sources":["pages/LST/LST.js","components/Modal/AssetFilters/CustomerSelection.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["LST","useState","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","SelectedItems","setSelectedItems","refresh","setRefresh","type","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","Date","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","isVendorModalopen","setIsVendorModalopen","vendors","setVendors","_id","name","aadharNo","PANNo","GSTNo","selectedVendor","setselectedVendor","isVendor","setIsVendor","a","payload","filters","axios","url","API","Emp","getId","method","response","console","log","out","useEffect","getVendorList","totalResults","setTotalResults","onPageChange","p","thegetter","pages","limit","total","updateInventory","length","invIds","map","item","push","newhistory","histtype","callId","assetId","status","note","id","update","caseId","$push","history","lst","from","to","invItems","vendorId","vendorName","className","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","layout","onClick","placeholder","user","i","key","sno","invnumber","temp","filter","x","t","defaultValue","invList","fill","aria-hidden","onSubmit","preventDefault","added","initList","resultsPerPage","label","isOpen","onClose","CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","customerName","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/28.30a67e9a.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, Remove } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nfunction LST() {\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [condition, setCondition] = useState(\"Available\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  //vendors\n  const [isVendorModalopen, setIsVendorModalopen] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const [selectedVendor, setselectedVendor] = useState({\n    _id: \"\",\n    name: \"\",\n    aadharNo: \"\",\n    PANNo: \"\",\n    GSTNo: \"\",\n  });\n\n  const [isVendor, setIsVendor] = useState(false)\n\n  async function getVendorList() {\n    let payload = {\n      filters: {\n        searchquery: \"\",\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/vendor/${Emp.getId()}/getAll`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setVendors(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n  useEffect(() => {\n    getVendorList();\n  }, []);\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  //   useEffect(() => {\n  //     setBBarOpen(1);\n  //     return () => {\n  //       setBBarOpen(0);\n  //       setAssetDetails({});\n  //     };\n  //   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory = async () => {\n    if (LSTNo == \"\") {\n      setModalMessage(\"LST Number necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (date == \"\") {\n      setModalMessage(\"Date Necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (location == \"\") {\n      setModalMessage(\"From location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (toLocation == \"\") {\n      setModalMessage(\"To location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (SelectedItems.length == 0) {\n      setModalMessage(\"No items selected\");\n      setMessageModal(true);\n      return;\n    }\n    let invIds = [];\n\n    SelectedItems.map(async (item) => {\n      invIds.push(item._id);\n      // ----history ---\n      let newhistory = {\n        histtype: \"lst\",\n        date: date,\n        location: \"In Transit\",\n        callId: \"Nil\",\n        assetId: \"Nil\",\n        status: item.condition,\n        note: `Item sent from ${location} to ${toLocation}`,\n      };\n      const data = {\n        id: item._id,\n        update: {\n          location: \"In Transit\",\n          caseId: item.caseId,\n          $push: { history: newhistory },\n        },\n      };\n      console.log(\"PAYLOAD\", data);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: data,\n        });\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    });\n\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: invIds,\n      status: \"In Transit\",\n    };\n    if(selectedVendor._id!=\"\"){\n      console.log(\"here\")\n      lst.vendorId=selectedVendor._id\n      lst.vendorName=selectedVendor.name\n    }\n    console.log(\"LST\", lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const VendorModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isVendorModalopen}\n          onClose={() => setIsVendorModalopen(false)}\n        >\n          <ModalHeader>Pink Vendor</ModalHeader>\n          <ModalBody>\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Customer</TableCell>\n                    {/* <TableCell>Unit</TableCell> */}\n                    {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n                  </tr>\n                </TableHeader>\n                <TableBody>\n                  {vendors.map((user, i) => (\n                    <TableRow\n                      key={i}\n                      className=\"hover:bg-purple-900 \"\n                      onClick={() => {\n                        console.log(user);\n                        setselectedVendor(user);\n                        setIsVendorModalopen(false);\n                      }}\n                    >\n                      <TableCell>\n                        <div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsVendorModalopen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n\n  const invTable = () => {\n    return (\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"mouse\">Mouse</option>\n                <option value=\"keyboard\">Keyboard</option>\n                <option value=\"monitor\">Monitor</option>\n                <option value=\"cpu\">Cpu</option>\n                <option value=\"ram\">Ram</option>\n                <option value=\"fan\">Fan</option>\n                <option value=\"motherboard\">Motherboard</option>\n                <option value=\"smps\">SMPS</option>\n                <option value=\"hdd\">HDD</option>\n                {/* <option value=\"SMPS\">SMPS</option> */}\n                <option value=\"gcard\">Gcard</option>\n                <option value=\"enetcard\">Enet Card</option>\n                <option value=\"serialcard\">Serial Card</option>\n                <option value=\"paralellcard\">Paralell Card</option>\n                <option value=\"opticaldrive\">Optical Drive</option>\n                <option value=\"others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\" >\n                  Good\n                </option>\n                <option value=\"Bad\">Bad</option>\n                <option value=\"Used\">Used</option>\n                <option value=\"Available\" selected >Available</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Add</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      layout=\"outline\"\n                      className=\"dark:border-green-700 border-green-400\"\n                      onClick={() => {\n                        let added = false;\n                        let initList = data;\n                        initList = initList.filter((i) => i._id != user._id);\n                        console.log(initList);\n                        setData(initList);\n                        SelectedItems.map((i) => {\n                          if (i._id == user._id) {\n                            console.log(i._id, user._id);\n                            setModalMessage(\"Product already Added!\");\n                            setMessageModal(true);\n                            added = true;\n                          }\n                        });\n                        if (added) return;\n                        user.caseId = \"imprest\";\n                        let temp = [...SelectedItems, user];\n                        setSelectedItems(temp);\n                        // setShowInvTable(false);\n                        // setModalMessage(\"Product  Added!\");\n                        // setMessageModal(true);\n                      }}\n                    >\n                      Add\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n    );\n  };\n\n  const SelectedInv = () => {\n    return (\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            Selected Items\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Case Id</TableCell>\n                <TableCell>Remove</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  <TableCell>\n                    <input\n                      value={user.caseId}\n                      onChange={(e) => {\n                        let temp = SelectedItems;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != user._id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.caseId = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setSelectedItems(temp);\n                      }}\n                      defaultValue=\"Imprest\"\n                      placeholder=\"Cse Id.\"\n                      class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                    />\n                  </TableCell>\n\n                  <TableCell>\n                    <div\n                      className=\" py-1\"\n                      onClick={() => {\n                        let invList = [...data, user];\n                        setData(invList);\n                        let temp = SelectedItems;\n                        temp = temp.filter((i) => i._id != user._id);\n\n                        setSelectedItems(temp);\n                      }}\n                    >\n                      <TrashIcon\n                        className=\"w-5 h-5 cursor-pointer m-2 text-2xl\"\n                        fill=\"maroon\"\n                        aria-hidden=\"true\"\n                      />\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"mb-64 mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n          <div className=\"mr-2 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \">From</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n         \n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1 \">To</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={toLocation}\n                onChange={(e) => {\n                  setToLocation(e.target.value);\n                  if(e.target.value==\"Vendor\"){\n                    setIsVendor(true);\n                  }else setIsVendor(false);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n                <option value=\"Vendor\">Vendor</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n          {isVendor?(\n          <div className=\"mx-2\">\n              <Button\n                layout=\"outline\"\n                className=\"w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </div>):null}\n\n          {/* -----------------------------------------Location ----------------------- */}\n          <div className=\" flex flex-row dark:text-white  \">\n            <div className=\" mx-3 my-1 \">LST No.</div>\n            <div class=\"relative mx-1 \">\n              <input\n                value={LSTNo}\n                onChange={(e) => setLSTNo(e.target.value)}\n                placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" my-2 \">Date</div>\n            <div class=\"relative mx-1 \">\n              <input\n                type=\"date\"\n                value={date}\n                onChange={(e) => setDate(e.target.value)}\n                placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          {/* //submitCustomer */}\n\n          <div className=\"flex flex-row dark:text-white mx-5 \">\n            <Button onClick={updateInventory}>Submit</Button>\n          </div>\n        </div>\n        {SelectedInv()}\n        <div className=\"my-5\">\n          <Button\n            onClick={() => {\n              if (location == \"\" || toLocation == \"\") {\n                setModalMessage(\"Select From and To Locations\");\n                setMessageModal(true);\n                return;\n              }\n              setShowInvTable(true);\n            }}\n          >\n            Add Product from Inventory\n          </Button>\n        </div>\n        {showInvTable ? invTable() : null}\n      </div>\n\n      {messageModalComponent()}\n     {VendorModal()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}