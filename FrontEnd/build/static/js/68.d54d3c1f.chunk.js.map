{"version":3,"sources":["pages/CustomerPages/CustomerViewCalls.js"],"names":["CustomerViewCalls","useState","isSetStatusModal","setisSetStatusModal","isReviewModalOpen","setIsReviewModalOpen","historyModalOpen","setHistoryModalOpen","activerowid","setActiveRowId","useContext","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","viewId","setViewId","refresh","setRefresh","callStatus","setCallStatus","fromDate","setFromDate","toDate","setToDate","Business","product","_id","unitName","customerName","accountName","enggName","engineer","selectedprod","setSelectedProd","searchquery","setSearchQuery","isHistoryImgViewModal","setIsHistoryImgViewModal","goodSpareHistoryImg","setGoodSpareHistoryImg","defectiveHistoryImg","setDefectiveHistoryImg","ccfrHistoryImg","setCcfrHistoryImg","totalResults","setTotalResults","isInfoModalOpen","setIsInfoModalOpen","brand","model","serialno","os","cpu","ram","hdd","smps","fan","motherboard","opticaldrive","keyboard","kbd","mouse","monitor","gcard","enetcard","serialcard","parallelcard","hbacard","raidcontroller","tapecontroller","others","infoModalAsset","setInfoModalAsset","SetStatusModal","isOpen","onClose","className","onClick","a","console","log","payload","id","update","employeeId","employeeName","axios","url","API","Cust","getId","method","temp","filter","c","useEffect","pages","limit","filters","getRole","customerId","accountId","response","total","out","ReviewSubmit","item","history","name","callNo","map","entry","i","key","moment","date","format","capitalize","callAttendDate","startOfService","endOfService","note","actionTaken","layout","newUrl","existUrl","ccfrImgUrl","HistoryModal","href","target","src","width","height","producttype","cpuname","cpusno","ramname","ramsno","fanname","fansno","motherboardname","motherboardsno","hddname","hddsno","smpsname","smpssno","keyboardname","keyboardsno","mousename","mousesno","monitorname","monitorsno","gcardname","gcardsno","enetcardname","enetcardsno","serialcardname","serialcardsno","parallelcardname","parallelcardsno","hbacardname","hbacardsno","raidcontrollername","raidcontrollersno","tapecontrollername","tapecontrollersno","opticaldrivename","opticaldrivesno","class","type","value","onChange","e","disabled","selected","xmlns","viewBox","d","onSubmit","preventDefault","placeholder","call","regtimestamp","time","phone","assetId","resultsPerPage","label","p"],"mappings":"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","file":"static/js/68.d54d3c1f.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Cust from \"../../helpers/auth/CustProfile\";\nimport PageTitle from \"../../components/Typography/PageTitle\";\nimport {\n  ChatIcon,\n  CartIcon,\n  MoneyIcon,\n  PeopleIcon,\n  ButtonsIcon,\n  HeartIcon,\n  EditIcon,\n  TrashIcon,\n  TickIcon,\n} from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Label,\n  Select,\n  Pagination,\n  Dropdown,\n  Input,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\n// import EngineerListModal from \"../../components/Modal/EngineerListModal\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { isAutheticated } from \"../../helpers/auth\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\n\nfunction CustomerViewCalls() {\n  // Bottom bar stuff\n  const [isSetStatusModal, setisSetStatusModal] = useState(false);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [historyModalOpen, setHistoryModalOpen] = useState(false);\n\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(0);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [viewId, setViewId] = useState(\"\");\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n  const [callStatus, setCallStatus] = useState(\"\");\n  const [fromDate, setFromDate] = useState(\"\");\n  const [toDate, setToDate] = useState(\"\");\n\n  // filterhooks\n  const [Business, setBusiness] = useState(\"\");\n  const [product, setProduct] = useState(\"\");\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n\n  /////// engineer\n  const [engineer, setEngineer] = useState({ _id: \"\", enggName: \"\" });\n  const [isEnggModalOpen, setIsEnggModalOpen] = useState(false);\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  // Image States\n  const [isHistoryImgViewModal, setIsHistoryImgViewModal] = useState(false);\n  const [goodSpareHistoryImg, setGoodSpareHistoryImg] = useState(\"\");\n  const [defectiveHistoryImg, setDefectiveHistoryImg] = useState(\"\");\n  const [ccfrHistoryImg, setCcfrHistoryImg] = useState(\"\");\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // info modal\n  const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);\n  const [infoModalAsset, setInfoModalAsset] = useState({\n    product: {\n      brand: \"\",\n      model: \"\",\n      serialno: \"\",\n      os: \"\",\n      cpu: [],\n      ram: [],\n      hdd: [],\n      smps: [],\n      fan: [],\n      motherboard: [],\n      opticaldrive: [],\n      keyboard: [],\n      kbd: [],\n      mouse: [],\n      monitor: [],\n      gcard: [],\n      enetcard: [],\n      serialcard: [],\n      parallelcard: [],\n      hbacard: [],\n      raidcontroller: [],\n      tapecontroller: [],\n      others: [],\n    },\n  });\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  const SetStatusModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isSetStatusModal}\n          onClose={() => setisSetStatusModal(false)}\n        >\n          <ModalHeader>Set Call Status</ModalHeader>\n          <ModalBody>\n            <div className=\"flex-col flex\">\n              <div className=\"font-xl dark:text-white\">Current Status:</div>\n              <Button className=\"font-xl\">Set Status</Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n              <Button className=\"font-xl my-2 mx-10 inline\">\n                Pending for Allocation\n              </Button>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={async () => {\n                console.log(\"SELECTED\", selectedprod);\n                let payload = {\n                  id: selectedprod._id,\n                  update: {\n                    employeeId: engineer._id,\n                    employeeName: engineer.enggName,\n                    callStatus: 1,\n                  },\n                };\n                try {\n                  let response = await axios({\n                    url: `${API}/call/${Cust.getId()}/ViewCallsg`,\n                    method: \"POST\",\n                    data: payload,\n                  });\n                  let temp = data;\n                  console.log(temp);\n                  temp = temp.filter((c) => {\n                    if (c._id === selectedprod._id) {\n                      c.callStatus = 1;\n                      c.employeeName = engineer.enggName;\n                      c.employeeId = engineer._id;\n                      return c;\n                    }\n                    setData(temp);\n                  });\n                  // console.log(response.data);\n                  setisSetStatusModal(false);\n                } catch (error) {\n                  throw error;\n                }\n              }}\n            >\n              Confirm Assignment\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryImgViewModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isHistoryImgViewModal}\n          onClose={() => {\n            setDefectiveHistoryImg(\"\");\n            setGoodSpareHistoryImg(\"\");\n            setCcfrHistoryImg(\"\");\n            setIsHistoryImgViewModal(false);\n          }}\n          className=\"w-9/12 dark:bg-gray-800 px-5 my-10 bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          // className=\"w-6/12 h-8/12 dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-scroll text-cente items-center justify-center\"\n        >\n          <ModalHeader>Images</ModalHeader>\n          <ModalBody>\n            <div className=\"flex flex-col justify-center \">\n              <hr></hr>\n              <div className=\"flex flex-row justify-evenly flex-wrap items-center \">\n                {defectiveHistoryImg != \"\" ? (\n                  <div>\n                    <div\n                      onClick={() => {\n                        console.log(defectiveHistoryImg);\n                      }}\n                      className=\"text-lg font-semibold my-2 w-full\"\n                    >\n                      Replaced Item\n                    </div>\n\n                    <a href={defectiveHistoryImg} target=\"_blank\">\n                      {/* <figure\n                      onMouseMove={handleMouseMove}\n                      style={{\n                        backgroundImage: `url(${defectiveHistoryImg})`,\n                        backgroundPosition: `${defectiveHistoryImgPos}`,\n                      }}\n                    >\n                      <img src={defectiveHistoryImg} width=\"350\" height=\"350\" />\n                    </figure> */}\n                      <img\n                        src={defectiveHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {goodSpareHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      Replaced by\n                    </div>\n                    <a href={goodSpareHistoryImg} target=\"_blank\">\n                      <img\n                        src={goodSpareHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n\n                {ccfrHistoryImg != \"\" ? (\n                  <div>\n                    <div className=\"text-lg font-semibold my-2 w-full\">\n                      {\" \"}\n                      CCFR\n                    </div>\n                    <a href={ccfrHistoryImg} target=\"_blank\">\n                      <img\n                        src={ccfrHistoryImg}\n                        className=\"my-4 border-4\"\n                        width=\"350\"\n                        height=\"350\"\n                      />\n                    </a>\n                  </div>\n                ) : null}\n              </div>\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            {/* <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => {\n                setDefectiveHistoryImg(\"\");\n                setGoodSpareHistoryImg(\"\");\n                setCcfrHistoryImg(\"\");\n                setIsHistoryImgViewModal(false);\n              }}\n            >\n              Okay!\n            </Button> */}\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"View Calls\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // Using an IIFE\n    (async function thegetter() {\n      // console.log(\"getter called\");\n      let payload = {\n        pages: {\n          page: page,\n          limit: resultsPerPage,\n        },\n        filters: {\n          callStatus: callStatus,\n          searchquery: searchquery,\n          fromDate: fromDate,\n          toDate: toDate,\n        },\n      };\n\n      if (Cust.getRole() == 1) {\n        payload.filters.customerId = Cust.getId();\n      } else if (Cust.getRole() == 2) {\n        payload.filters.accountId = Cust.getId();\n      } else return;\n      // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n      try {\n        let response = await axios({\n          url: `${API}/call/${Cust.getId()}/customergetall`,\n          method: \"POST\",\n          data: payload,\n        });\n        // console.log(response.data.out);\n        setTotalResults(response.data.total);\n        // const { total, data } = response.data;\n        // console.log(data + \"Now\");\n\n        setData(response.data.out);\n      } catch (error) {\n        throw error;\n      }\n    })();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [\n    page,\n    Business,\n    product,\n    refresh,\n    callStatus,\n    searchquery,\n    fromDate,\n    toDate,\n  ]);\n\n  // console.log(selectedprod);\n\n  const ReviewSubmit = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n        >\n          <ModalHeader>Updated Successfully!</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsReviewModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const HistoryModal = () => {\n    if (data[viewId]) {\n      let item = data[viewId];\n      let history = data[viewId].history;\n      console.log(history);\n\n      return (\n        <>\n          <Modal\n            isOpen={historyModalOpen}\n            onClose={() => setHistoryModalOpen(false)}\n            className=\"w-9/12  dark:bg-gray-800 p-10 my-6  bg-gray-50 text-gray-900 dark:text-white  rounded-lg overflow-y-auto\"\n          >\n            <ModalHeader className=\"flex flex-row justify-between text-xl\">\n              <div>{item.name}</div>\n              <div>\n                Call No: <Badge>{item.callNo}</Badge>{\" \"}\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <div className=\"font-semibold text-xl my-2\">Call History</div>\n              {/* ------------------------- Table ------------------------------ */}\n              <TableContainer className=\"mt-4\">\n                <Table>\n                  <TableHeader>\n                    <tr>\n                      <TableCell>Date</TableCell>\n                      <TableCell>Engineer</TableCell>\n                      <TableCell>Attended Date</TableCell>\n                      <TableCell>Start Of Service</TableCell>\n                      <TableCell>End Of Service</TableCell>\n                      <TableCell>Status</TableCell>\n                      <TableCell>Notes</TableCell>\n                      <TableCell>Action Taken</TableCell>\n                      <TableCell>Images</TableCell>\n                    </tr>\n                  </TableHeader>\n                  <TableBody>\n                    {history.map((entry, i) => (\n                      <TableRow\n                        className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                          activerowid == entry._id\n                            ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                            : \"white\"\n                        } `}\n                        key={i}\n                        onClick={() => {\n                          // setActiveRowId(user._id);\n                          // console.log(\"the id is \" + user._id);\n                          // setSelectedProd(user);\n                          // setAssetDetails(user);\n                          // console.log(user.product.keyboard[0].keyboardname);\n                        }}\n                      >\n                        <TableCell className=\"w-8\">\n                          <div className=\"flex items-center text-sm \">\n                            <div>\n                              <p className=\"font-semibold\">\n                                {moment(entry.date).format(\"DD-MM-YYYY\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {capitalize(entry.engineer)}\n                          </span>\n                        </TableCell>\n\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.callAttendDate}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">\n                            {entry.startOfService}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.endOfService}</span>\n                        </TableCell>\n                        <TableCell>\n                          <span>\n                            {entry.callStatus == 0 ? (\n                              <Badge>Pending For Allocation</Badge>\n                            ) : null}\n                            {entry.callStatus == 1 ? (\n                              <Badge>Pending for Percall Approval</Badge>\n                            ) : null}\n                            {entry.callStatus == 2 ? (\n                              <Badge>Pending for Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 3 ? (\n                              <Badge>Pending for OEM Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 4 ? (\n                              <Badge>Pending for 2nd Response</Badge>\n                            ) : null}\n                            {entry.callStatus == 5 ? (\n                              <Badge>Pending for Customer</Badge>\n                            ) : null}\n                            {entry.callStatus == 6 ? (\n                              <Badge>Under Observation</Badge>\n                            ) : null}\n                            {entry.callStatus == 7 ? (\n                              <Badge>Pending for Others</Badge>\n                            ) : null}\n                            {entry.callStatus == 8 ? (\n                              <Badge>Pending for Spare</Badge>\n                            ) : null}\n                            {entry.callStatus == 9 ? (\n                              <Badge>Spare in Transit</Badge>\n                            ) : null}\n                            {entry.callStatus == 10 ? (\n                              <Badge>Cancelled Calls</Badge>\n                            ) : null}\n                            {entry.callStatus == 11 ? (\n                              <Badge>Closed Calls</Badge>\n                            ) : null}\n                            {entry.callStatus == 12 ? (\n                              <Badge>Spare Taken CMRR</Badge>\n                            ) : null}\n                            {entry.callStatus == 13 ? (\n                              <Badge>Pending For Spare Collection</Badge>\n                            ) : null}\n                            {entry.callStatus == 14 ? (\n                              <Badge>Standby Given</Badge>\n                            ) : null}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"flex flex-row max-w-sm\">\n                          <span className=\"w-full overflow-auto\">\n                            {entry.note}\n                          </span>\n                        </TableCell>\n                        <TableCell>\n                          <span className=\"text-sm\">{entry.actionTaken}</span>\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            layout=\"outline\"\n                            onClick={() => {\n                              if (entry.newUrl)\n                                setGoodSpareHistoryImg(entry.newUrl);\n                              if (entry.existUrl)\n                                setDefectiveHistoryImg(entry.existUrl);\n                              if (entry.ccfrImgUrl)\n                                setCcfrHistoryImg(entry.ccfrImgUrl);\n                              setIsHistoryImgViewModal(true);\n                            }}\n                          >\n                            Show\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n                {/* <TableFooter>\n                  <Pagination\n                    totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    label=\"Table navigation\"\n                    onChange={onPageChange}\n                  />\n                </TableFooter> */}\n              </TableContainer>\n            </ModalBody>\n            <ModalFooter></ModalFooter>\n          </Modal>\n        </>\n      );\n    }\n  };\n\n  const InformationModal = () => {\n    console.log(infoModalAsset);\n    return (\n      <>\n        <Modal\n          isOpen={isInfoModalOpen}\n          onClose={() => setIsInfoModalOpen(false)}\n          className=\" bg-white dark:bg-gray-800 px-10 w-205    py-10 rounded-lg\"\n        >\n          <ModalHeader>Product Information</ModalHeader>\n          <ModalBody>\n            <div className=\"  \">\n              <div className=\" \">\n                <div className=\" dark:text-gray-200 text-black flex flex-row flex-wrap items-center   rounded-md justify-between lg:space-x-2  w-full \">\n                  {/* /////////////////////////////// . PRODUCT INFO  ///////////////////////////////////////////// */}\n                  <div className=\"flex flex-col lg:flex-row items-center justify-between lg:space-x-2  w-full  bg-gray-100 dark:bg-cool-gray-900 px-2  rounded-md\">\n                    <div className=\"my-2  \">\n                      <span>Brand :</span>\n                      <span className=\"font-semibold\">\n                        {\" \"}\n                        {infoModalAsset.product.brand}\n                      </span>\n                    </div>\n                    <div className=\"my-2 \">\n                      <span>Model:</span>\n                      <span className=\"font-semibold\">\n                        {\" \"}\n                        {infoModalAsset.product.model}\n                      </span>\n                    </div>\n                    <div className=\"my-2 \">\n                      <span>Serial Number: </span>\n                      <span className=\"font-semibold\">\n                        {\" \"}\n                        {infoModalAsset.product.serialno}\n                      </span>\n                    </div>\n\n                    {infoModalAsset.producttype == \"Laptop\" ||\n                    infoModalAsset.producttype == \"Server\" ||\n                    infoModalAsset.producttype == \"Desktop\" ? (\n                      <>\n                        <div className=\"\">\n                          <span>Operating System : </span>\n                          <span className=\"font-semibold\">\n                            {infoModalAsset.product.os}\n                          </span>\n                        </div>\n                      </>\n                    ) : null}\n                  </div>\n                  <br />\n                </div>\n                {/* <div className=\"flex flex-row flex-wrap items-center justify-start lg:space-x-2  \"> */}\n                {/* -------------------CPU and RAM-------------------------- */}\n                <div className=\"flex flex-col lg:flex-row lg:flex-wrap items-start lg:space-x-1 justify-between \">\n                  {/* ----------------CPU------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">CPU</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {/* <hr className=\"mb-2 mt-1\" /> */}\n                        {infoModalAsset.product.cpu.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.cpuname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.cpusno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n                  {/* ----------------CPU------------------------------- */}\n                  {/* ----------------ram------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">RAM</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.ram.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.ramname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.ramsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n                  {/* </div> */}\n                  {/* ----------------ram------------------------------- */}\n                  {/* </div> */}\n                  {/* <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------fan------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Storage\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">FAN</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.fan.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.fanname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.fansno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n                  {/* ----------------fan------------------------------- */}\n                  {/* ----------------motherboard------------------------------- */}\n\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Mother-Board</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.motherboard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 mx-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.motherboardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.motherboardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n                  {/* ----------------motherboard------------------------------- */}\n                  {/* </div>\n                <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------hdd------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Storage\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">HDD</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.hdd.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.hddname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>S.No:{item.hddsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------hdd------------------------------- */}\n\n                  {/* ----------------smps------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Storage\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">SMPS</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.smps.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.smpsname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.smpssno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n                  {/* </div> */}\n\n                  {/* ----------------smps------------------------------- */}\n\n                  {/* <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------kbd------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Router\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Keyboard</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.keyboard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.keyboardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.keyboardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------keyboard------------------------------- */}\n\n                  {/* ----------------mouse------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Storage\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Mouse</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.mouse.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.mousename}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.mousesno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------mouse------------------------------- */}\n                  {/* </div>\n\n                <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------monitor------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Router\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Monitor</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.monitor.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.monitorname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.monitorsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------monitor------------------------------- */}\n\n                  {/* ----------------gcard------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Graphics Card</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.gcard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.gcardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.gcardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------gcard------------------------------- */}\n                  {/* </div> */}\n\n                  {/* <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------enetcard------------------------------- */}\n                  {infoModalAsset.producttype == \"Laptop\" ||\n                  infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">ENET Card</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.enetcard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.enetcardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.enetcardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------enetcard------------------------------- */}\n\n                  {/* ----------------serialcard------------------------------- */}\n                  {infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Serial Card</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.serialcard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.serialcardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.serialcardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------serialcard------------------------------- */}\n                  {/* </div>\n\n                <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------parallelcard------------------------------- */}\n                  {infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Parallel Card</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.parallelcard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.parallelcardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.parallelcardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------parallelcard------------------------------- */}\n\n                  {/* ----------------hbacard------------------------------- */}\n                  {infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Storage\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">HBA Card</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.hbacard.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.hbacardname}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.hbacardsno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------hbacard------------------------------- */}\n\n                  {/* ----------------raidcontroller------------------------------- */}\n                  {infoModalAsset.producttype == \"Server\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Raid Controller</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.raidcontroller.map(\n                          (item, i) => {\n                            return (\n                              <div key={i}>\n                                <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                  <div className=\"w-full my-1\">\n                                    <span>{item.raidcontrollername}</span>\n                                  </div>\n                                  <div className=\"w-full my-1\">\n                                    <span>{item.raidcontrollersno}</span>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          }\n                        )}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------raidcontroller------------------------------- */}\n                  {/* </div>\n                <div className=\"flex flex-col lg:flex-row items-start lg:space-x-1\"> */}\n                  {/* ----------------tapecontroller------------------------------- */}\n                  {infoModalAsset.producttype == \"Server\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Tape Controller</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.tapecontroller.map(\n                          (item, i) => {\n                            return (\n                              <div key={i}>\n                                <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                  <div className=\"w-full my-1\">\n                                    <span>{item.tapecontrollername}</span>\n                                  </div>\n                                  <div className=\"w-full my-1\">\n                                    <span>{item.tapecontrollersno}</span>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          }\n                        )}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------tapecontroller------------------------------- */}\n\n                  {/* ----------------opticaldrive------------------------------- */}\n                  {infoModalAsset.producttype == \"Server\" ||\n                  infoModalAsset.producttype == \"Desktop\" ||\n                  infoModalAsset.producttype == \"Laptop\" ? (\n                    <div className=\" w-64 text-gray-800 dark:text-gray-200 my-4 bg-gray-100 dark:bg-cool-gray-900 p-2 rounded-md\">\n                      <>\n                        <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2 font-semibold\">\n                          <div className=\"w-full my-1\">Optical Drive</div>\n                          <div className=\"w-full my-1\">Serial No.</div>\n                        </div>\n                        {infoModalAsset.product.opticaldrive.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>{item.opticaldrivename}</span>\n                                </div>\n                                <div className=\"w-full my-1 break-all\">\n                                  <span>{item.opticaldrivesno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    </div>\n                  ) : null}\n\n                  {/* ----------------opticaldrive------------------------------- */}\n\n                  {/* ----------------others------------------------------- */}\n                  {/* <div className=\"w-full my-4 bg-gray-100 dark:bg-gray-800 p-2 rounded-md\">\n                    {true ? (\n                      <>\n                        <div className=\"flex flex-row items-center\">\n                          <div className=\"font-semibold\">\n                            <span>others</span>\n                          </div>\n                        </div>\n                        <hr className=\"mb-2 mt-1\" />\n                        {infoModalAsset.product.others.map((item, i) => {\n                          return (\n                            <div key={i}>\n                              <div className=\"flex flex-col lg:flex-row items-center justify-start lg:space-x-2\">\n                                <div className=\"w-full my-1\">\n                                  <span>\n                                    item.othersname}\n                                  </span>\n                                </div>\n                                <div className=\"w-full my-1\">\n                                  <span>{item.otherssno}</span>\n                                </div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </>\n                    ) : null}\n                  </div> */}\n\n                  {/* ----------------others------------------------------- */}\n                </div>\n                {/* //////////////////////////////////////////////////////////////////////////// */}\n              </div>\n              {/* //////////////////////////////////////////////////////////////////////////// */}\n            </div>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsInfoModalOpen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n      {/* <CustomerSelection\n        isModalOpen={isModalOpen}\n        setIsModalOpen={setIsModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n        refresh={refresh}\n        setRefresh={setRefresh}\n      /> */}\n      <SetStatusModal />\n      <ReviewSubmit />\n      {HistoryModal()}\n      {HistoryImgViewModal()}\n      {InformationModal()}\n\n      {/* ---------------------Customer Selection Modal----------------------------------------- */}\n\n      {/* {floatbox ? <AssetFloat /> : null} */}\n      <div className=\"mb-64 mt-4\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-6 \">\n            <Label className=\"\">\n              <span>From Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1\"\n                type=\"date\"\n                value={fromDate}\n                onChange={(e) => setFromDate(e.target.value)}\n              />\n            </Label>\n            <Label className=\"\">\n              <span>To Date</span>\n              <input\n                className=\"mt-1 p-2 rounded-sm mx-1\"\n                type=\"date\"\n                value={toDate}\n                onChange={(e) => setToDate(e.target.value)}\n              />\n            </Label>\n\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={callStatus}\n                onChange={(e) => {\n                  setCallStatus(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Call Status\n                </option>\n                <option value=\"\">All</option>\n                <option selected value=\"0\">\n                  Pending For Allocation\n                </option>\n                <option value=\"1\">Pending for Percall Approval</option>\n                <option value=\"2\">Pending for Response</option>\n                <option value=\"3\">Pending for OEM Response</option>\n                <option value=\"4\">Pending for 2nd Response</option>\n                <option value=\"5\">Pending for Customer</option>\n                <option value=\"6\">Under Observation</option>\n                <option value=\"7\">Pending for Others</option>\n                <option value=\"8\">Pending for Spare</option>\n                <option value=\"13\">Pending For Spare Collection</option>\n                <option value=\"12\">Spare Taken CMRR</option>\n                <option value=\"14\"> Standby Given</option>\n                <option value=\"9\">Spare in Transit</option>\n                <option value=\"10\">Cancelled Calls</option>\n                <option value=\"11\">Closed Calls</option>\n                {/* <option value=\"-1\">Allocated</option> */}\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search by Call No.\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n          {/* ----------------------------------------Row 2 -------------------------------------------------------------------- */}\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Call No</TableCell>\n                <TableCell>Date</TableCell>\n                <TableCell>Unit Name</TableCell>\n                <TableCell>Phone</TableCell>\n                <TableCell>Call Status</TableCell>\n                <TableCell>Assigned Employee</TableCell>\n                <TableCell> History</TableCell>\n                <TableCell>Product Info</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((call, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-900 \n                    `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(call._id);\n                    // console.log(\"the id is \" + call._id);\n                    setSelectedProd(call);\n                    console.log(\"SELECTD\", call);\n                    // console.log(call.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      <div>\n                        <p className=\"font-semibold\">{call.callNo}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex flex-col\">\n                      <span className=\"text-sm\">\n                        {moment(call.date).format(\"DD/MM/YYYY\")}\n                      </span>\n                      {call.regtimestamp ? (\n                        <span className=\"text-xs\">\n                          {moment(`${\"2018-04-02\"}T${call.time}`).format(\n                            \"h:mm a\"\n                          )}\n                        </span>\n                      ) : null}\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.unitName}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{call.phone}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span>\n                      {call.callStatus == 0 ? (\n                        <Badge>Pending For Allocation</Badge>\n                      ) : null}\n                      {call.callStatus == 1 ? (\n                        <Badge>Pending for Percall Approval</Badge>\n                      ) : null}\n                      {call.callStatus == 2 ? (\n                        <Badge>Pending for Response</Badge>\n                      ) : null}\n                      {call.callStatus == 3 ? (\n                        <Badge>Pending for OEM Response</Badge>\n                      ) : null}\n                      {call.callStatus == 4 ? (\n                        <Badge>Pending for 2nd Response</Badge>\n                      ) : null}\n                      {call.callStatus == 5 ? (\n                        <Badge>Pending for Customer</Badge>\n                      ) : null}\n                      {call.callStatus == 6 ? (\n                        <Badge>Under Observation</Badge>\n                      ) : null}\n                      {call.callStatus == 7 ? (\n                        <Badge>Pending for Others</Badge>\n                      ) : null}\n                      {call.callStatus == 8 ? (\n                        <Badge>Pending for Spare</Badge>\n                      ) : null}\n                      {call.callStatus == 9 ? (\n                        <Badge>Spare in Transit</Badge>\n                      ) : null}\n                      {call.callStatus == 10 ? (\n                        <Badge>Cancelled Calls</Badge>\n                      ) : null}\n                      {call.callStatus == 11 ? (\n                        <Badge>Closed Calls</Badge>\n                      ) : null}\n                      {call.callStatus == 12 ? (\n                        <Badge>Spare Taken CMRR</Badge>\n                      ) : null}\n                      {call.callStatus == 13 ? (\n                        <Badge>Pending For Spare Collection</Badge>\n                      ) : null}\n                      {call.callStatus == 14 ? (\n                        <Badge>Standby Given</Badge>\n                      ) : null}\n                    </span>\n                  </TableCell>\n                  {/* <TableCell> */}\n                  {/* <div className=\"flex \">\n                      {/* <Label className=\"w-full\"> */}\n                  {/* <Select\n                        className=\"inline\"\n                        onChange={(e) => {\n                          // setAccType(parseInt(e.target.value));\n                          let temp = data;\n                          console.log(temp);\n                          temp = temp.filter((c) => {\n                            if (c._id === call._id) {\n                              c.callStatus = e.target.value;\n                              return c;\n                            } else return c;\n                          });\n                          setData(temp);\n                        }}\n                        value={call.callStatus}\n                      >\n                        <option value=\"0\">Not Allocated</option>\n                        <option value=\"1\">Pending for Percall Approval</option>\n                        <option value=\"2\"> Pending for Response</option>\n                        <option value=\"3\"> Pending for OEM Response</option>\n                        <option value=\"4\"> Pending for 2nd Response</option>\n                        <option value=\"5\"> Pending for Customer</option>\n                        <option value=\"6\"> Under Observation</option>\n                        <option value=\"7\"> Pending for Others</option>\n                        <option value=\"8\"> Pending for Spare</option>\n                        <option value=\"9\"> Spare in Transit</option>\n                        <option value=\"10\"> Cancelled Calls</option>\n                        <option value=\"11\"> Closed Calls</option>\n                      </Select> */}\n                  {/* </Label> */}\n                  {/* <div\n                        className=\"p-1 m-2 dark:hover:bg-green-700 hover:bg-green-200 rounded-full text-green-400\"\n                        onClick={async () => {\n                          let payload = {\n                            id: call._id,\n                            update: {\n                              callStatus: call.callStatus,\n                            },\n                          };\n                          try {\n                            let response = await axios({\n                              url: `${API}/call/${Emp.getId()}/assignEngg`,\n                              method: \"POST\",\n                              data: payload,\n                            });\n                            console.log(\"updated\");\n                            setIsReviewModalOpen(true);\n                          } catch (error) {\n                            throw error;\n                          }\n                        }}\n                      >\n                        <TickIcon\n                          className=\"w-5 h-5 fill-current\"\n                          aria-hidden=\"true\"\n                        />\n                      </div> */}\n                  {/* </div> */}\n                  {/* </TableCell> */}\n                  <TableCell>\n                    {call.employeeId ? (\n                      <>\n                        {call.employeeName}\n                        {/* <Button layout=\"link\" size=\"icon\" aria-label=\"Edit\" onClick={()=>setIsEnggModalOpen(true)} className=\"rounded-full mx-2 \">\n                       \n                          <EditIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                        \n                      </Button> */}\n                      </>\n                    ) : (\n                      <>\n                        {/* <Button onClick={()=>setIsEnggModalOpen(true)}> */}\n                        Not Assigned\n                        {/* </Button> */}\n                      </>\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex justify-start items-center space-x-2\">\n                      {/* <Link\n                        key={call._id}\n                        to={`/app/call/updatecall/${call._id}/${call.assetId._id}`}\n                      >\n                        <Button\n                          layout=\"outline\"\n                          onClick={() => {}}\n                          className=\" \"\n                        >\n                          Update\n                        </Button>\n                      </Link> */}\n                      <Button\n                        onClick={() => {\n                          setViewId(i);\n                          setHistoryModalOpen(true);\n                        }}\n                        className=\" text-gray-600 dark:text-gray-200 px-3 py-3 text-sm bg-gray-200 dark:bg-gray-700 tetx-white rounded-md font-semibold cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-800\"\n                        // layout=\"outline\"\n                      >\n                        History\n                      </Button>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span\n                      onClick={() => {\n                        setInfoModalAsset(call.assetId);\n                        setIsInfoModalOpen(true);\n                      }}\n                      className=\" text-gray-600 dark:text-gray-200 px-3 py-3 text-sm bg-gray-200 dark:bg-gray-700 tetx-white rounded-md font-semibold cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-800\"\n                    >\n                      Product\n                    </span>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default CustomerViewCalls;\n"],"sourceRoot":""}