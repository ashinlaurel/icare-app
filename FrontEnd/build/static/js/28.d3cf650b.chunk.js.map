{"version":3,"sources":["pages/LST/LST.js","components/Modal/AssetFilters/CustomerSelection.js","components/Modal/UnitListModal.js"],"names":["LST","useState","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","vendorsearch","setVendorsearch","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","SelectedItems","setSelectedItems","refresh","setRefresh","LSTtype","setLSTtype","type","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","moment","format","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","isVendorModalopen","setIsVendorModalopen","vendors","setVendors","defVendor","_id","name","aadharNo","PANNo","GSTNo","selectedVendor","setselectedVendor","isVendor","setIsVendor","unitName","unit","setUnit","customerName","customer","setCustomer","accountName","account","setAccount","isCustomerModalOpen","setIsCustomerModalOpen","CMRRinvdetails","sno","invnumber","caseId","systype","CMRRvalues","setCMRRValues","a","payload","filters","axios","url","API","Emp","getId","method","response","console","log","out","useEffect","getVendorList","totalResults","setTotalResults","onPageChange","p","LSTNumberSetter","from","thecallcount","locstr","year","callnumber","thegetter","pages","limit","total","updateInventory","MakeCMRR","length","invIds","map","item","push","newhistory","histtype","callId","assetId","status","note","id","update","$push","history","LSTCustomer","lst","to","invItems","unitId","accountId","customerId","vendorId","vendorName","CMRRItems","className","class","value","onChange","e","target","default","selected","xmlns","viewBox","d","disabled","layout","onClick","placeholder","aria-label","aria-haspopup","user","i","key","temp","filter","x","t","defaultValue","invList","fill","aria-hidden","onSubmit","preventDefault","capitalize","stocktype","expirydate","added","initList","resultsPerPage","label","isOpen","onClose","num","newitem","newlist","wty","add","isModalOpen","setIsModalOpen","CustomerSelection","theunitdetails","setTheUnitDetails","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","Axios","post","accs","pickAccount","u","pickUnit","contactPerson","contactNo","selectedIndex","onSelect","ind","UnitListModal"],"mappings":"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","file":"static/js/28.d3cf650b.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon, Remove } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\nimport UnitListModal from \"../../components/Modal/UnitListModal\";\nimport SectionTitle from \"../../components/Typography/SectionTitle\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n  Input,\n  HelperText,\n  Label,\n  Select,\n  Card,\n  CardBody,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\nimport { capitalize } from \"../../helpers/toolfuctions/toolfunctions\";\nimport { CloseIcon } from \"../../icons\";\n\nfunction LST() {\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } =\n    useContext(BottomBarContext);\n  const [vendorsearch, setVendorsearch] = useState(\"\");\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [LSTtype, setLSTtype] = useState(\"Normal\");\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  // const [customer, setCustomer] = useState(\"\");\n  const [date, setDate] = useState(moment().format());\n  const [condition, setCondition] = useState(\"Available\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  //vendors\n  const [isVendorModalopen, setIsVendorModalopen] = useState(false);\n  const [vendors, setVendors] = useState([]);\n  const defVendor = {\n    _id: \"\",\n    name: \"\",\n    aadharNo: \"\",\n    PANNo: \"\",\n    GSTNo: \"\",\n  };\n  const [selectedVendor, setselectedVendor] = useState(defVendor);\n\n  const [isVendor, setIsVendor] = useState(false);\n\n  //customer\n  const [unit, setUnit] = useState({ _id: \"\", unitName: \"\" });\n  const [customer, setCustomer] = useState({ _id: \"\", customerName: \"\" });\n  const [account, setAccount] = useState({ _id: \"\", accountName: \"\" });\n  const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);\n\n  // CMRR\n\n  const CMRRinvdetails = {\n    type: \"\",\n    name: \"\",\n    sno: \"\",\n    condition: \"Good\",\n    invnumber: \"\",\n    location: \"In Transit\",\n    //-------\n    caseId: \"imprest\",\n    systype: \"item\",\n  };\n  const [CMRRvalues, setCMRRValues] = useState([CMRRinvdetails]);\n\n  async function getVendorList() {\n    let payload = {\n      filters: {\n        searchquery: vendorsearch,\n      },\n    };\n    try {\n      let response = await axios({\n        url: `${API}/vendor/${Emp.getId()}/getAll`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setVendors(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n  useEffect(() => {\n    getVendorList();\n  }, [vendorsearch]);\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n  // LST NUM\n  const LSTNumberSetter = async (date, from) => {\n    console.log(date, from);\n    if (from == \"\" || date == \"\") return;\n    let payload = {\n      from: from,\n      date: date,\n    };\n    let thecallcount = 0;\n    try {\n      thecallcount = await axios({\n        url: `${API}/lst/${Emp.getId()}/lstbydate`,\n        method: \"POST\",\n        data: payload,\n      });\n    } catch (error) {\n      throw error;\n    }\n\n    let locstr;\n    from == \"Trivandrum\"\n      ? (locstr = \"TVM\")\n      : from == \"Kottayam\"\n      ? (locstr = \"KTM\")\n      : (locstr = \"CLT\");\n\n    let year = moment(date).format(\"YY\");\n    let month = moment(date).format(\"MM\");\n    let day = moment(date).format(\"DD\");\n    let callnumber = thecallcount.data + 1;\n    if (callnumber < 10) {\n      callnumber = \"00\" + callnumber;\n    } else if (callnumber < 100) {\n      callnumber = \"0\" + callnumber;\n    }\n    console.log(thecallcount.data);\n\n    let thestring = \"ICS\" + locstr + year + callnumber;\n    setLSTNo(thestring);\n    // setValues({ ...values, callNo: thestring, date: date });\n    // // ------history management\n    // let temp = callhistory;\n    // temp[0].date = date;\n    // setCallHistory(temp);\n\n    // console.log(thestring);\n  };\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n  //   useEffect(() => {\n  //     setBBarOpen(1);\n  //     return () => {\n  //       setBBarOpen(0);\n  //       setAssetDetails({});\n  //     };\n  //   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory = async () => {\n    if (LSTNo == \"\") {\n      setModalMessage(\"LST Number necessary\");\n      setMessageModal(true);\n      return;\n    }\n    if (date == \"\") {\n      setModalMessage(\"Date Necessary\");\n      setMessageModal(true);\n      return;\n    }\n    // if (location == toLocation) {\n    //   setModalMessage(\"From and to Location is same!\");\n    //   setMessageModal(true);\n    //   return;\n    // }\n    if (location == \"\") {\n      setModalMessage(\"From location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (toLocation == \"\") {\n      setModalMessage(\"To location not selected\");\n      setMessageModal(true);\n      return;\n    }\n    if (LSTtype == \"CMRR\") {\n      console.log(CMRRvalues);\n      MakeCMRR();\n    }\n    if (SelectedItems.length == 0) {\n      setModalMessage(\"No items selected\");\n      setMessageModal(true);\n      return;\n    }\n    let invIds = [];\n\n    SelectedItems.map(async (item) => {\n      invIds.push(item._id);\n      // ----history ---\n      let newhistory = {\n        histtype: \"lst\",\n        date: date,\n        location: \"In Transit\",\n        callId: \"Nil\",\n        assetId: \"Nil\",\n        status: item.condition,\n        note: `Item sent from ${location} to ${toLocation}`,\n      };\n      const data = {\n        id: item._id,\n        update: {\n          location: \"In Transit\",\n          caseId: item.caseId,\n          $push: { history: newhistory },\n          LSTtype: LSTtype,\n          LSTCustomer: \"\",\n        },\n      };\n      if (LSTtype == \"Customer\") data.update.LSTCustomer = customer;\n      console.log(\"PAYLOAD\", data);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: data,\n        });\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    });\n\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: invIds,\n      status: \"In Transit\",\n      LSTtype: LSTtype,\n    };\n\n    if (LSTtype == \"Customer\") {\n      lst.unitId = unit._id;\n      lst.unitName = unit.unitName;\n      lst.accountId = account._id;\n      lst.accountName = account.accountName;\n      lst.customerId = customer._id;\n      lst.customerName = customer.customerName;\n    }\n\n    if (selectedVendor._id != \"\") {\n      console.log(\"here\");\n      lst.vendorId = selectedVendor._id;\n      lst.vendorName = selectedVendor.name;\n    }\n    console.log(\"LST\", lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\");\n      setDate(\"\");\n      setselectedVendor(defVendor);\n      LSTNumberSetter(date, location);\n      // setData([]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const MakeCMRR = async () => {\n    let lst = {\n      from: location,\n      to: toLocation,\n      LSTNo: LSTNo,\n      date: date,\n      invItems: [],\n      status: \"In Transit\",\n      LSTtype: LSTtype,\n      CMRRItems: CMRRvalues,\n    };\n\n    console.log(\"LST\", lst);\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\");\n      // setLocation(\"\")\n      setToLocation(\"\");\n      setDate(\"\");\n      setselectedVendor(defVendor);\n      // setData([]);\n      setCMRRValues([CMRRinvdetails]);\n      setMessageModal(true);\n      setSelectedItems([]);\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  };\n\n  const VendorModal = () => {\n    return (\n      <>\n        <Modal\n          isOpen={isVendorModalopen}\n          onClose={() => setIsVendorModalopen(false)}\n        >\n          <ModalHeader>\n            <tr>\n              <TableCell>Pick Vendor</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form\n                  onSubmit={(e) => {\n                    e.preventDefault();\n                  }}\n                >\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={(e) => {\n                      setVendorsearch(e.target.value);\n                    }}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </ModalHeader>\n          <ModalBody className=\"overflow-y-scroll h-64\">\n            <TableContainer>\n              <Table>\n                <TableHeader>\n                  <tr>\n                    <TableCell>Customer</TableCell>\n                    {/* <TableCell>Unit</TableCell> */}\n                    {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n                  </tr>\n                </TableHeader>\n                <TableBody>\n                  {vendors.map((user, i) => (\n                    <TableRow\n                      key={i}\n                      className=\"hover:bg-purple-900 \"\n                      onClick={() => {\n                        console.log(user);\n                        setselectedVendor(user);\n                        setIsVendorModalopen(false);\n                      }}\n                    >\n                      <TableCell>\n                        <div>\n                          <div>\n                            <p className=\"font-semibold\">{user.name}</p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setIsVendorModalopen(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const invTable = () => {\n    return (\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"mouse\">Mouse</option>\n                <option value=\"keyboard\">Keyboard</option>\n                <option value=\"monitor\">Monitor</option>\n                <option value=\"cpu\">Cpu</option>\n                <option value=\"ram\">Ram</option>\n                <option value=\"fan\">Fan</option>\n                <option value=\"motherboard\">Motherboard</option>\n                <option value=\"smps\">SMPS</option>\n                <option value=\"hdd\">HDD</option>\n                {/* <option value=\"SMPS\">SMPS</option> */}\n                <option value=\"gcard\">Gcard</option>\n                <option value=\"enetcard\">Enet Card</option>\n                <option value=\"serialcard\">Serial Card</option>\n                <option value=\"paralellcard\">Paralell Card</option>\n                <option value=\"opticaldrive\">Optical Drive</option>\n                <option value=\"others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n\n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n                <option value=\"Used\">Used</option>\n                <option value=\"Available\" selected>\n                  Available\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"Damaged\">Damaged</option>\n                <option value=\"DOA\">DOA</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Category</TableCell>\n                <TableCell>Description</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Stock Type</TableCell>\n                <TableCell>Wty.</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Add</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{capitalize(user.type)}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.stocktype}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.expirydate}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      layout=\"outline\"\n                      className=\"dark:border-green-700 border-green-400\"\n                      onClick={() => {\n                        let added = false;\n                        let initList = data;\n                        initList = initList.filter((i) => i._id != user._id);\n                        console.log(initList);\n                        setData(initList);\n                        SelectedItems.map((i) => {\n                          if (i._id == user._id) {\n                            console.log(i._id, user._id);\n                            setModalMessage(\"Product already Added!\");\n                            setMessageModal(true);\n                            added = true;\n                          }\n                        });\n                        if (added) return;\n                        user.caseId = \"imprest\";\n                        let temp = [...SelectedItems, user];\n                        setSelectedItems(temp);\n                        // setShowInvTable(false);\n                        // setModalMessage(\"Product  Added!\");\n                        // setMessageModal(true);\n                      }}\n                    >\n                      Add\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </div>\n    );\n  };\n\n  const SelectedInv = () => {\n    return (\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            {selectedVendor.name !== \"\" ? (\n              <> Vendor:{selectedVendor.name}</>\n            ) : null}\n          </div>\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n            Selected Items\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Case Id</TableCell>\n                <TableCell>Remove</TableCell>\n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].keyboardname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  <TableCell>\n                    <input\n                      value={user.caseId}\n                      onChange={(e) => {\n                        let temp = SelectedItems;\n                        // newuser[\"caseId\"]=e.target.value\n                        temp = temp.filter((x) => {\n                          if (x._id != user._id) return x;\n                          else {\n                            console.log(\"here\", e.target.value);\n                            let t = x;\n                            t.caseId = e.target.value;\n                            return t;\n                          }\n                        });\n                        console.log(temp);\n                        setSelectedItems(temp);\n                      }}\n                      defaultValue=\"Imprest\"\n                      placeholder=\"Cse Id.\"\n                      class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                    />\n                  </TableCell>\n\n                  <TableCell>\n                    <div\n                      className=\" py-1\"\n                      onClick={() => {\n                        let invList = [...data, user];\n                        setData(invList);\n                        let temp = SelectedItems;\n                        temp = temp.filter((i) => i._id != user._id);\n\n                        setSelectedItems(temp);\n                      }}\n                    >\n                      <TrashIcon\n                        className=\"w-5 h-5 cursor-pointer m-2 text-2xl\"\n                        fill=\"maroon\"\n                        aria-hidden=\"true\"\n                      />\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      </>\n    );\n  };\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal isOpen={messageModal} onClose={() => setMessageModal(false)}>\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  const CMRRMenu = (num) => {\n    let itemtype = \"item\";\n    return (\n      <div className=\"px-4 py-3 my-2 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n        <Label className=\"font-bold flex-row flex justify-between\">\n          <span>Item Number : {num + 1}</span>{\" \"}\n          <div\n            layout=\"outline\"\n            onClick={() => {\n              let newitem = [...CMRRvalues];\n              newitem = newitem.filter((item, i) => {\n                if (i != num) return item;\n              });\n              setCMRRValues(newitem);\n            }}\n            className=\"border-gray-100 rounded-full cursor pointer\"\n          >\n            <CloseIcon\n              fill=\"lightgray\"\n              className=\"w-5 h-5 cursor-pointer \"\n              aria-hidden=\"true\"\n            />\n          </div>\n        </Label>\n        <hr className=\"mb-5 mt-2\" />\n        {/* ------------------------Row 1-------------------------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Type*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].systype}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].systype = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option selected value=\"item\">\n                  Item\n                </option>\n                <option value=\"full system\">Full System</option>\n              </Select>\n            </Label>\n          </div>\n\n          {CMRRvalues[num].systype == \"item\" ? (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value;\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"mouse\">Mouse</option>\n                  <option value=\"keyboard\">Keyboard</option>\n                  <option value=\"monitor\">Monitor</option>\n                  <option value=\"cpu\">Cpu</option>\n                  <option value=\"ram\">Ram</option>\n                  <option value=\"fan\">Fan</option>\n                  <option value=\"motherboard\">Motherboard</option>\n                  <option value=\"smps\">SMPS</option>\n                  <option value=\"hdd\">HDD</option>\n                  <option value=\"gcard\">Gcard</option>\n                  <option value=\"enetcard\">Enet Card</option>\n                  <option value=\"serialcard\">Serial Card</option>\n                  <option value=\"paralellcard\">Paralell Card</option>\n                  <option value=\"opticaldrive\">Optical Drive</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          ) : (\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Select Category*</span>\n                <Select\n                  className=\"mt-1\"\n                  value={CMRRvalues[num].type}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    // console.log(e.target.value)\n                    newlist[num].type = e.target.value;\n                    // newlist[num].type = newlist[num].type.toLowerCase();\n                    // console.log(newlist)\n\n                    setCMRRValues(newlist);\n                  }}\n                >\n                  <option value=\"\" selected disabled>\n                    Select Type\n                  </option>\n\n                  <option value=\"console\">Console</option>\n                  <option value=\"DMP\">DMP</option>\n                  <option value=\"inkjet\">Inkjet</option>\n                  <option value=\"KVM\">KVM</option>\n                  <option value=\"laptop\">Laptop</option>\n                  <option value=\"laser\">Laser</option>\n                  <option value=\"LMP\">LMP</option>\n                  <option value=\"module\">Module</option>\n                  <option value=\"router\">Router</option>\n                  <option value=\"scanner\">Scanner</option>\n                  <option value=\"server\">Server</option>\n                  <option value=\"desktop\">Desktop</option>\n                  <option value=\"storage\">Storage</option>\n                  <option value=\"switch\">Switch</option>\n                  <option value=\"UPS\">UPS</option>\n                  <option value=\"others\">Others</option>\n                </Select>\n              </Label>\n            </div>\n          )}\n\n          <>\n            <div className=\"flex flex-col w-full\">\n              <Label className=\"w-full\">\n                <span>Product Name*</span>\n                <Input\n                  className=\"mt-1\"\n                  type=\"text\"\n                  value={CMRRvalues[num].name}\n                  onChange={(e) => {\n                    let newlist = [...CMRRvalues];\n                    newlist[num].name = e.target.value;\n                    setCMRRValues(newlist);\n                  }}\n                />\n              </Label>\n            </div>\n          </>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Serial Number*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].sno}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].sno = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Select Condition*</span>\n              <Select\n                className=\"mt-1\"\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].condition = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"Good\" selected>\n                  Good\n                </option>\n                <option value=\"Defective\">Defective</option>\n                <option value=\"DOA\">DOA</option>\n                <option value=\"Damaged\">Damaged</option>\n              </Select>\n            </Label>\n          </div>\n        </div>\n\n        {/* -------------Row 2 --------- */}\n        <div className=\"flex-row flex space-x-3\">\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Warranty*</span>\n              <Select\n                className=\"mt-1\"\n                value={CMRRvalues[num].wty}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].wty = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              >\n                <option value=\"\" selected disabled>\n                  Select Category\n                </option>\n                <option value=\"0D\">0 days</option>\n                <option value=\"3M\">3 Months</option>\n                <option value=\"6M\">6 Months</option>\n                <option value=\"1Y\">1 Year</option>\n                <option value=\"2Y\">2 Years</option>\n                <option value=\"3Y\">3 Years</option>\n                <option value=\"4Y\">4 Years</option>\n                <option value=\"5Y\">5 Years</option>\n                <option value=\"20Y\">20 Years</option>\n              </Select>\n            </Label>\n          </div>\n\n          <div className=\"flex flex-col w-full\">\n            <Label className=\"w-full\">\n              <span>Case ID*</span>\n              <Input\n                className=\"mt-1\"\n                type=\"text\"\n                value={CMRRvalues[num].caseId}\n                onChange={(e) => {\n                  let newlist = [...CMRRvalues];\n                  newlist[num].caseId = e.target.value;\n                  setCMRRValues(newlist);\n                }}\n              />\n            </Label>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const CMRRBottomCard = () => {\n    return (\n      <Card className=\"mb-4 shadow-md \">\n        <CardBody>\n          <div className=\"flex flex-row flex-wrap justify-start\">\n            <Button\n              onClick={() => {\n                let newitem = [...CMRRvalues];\n                let add = CMRRinvdetails;\n                newitem.push(add);\n                setCMRRValues(newitem);\n              }}\n              aria-label=\"Notifications\"\n              aria-haspopup=\"true\"\n              layout=\"outline\"\n              className=\" mx-2 \"\n            >\n              Add Item\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    );\n  };\n\n  return (\n    <>\n      <div className=\" mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \"> Type</div>\n            {/* -----------------------------------------CMRR ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={LSTtype}\n                onChange={(e) => {\n                  setLSTtype(e.target.value);\n                }}\n              >\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Normal\" default selected>\n                  Normal\n                </option>\n                <option value=\"CMRR\">CMRR</option>\n                <option value=\"Customer\">Customer</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mr-1 flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1  \">From</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={location}\n                onChange={(e) => {\n                  setLocation(e.target.value);\n                  LSTNumberSetter(date, e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Location\n                </option>\n                {/* <option value=\"\">All</option> */}\n                <option value=\"Trivandrum\">Trivandrum</option>\n                <option value=\"Kottayam\">Kottayam</option>\n                <option value=\"Kozhikode\">Kozhikode</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mx-1 my-1 \">To</div>\n            {/* -----------------------------------------Location ----------------------- */}\n            <div class=\"relative mx-1 \">\n              {LSTtype == \"Normal\" || LSTtype == \"Customer\" ? (\n                <>\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={toLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                      setselectedVendor(defVendor);\n                      if (e.target.value == \"Vendor\") {\n                        setIsVendor(true);\n                      } else setIsVendor(false);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      Location\n                    </option>\n                    {/* <option value=\"\">All</option> */}\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                    {LSTtype == \"Normal\" ? (\n                      <>\n                        <option value=\"Vendor\">Vendor</option>\n                      </>\n                    ) : null}\n                  </select>\n                </>\n              ) : (\n                <>\n                  <select\n                    class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                    value={toLocation}\n                    onChange={(e) => {\n                      setToLocation(e.target.value);\n                      setselectedVendor(defVendor);\n                      if (e.target.value == \"Vendor\") {\n                        setIsVendor(true);\n                      } else setIsVendor(false);\n                    }}\n                  >\n                    <option value=\"\" disabled selected>\n                      Location\n                    </option>\n                    {/* <option value=\"\">All</option> */}\n                    <option value=\"Trivandrum\">Trivandrum</option>\n                    <option value=\"Kottayam\">Kottayam</option>\n                    <option value=\"Kozhikode\">Kozhikode</option>\n                  </select>\n                </>\n              )}\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n          </div>\n          {isVendor ? (\n            <div className=\"mx-1\">\n              <Button\n                layout=\"outline\"\n                className=\"w-full\"\n                onClick={() => setIsVendorModalopen(true)}\n              >\n                Select Vendor\n              </Button>\n            </div>\n          ) : null}\n\n          {/* -----------------------------------------Location ----------------------- */}\n\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" my-2 \">Date</div>\n            <div class=\"relative mx-1 \">\n              <input\n                type=\"date\"\n                value={date}\n                onChange={(e) => {\n                  setDate(e.target.value);\n                  LSTNumberSetter(e.target.value, location);\n                }}\n                placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          <div className=\" flex flex-row dark:text-white  \">\n            <div className=\" mx-1 my-1 \">LST No.</div>\n            <div class=\"relative  \">\n              <input\n                value={LSTNo}\n                disabled\n                onChange={(e) => setLSTNo(e.target.value)}\n                // placeholder=\"LST No.\"\n                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n              />\n            </div>\n          </div>\n          {/* //submitCustomer */}\n\n          <div className=\"flex flex-row dark:text-white mx-5 \">\n            <Button onClick={updateInventory}>Submit</Button>\n          </div>\n        </div>\n        {LSTtype == \"Customer\" ? (\n          <div className=\"flex flex-row dark:text-white  \">\n            <div className=\" flex flex-row dark:text-white mt-2 \">\n              <div className=\"flex items-center  space-x-3 my-3\">\n                <Button\n                  onClick={() => setIsCustomerModalOpen(true)}\n                  aria-label=\"Notifications\"\n                  aria-haspopup=\"true\"\n                >\n                  Pick Customer\n                </Button>\n              </div>\n              {customer._id ? (\n                <>\n                  <div className=\"align-center my-auto mx-4\">\n                    Customer: {customer.customerName} - Account:{\" \"}\n                    {account.accountName} - Unit: {unit.unitName}\n                  </div>\n                </>\n              ) : null}\n            </div>\n          </div>\n        ) : null}\n\n        {LSTtype == \"Normal\" || LSTtype == \"Customer\" ? (\n          <>\n            {SelectedInv()}\n            <div className=\"my-5\">\n              <Button\n                layout=\"outline\"\n                onClick={() => {\n                  if (location == \"\" || toLocation == \"\") {\n                    setModalMessage(\"Select From and To Locations\");\n                    setMessageModal(true);\n                    return;\n                  }\n                  setShowInvTable(true);\n                }}\n              >\n                Add Product from Inventory\n              </Button>\n            </div>\n            {showInvTable ? invTable() : null}\n          </>\n        ) : null}\n      </div>\n\n      {messageModalComponent()}\n      {VendorModal()}\n      {LSTtype == \"CMRR\" ? (\n        <>\n          {CMRRvalues.map((item, i) => {\n            return CMRRMenu(i);\n          })}\n          {CMRRBottomCard()}\n        </>\n      ) : null}\n\n      <UnitListModal\n        isModalOpen={isCustomerModalOpen}\n        setIsModalOpen={setIsCustomerModalOpen}\n        setUnit={setUnit}\n        unit={unit}\n        customer={customer}\n        setCustomer={setCustomer}\n        account={account}\n        setAccount={setAccount}\n      />\n\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n  theunitdetails,\n  setTheUnitDetails,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(\"-------------piking unit\");\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      contactPerson: unit.contactPerson,\n      contactNo: unit.contactNo,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\"  >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n              if (theunitdetails) {\n                setTheUnitDetails(unit);\n              }\n              setAccounts([]);\n              setUnits([]);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../backendapi\";\n\n\nexport default function UnitListModal({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table className=\" w-full overflow-y-scroll\">\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} >\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody className=\"overflow-y-scroll h-64\" >\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          \n        </ModalBody>\n        <ModalFooter>\n        <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}