{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","pages/LST/LST.js","components/Modal/AssetFilters/CustomerSelection.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","LST","useState","useContext","BottomBarContext","bbaropen","setBBarOpen","setAssetDetails","assetdetails","activerowid","setActiveRowId","TopBarContext","setTopHeading","topheading","page","setPage","data","setData","SelectedItems","setSelectedItems","refresh","setRefresh","type","setType","location","setLocation","toLocation","setToLocation","LSTNo","setLSTNo","Date","date","setDate","condition","setCondition","selectedprod","searchtype","searchquery","setSearchQuery","showInvTable","setShowInvTable","messageModal","setMessageModal","modalMessage","setModalMessage","totalResults","setTotalResults","onPageChange","p","thegetter","a","console","log","payload","pages","limit","filters","axios","url","API","Emp","getId","method","response","out","total","useEffect","updateInventory","length","invIds","map","item","push","_id","id","update","caseId","lst","to","invItems","status","className","class","value","onChange","e","target","disabled","selected","xmlns","viewBox","d","placeholder","onClick","user","i","key","name","sno","invnumber","temp","filter","x","defaultValue","invList","fill","aria-hidden","onSubmit","preventDefault","layout","added","initList","resultsPerPage","label","isOpen","onClose","CustomerSelection","isModalOpen","setIsModalOpen","unit","setUnit","account","setAccount","customer","setCustomer","customers","setCustomers","accounts","setAccounts","units","setUnits","tabIndex","setTabIndex","search","setSearch","handleChange","handleSubmit","role","pickCustomer","customerName","accountName","unitName","Axios","post","customerId","accs","pickAccount","accountId","u","pickUnit","selectedIndex","onSelect","ind"],"mappings":"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","file":"static/js/26.0806e642.chunk.js","sourcesContent":["import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport moment from \"moment\";\nimport axios from \"axios\";\n\nimport Emp from \"../../helpers/auth/EmpProfile\";\nimport { EditIcon, TrashIcon,Remove } from \"../../icons\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from \"@windmill/react-ui\";\n\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  Button,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n  Dropdown,\n  DropdownItem,\n} from \"@windmill/react-ui\";\n\nimport { API } from \"../../backendapi\";\nimport CustomerSelection from \"../../components/Modal/AssetFilters/CustomerSelection\";\nimport { BottomBarContext } from \"../../context/BottomBarContext\";\nimport { Link } from \"react-router-dom\";\nimport { TopBarContext } from \"../../context/TopBarContext\";\n\nfunction LST() {\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [deleteId, setDeleteId] = useState(0);\n\n  const { bbaropen, setBBarOpen, setAssetDetails, assetdetails } = useContext(\n    BottomBarContext\n  );\n  // table variable styles\n  const [activerowid, setActiveRowId] = useState(-1);\n\n  const { topheading, setTopHeading } = useContext(TopBarContext);\n\n  const [floatbox, setFloatBox] = useState(false);\n  const [page, setPage] = useState(1);\n  const [data, setData] = useState([]);\n  const [SelectedItems, setSelectedItems] = useState([]);\n  // dropdown and modals\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOpenTwo, setIsOpenTwo] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [refresh, setRefresh] = useState(true);\n  const [disabler, setDisabler] = useState(true);\n\n  // filterhooks\n  const [type, setType] = useState(\"\");\n  const [location, setLocation] = useState(\"\");\n  const [toLocation, setToLocation] = useState(\"\");\n  const [LSTNo, setLSTNo] = useState(\"\");\n  const [date, setDate] = useState(new Date());\n  const [condition, setCondition] = useState(\"\");\n\n  // Selected Prod for the bottom bar----------\n  const [selectedprod, setSelectedProd] = useState({});\n\n  // search\n  const [searchtype, setSearchType] = useState(\"\");\n  const [searchlabel, setSearchLabel] = useState(\"\");\n  const [searchquery, setSearchQuery] = useState(\"\");\n\n  //show table\n  const [showInvTable, setShowInvTable] = useState(false);\n\n  //modal\n  const [messageModal, setMessageModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState(\"\");\n\n  // Getting data states\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const [totalResults, setTotalResults] = useState(20);\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p);\n  }\n\n \n  // on page change, load new sliced data\n  // here you would make another server request for new data\n\n  // -------Enabling Bottom Bar----\n//   useEffect(() => {\n//     setBBarOpen(1);\n//     return () => {\n//       setBBarOpen(0);\n//       setAssetDetails({});\n//     };\n//   }, []);\n  // -------------------------------\n  // ----------------------Heading Use Effect-------------\n  useEffect(() => {\n    setTopHeading(\"LST\");\n    return () => {\n      setTopHeading(\"\");\n    };\n  }, []);\n  // -----------------------------------------------------\n\n  useEffect(() => {\n    // setDate(moment(new Date()).format(\"DD/MM/YYYY\"));\n    // Using an IIFE\n    thegetter();\n    // setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage));\n  }, [page, location, condition, type, refresh]);\n\n  async function thegetter() {\n    console.log(\"getter called\");\n    let payload = {\n      pages: {\n        page: page,\n        limit: resultsPerPage,\n      },\n      filters: {\n        type: type,\n        location: location,\n        condition: condition,\n        searchtype: searchtype,\n        searchquery: searchquery,\n      },\n    };\n    // console.log(`${API}/asset/${Emp.getId()}/getall`);\n\n    try {\n      let response = await axios({\n        url: `${API}/inventory/${Emp.getId()}/getall`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data.out);\n      setTotalResults(response.data.total);\n      // const { total, data } = response.data;\n      // console.log(data + \"Now\");\n\n      setData(response.data.out);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  console.log(selectedprod);\n\n  const updateInventory= async ()=>{\n    if(LSTNo==\"\"){\n      setModalMessage(\"LST Number necessary\")\n      setMessageModal(true);\n      return; \n    }\n    if(date==\"\"){\n      setModalMessage(\"Date Necessary\")\n      setMessageModal(true);\n      return; \n    }\n    if(location==\"\"){\n      setModalMessage(\"From location not selected\")\n      setMessageModal(true);\n      return; \n    }\n    if(toLocation==\"\"){\n      setModalMessage(\"To location not selected\")\n      setMessageModal(true);\n      return; \n    }\n    if(SelectedItems.length==0){\n      setModalMessage(\"No items selected\")\n      setMessageModal(true);\n      return;\n    }\n    let invIds=[];\n    SelectedItems.map(async item=>{\n      invIds.push(item._id);\n      const data = {\n        id: item._id,\n        update: {\n          location: \"In Transit\",\n          caseId:item.caseId\n        },\n      };\n      console.log(\"PAYLOAD\", data);\n      try {\n        await axios({\n          url: `${API}/inventory/${Emp.getId()}/invupdate`,\n          method: \"POST\",\n          data: data,\n        });\n        // setIsReviewModalOpen(true);\n        console.log(\"Done\");\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    })\n\n    let lst={\n      from:location,\n      to:toLocation,\n      LSTNo:LSTNo,\n      date:date,\n      invItems:invIds,\n      status:\"In Transit\"\n    }\n    console.log(\"LST\",lst);\n\n    try {\n      await axios({\n        url: `${API}/lst/${Emp.getId()}/create`,\n        method: \"POST\",\n        data: lst,\n      });\n      // setIsReviewModalOpen(true);\n      console.log(\"Done\");\n      setModalMessage(\"LST Submitted\")\n      setMessageModal(true);\n      setSelectedItems([])\n      thegetter();\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n\n  }\n\n\n  const invTable=()=>{\n    return(\n      <div className=\"dark:bg-gray-700 bg-gray-100 px-2 py-2 rounded-lg\">\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"my-2 flex sm:flex-row flex-col items-start sm:items-center sm:justify-left h-full space-x-2 \">\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={type}\n                onChange={(e) => {\n                  setType(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Item Type\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Mouse\">Mouse</option>\n                <option value=\"Keyboard\">Keyboard</option>\n                <option value=\"Monitor\">Monitor</option>\n                <option value=\"Cpu\">Cpu</option>\n                <option value=\"Ram\">Ram</option>\n                <option value=\"Fan\">Fan</option>\n                <option value=\"Motherboard\">Motherboard</option>\n                <option value=\"SMPS\">SMPS</option>\n                <option value=\"HDD\">HDD</option>\n                <option value=\"SMPS\">SMPS</option>\n                <option value=\"GCard\">Gcard</option>\n                <option value=\"EnetCard\">Enet Card</option>\n                <option value=\"SerialCard\">Serial Card</option>\n                <option value=\"ParalellCard\">Paralell Card</option>\n                <option value=\"OpticalDrive\">Optical Drive</option>\n                <option value=\"Others\">Others</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n           \n            {/* ---------------------------Condition Drop Down-------------------------------------- */}\n            <div class=\"relative mx-1 \">\n              <select\n                class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                value={condition}\n                onChange={(e) => {\n                  setCondition(e.target.value);\n                }}\n              >\n                <option value=\"\" disabled selected>\n                  Condition\n                </option>\n                <option value=\"\">All</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Bad\">Bad</option>\n              </select>\n\n              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <svg\n                  class=\"fill-current h-4 w-4\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  viewBox=\"0 0 20 20\"\n                >\n                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                </svg>\n              </div>\n            </div>\n\n            {/* -----------------Search Bar------------------------------------ */}\n            <div class=\"block relative xl:ml-64\">\n              <span class=\"h-full absolute inset-y-0 left-0 flex items-center pl-2\">\n                <svg\n                  viewBox=\"0 0 24 24\"\n                  class=\"h-4 w-4 fill-current text-gray-500\"\n                >\n                  <path d=\"M10 4a6 6 0 100 12 6 6 0 000-12zm-8 6a8 8 0 1114.32 4.906l5.387 5.387a1 1 0 01-1.414 1.414l-5.387-5.387A8 8 0 012 10z\"></path>\n                </svg>\n              </span>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setRefresh(!refresh);\n                }}\n              >\n                <input\n                  value={searchquery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  placeholder=\"Search\"\n                  class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Add</TableCell>\n                \n              </tr>\n            </TableHeader>\n            <TableBody>\n              {data.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button layout=\"outline\"  className=\"dark:border-green-700 border-green-400\" onClick={()=>{\n                      let added=false;\n                      let initList=data;\n                      initList= initList.filter(i=>i._id!=user._id);\n                      console.log(initList);\n                      setData(initList);\n                      SelectedItems.map(i=>{\n                        if(i._id==user._id){\n                          console.log(i._id,user._id)\n                          setModalMessage(\"Product already Added!\");\n                          setMessageModal(true);\n                          added=true;\n                        }\n                      })\n                      if(added) return;\n                      let temp=[...SelectedItems,user];\n                      setSelectedItems(temp);\n                      // setShowInvTable(false);\n                      // setModalMessage(\"Product  Added!\");\n                          // setMessageModal(true);\n                    }}>Add</Button>\n                  </TableCell>\n\n                  \n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter>\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      \n       \n       </div>\n    )\n  }\n\n  const SelectedInv=()=>{\n    return(\n      <>\n        {/* ------------------------------------------Filters----------------------------------------------------------------------------  */}\n        <div className=\"\">\n          {/* -------------------------------------Row 1 ------------------------------------------------------------------------------- */}\n          <div class=\"mb-1 mt-5 dark:text-white font-semibold \">\n              Selected Items\n            \n          </div>\n        </div>\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n        <TableContainer className=\"mt-4\">\n          <Table>\n            <TableHeader>\n              <tr>\n                <TableCell>Type</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Serial Number</TableCell>\n                <TableCell>Location</TableCell>\n                <TableCell>Inv Number</TableCell>\n                <TableCell>Condition</TableCell>\n                <TableCell>Case Id</TableCell>\n                <TableCell>Remove</TableCell>\n                \n              </tr>\n            </TableHeader>\n            <TableBody>\n              {SelectedItems.map((user, i) => (\n                <TableRow\n                  className={`hover:shadow-lg dark:hover:bg-gray-600 ${\n                    activerowid == user._id\n                      ? \"bg-blue-300 shadow-lg dark:bg-gray-600\"\n                      : \"white\"\n                  } `}\n                  key={i}\n                  onClick={() => {\n                    setActiveRowId(i);\n                    // console.log(\"the id is \" + user._id);\n                    // setSelectedProd(user);\n                    // setAssetDetails(user);\n                    // console.log(user.product.keyboard[0].kbdname);\n                  }}\n                >\n                  <TableCell className=\"w-8\">\n                    <div className=\"flex items-center text-sm \">\n                      {/* <Avatar\n                        className=\"hidden ml-2 mr-3 md:block\"\n                        src=\"https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg\"\n                        alt=\"User image\"\n                      /> */}\n                      <div>\n                        <p className=\"font-semibold\">{user.type}</p>\n                        {/* <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                          {user.accountName}\n                        </p> */}\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.name}</span>\n                  </TableCell>\n\n                  <TableCell>\n                    <span className=\"text-sm\">{user.sno}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.location}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-sm\">{user.invnumber}</span>\n                  </TableCell>\n                  <TableCell>\n                    <Badge\n                      type={user.condition == \"Good\" ? \"primary\" : \"danger\"}\n                    >\n                      {user.condition}\n                    </Badge>\n                  </TableCell>\n\n                  <TableCell>\n                  \n                      <input\n                                value={user.caseId}\n                                onChange={(e) =>{\n                                  let temp=SelectedItems;\n                                  // newuser[\"caseId\"]=e.target.value\n                                  temp=temp.filter(x=>{\n                                    if(x._id!=user._id)return x;\n                                    else return {...x,caseId:e.target.value}\n                                    });\n                                  setSelectedItems(temp);\n                                }}\n                                defaultValue=\"Imprest\"\n                                placeholder=\"Cse Id.\"\n                                class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-1 py-1 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                              />\n\n                            \n                        \n                  </TableCell>\n\n                  <TableCell>\n                    <div\n                      className=\" py-1\" \n                      onClick={()=>{\n                        \n                        let invList=[...data,user];\n                        setData(invList);\n                        let temp=SelectedItems;\n                        temp= temp.filter(i=>i._id!=user._id);\n\n                        \n                        setSelectedItems(temp);\n                      }}\n                    >\n                      <TrashIcon className=\"w-5 h-5 cursor-pointer m-2 text-2xl\" fill=\"maroon\" aria-hidden=\"true\" />\n                    </div>\n                  </TableCell>\n\n                  \n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          {/* <TableFooter>\n            <Pagination\n              totalResults={totalResults}\n              resultsPerPage={resultsPerPage}\n              label=\"Table navigation\"\n              onChange={onPageChange}\n            />\n          </TableFooter> */}\n        </TableContainer>\n\n        {/* ----------------------------------------------Table----------------------------------------------------- */}\n      \n    \n       </>\n    )\n  }\n\n  const messageModalComponent = () => {\n    return (\n      <>\n        <Modal\n          isOpen={messageModal}\n          onClose={() => setMessageModal(false)}\n        >\n          <ModalHeader>{modalMessage}</ModalHeader>\n          <ModalBody></ModalBody>\n          <ModalFooter>\n            <Button\n              className=\"w-full sm:w-auto\"\n              onClick={() => setMessageModal(false)}\n            >\n              Okay!\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  };\n\n  return (\n    <>\n     \n      <div className=\"mb-64 mt-4\">\n        <div className=\"flex flex-row dark:text-white  \">\n            <div className=\"mr-2 flex flex-row dark:text-white  \">\n                  <div className=\"mx-1 my-1  \">From</div>\n                  {/* -----------------------------------------Location ----------------------- */}\n                  <div class=\"relative mx-1 \">\n                        <select\n                          class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                          value={location}\n                          onChange={(e) => {\n                            setLocation(e.target.value);\n                          }}\n                        >\n                          <option value=\"\" disabled selected>\n                            Location\n                          </option>\n                          {/* <option value=\"\">All</option> */}\n                          <option value=\"Trivandrum\">Trivandrum</option>\n                          <option value=\"Kottayum\">Kottayum</option>\n                          <option value=\"Kozhikode\">Kozhikode</option>\n                        </select>\n\n                              <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                                <svg\n                                  class=\"fill-current h-4 w-4\"\n                                  xmlns=\"http://www.w3.org/2000/svg\"\n                                  viewBox=\"0 0 20 20\"\n                                >\n                                  <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                                </svg>\n                              </div>\n                  </div>\n               </div>\n\n          <div className=\"flex flex-row dark:text-white  \">\n                <div className=\"mx-1 my-1 \" >To</div>\n                {/* -----------------------------------------Location ----------------------- */}\n                <div class=\"relative mx-1 \">\n                      <select\n                        class=\" shadow-md h-full rounded border block appearance-none w-full bg-white border-gray-400 text-gray-700 py-2 px-4 pr-8 leading-tight focus:outline-none   focus:bg-white focus:border-gray-500\"\n                        value={toLocation}\n                        onChange={(e) => {\n                          setToLocation(e.target.value);\n                        }}\n                      >\n                        <option value=\"\" disabled selected>\n                          Location\n                        </option>\n                        {/* <option value=\"\">All</option> */}\n                        <option value=\"Trivandrum\">Trivandrum</option>\n                        <option value=\"Kottayum\">Kottayum</option>\n                        <option value=\"Kozhikode\">Kozhikode</option>\n                      </select>\n\n                      <div class=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                        <svg\n                          class=\"fill-current h-4 w-4\"\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          viewBox=\"0 0 20 20\"\n                        >\n                          <path d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\" />\n                        </svg>\n                      </div>\n                    </div>\n            </div>\n\n            {/* -----------------------------------------Location ----------------------- */}\n            <div className=\" flex flex-row dark:text-white  \">\n                      <div className=\" mx-3 my-1 \" >LST No.</div>\n                  <div class=\"relative mx-1 \">\n                  <input\n                            value={LSTNo}\n                            onChange={(e) => setLSTNo(e.target.value)}\n                            placeholder=\"LST No.\"\n                            class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-1 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                          />\n\n                        \n                      </div>\n            </div>\n            <div className=\"flex flex-row dark:text-white  \">\n              <div className=\" my-2 \" >Date</div>\n                <div class=\"relative mx-1 \">\n                  <input  type=\"date\"\n                        value={date}\n                        onChange={(e) => setDate(e.target.value)}\n                        placeholder=\"LST No.\"\n                        class=\"shadow-md z-20 appearance-none rounded border border-gray-400 border-b block pl-8 pr-6 py-2 w-full bg-white text-sm placeholder-gray-400 text-gray-700 focus:bg-white focus:placeholder-gray-600 focus:text-gray-700 focus:outline-none\"\n                      />\n\n                    \n                  </div>\n            </div>\n            {/* //submitCustomer */}\n            \n            <div className=\"flex flex-row dark:text-white mx-5 \">\n              <Button onClick={updateInventory}>Submit</Button>\n            </div>\n\n\n\n\n      \n      </div>\n      {SelectedInv()}\n      <div className=\"my-5\">\n      <Button    onClick={()=>{\n                      if(location==\"\"|| toLocation==\"\"){\n                        setModalMessage(\"Select From and To Locations\")\n                        setMessageModal(true);\n                        return;\n                      }\n                      setShowInvTable(true);\n       }}>Add Product from Inventory</Button>\n       </div>\n    {showInvTable?invTable():null}\n      \n      </div>\n\n      \n       {messageModalComponent()}\n      {/* ------------------------------------Bottom Bar---------------------------------- */}\n    </>\n  );\n}\n\nexport default LST;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from \"@windmill/react-ui\";\nimport Axios from \"axios\";\nimport { Tabs, TabList, Tab, TabPanel } from \"react-tabs\";\nimport \"react-tabs/style/react-tabs.css\";\n\nimport { API } from \"../../../backendapi\";\n\nexport default function CustomerSelection({\n  isModalOpen,\n  setIsModalOpen,\n  unit,\n  setUnit,\n  account,\n  setAccount,\n  customer,\n  setCustomer,\n  refresh,\n  setRefresh,\n}) {\n  const [customers, setCustomers] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n  const [units, setUnits] = useState([]);\n  const [tabIndex, setTabIndex] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  //   Search Functions---------------------------------------------------------\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n\n  //   -----------------------Send Search for Fuzzy ---------------------------------------------------------\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let payload = {\n      search: search,\n      role: 1,\n    };\n    try {\n      let response = await axios({\n        url: `${API}/customer/customers`,\n        method: \"POST\",\n        data: payload,\n      });\n      console.log(response.data);\n      setCustomers(response.data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  //   ---------------Intital Load ----------------------------\n\n  useEffect(() => {\n    (async function thegetter() {\n      let payload = {\n        search: search,\n        role: 1,\n      };\n      try {\n        let response = await axios({\n          url: `${API}/customer/customers`,\n          method: \"POST\",\n          data: payload,\n        });\n        console.log(response.data);\n        setCustomers(response.data);\n      } catch (error) {\n        throw error;\n      }\n    })();\n  }, []);\n\n  const pickCustomer = async (customer) => {\n    // console.log(customer);\n    setCustomer({\n      _id: customer._id,\n      customerName: customer.name,\n    });\n    setAccount({\n      _id: \"\",\n      accountName: \"\",\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const accs = await Axios.post(`${API}/customer/accounts`, {\n        customerId: customer._id,\n      });\n      console.log(accs.data);\n      // let temp = [];\n      // accs.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setAccounts(accs.data);\n      //   setTabIndex(1);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickAccount = async (account) => {\n    console.log(account);\n    setAccount({\n      _id: account._id,\n      accountName: account.name,\n    });\n    setUnit({\n      _id: \"\",\n      unitName: \"\",\n    });\n    try {\n      const u = await Axios.post(`${API}/customer/units`, {\n        accountId: account._id,\n      });\n      console.log(u.data);\n      // let temp = [];\n      // u.data.map((acc) => {\n      //   temp.push(acc);\n      // });\n      setUnits(u.data);\n      //   setTabIndex(2);\n    } catch (err) {\n      console.log(\"axiosErr\", err);\n    }\n  };\n\n  const pickUnit = async (unit) => {\n    console.log(unit);\n    setUnit({\n      _id: unit._id,\n      unitName: unit.unitName,\n    });\n  };\n\n  const CustomerTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Customer</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n            <tr>\n              <TableCell>\n                <form onSubmit={handleSubmit}>\n                  <input\n                    className=\"block w-full pr-20 text-sm text-black dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                    placeholder=\"Search Customers\"\n                    onChange={handleChange}\n                  />\n                </form>\n              </TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {customers.map((customer, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickCustomer(customer)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{customer.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const AccountTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Account</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {accounts.map((account, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickAccount(account)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{account.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  const UnitTable = () => {\n    return (\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Unit</TableCell>\n              {/* <TableCell>Unit</TableCell> */}\n              {/* <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell> */}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {units.map((unit, i) => (\n              <TableRow\n                key={i}\n                className=\"hover:bg-purple-200 cursor-pointer\"\n                onClick={() => pickUnit(unit)}\n              >\n                <TableCell>\n                  <div>\n                    <div>\n                      <p className=\"font-semibold\">{unit.unitName}</p>\n                    </div>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter></TableFooter>\n      </TableContainer>\n    );\n  };\n\n  return (\n    <>\n      {/* <div>\n      <Button onClick={openModal}>Open modal</Button>\n    </div> */}\n      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n        <ModalHeader>\n          Select{\" \"}\n          {tabIndex == 0 ? (\n            <>Customer</>\n          ) : tabIndex == 1 ? (\n            <>Account</>\n          ) : (\n            <>Unit</>\n          )}\n        </ModalHeader>\n        <ModalBody>\n          <Tabs selectedIndex={tabIndex} onSelect={(ind) => setTabIndex(ind)}>\n            <TabList>\n              <Tab>Customer</Tab>\n              <Tab>Account</Tab>\n              <Tab>Unit</Tab>\n            </TabList>\n            <TabPanel>{CustomerTable()}</TabPanel>\n            <TabPanel>{AccountTable()}</TabPanel>\n            <TabPanel>{UnitTable()}</TabPanel>\n          </Tabs>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Customer: {customer.customerName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Account : {account.accountName}\n          </Badge>\n          <Badge className=\"mx-2 text-md\" type=\"success\">\n            Unit: {unit.unitName}\n          </Badge>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            className=\"w-full sm:w-auto\"\n            // layout=\"outline\"\n            onClick={() => {\n              setIsModalOpen(false);\n              setRefresh(!refresh);\n            }}\n          >\n            Select\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n}\n"],"sourceRoot":""}